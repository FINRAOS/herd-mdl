#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: MDL - OpenLDAP - Installation template
Parameters:
  MDLInstanceName:
    Description: MDLInstanceName name
    Type: String
  Environment:
    Description: Application environment
    Type: String
  EnableSSLAndAuth:
    Description: Whether to enable HTTPS and authentication
    Type: String
  DeploymentBucketName:
    Description: Deployment bucket where the code resides
    Type: String
  ReleaseVersion:
    Description: Release version
    Type: String
  VpcIdParameterKey:
    Description: SSM Parameter Name for VPC ID
    Type: String
  PrivateSubnetsParameterKey:
    Description: VPC Parameter key name in system store
    Type: String
  KeypairName:
    Description: The name of the keypair in parameter store.
    Type: String
  ImageId:
    Description: AMI id for EC2 instances
    Type: String
  LdapInstanceType:
    Description: Ldap EC2 instance type
    Type: String
  DN:
    AllowedPattern: ^(dc=[^=]+,)*(dc=[^=]+)$
    ConstraintDescription: Must be 1 or more dc= statements separated by commas. all
      lowercase, no spaces.
    Description: 'The DN of the LDAP domain. example: dc=myorg,dc=com'
    Type: String
  MDLServerDeploymentRole:
    Description: Elasticsearch Deployment Service Role Name
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceProfile:
    Description: Elasticsearch Instance Profile Name
    Type: AWS::SSM::Parameter::Value<String>
  CreateOpenLDAP:
    Description: Create OpenLDAP for Authentication - true || false
    Type: String
  LogGroupName:
    Description: CloudWatch Log group name
    Type: String
Conditions:
  CreateOpenLDAPCondition: !Equals
    - !Ref CreateOpenLDAP
    - 'true'
  CreateSsmParametersCondition: !Or [!Equals [!Ref EnableSSLAndAuth, false], !Equals [!Ref CreateOpenLDAP, true]]
Resources:
  MDLLdap:
    Condition: CreateOpenLDAPCondition
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-OpenLdap'
  DeployGroupASGroup:
    Condition: CreateOpenLDAPCondition
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    DependsOn: MDLLdap
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-OpenLdap'
      DeploymentGroupName: !Sub '${MDLInstanceName}-OpenLdapDeployGroup'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !Ref MDLServerDeploymentRole
      Ec2TagFilters:
        - Key: Name
          Value: !Sub 'AWSLX${MDLInstanceName}-OpenLdap-${Environment}'
          Type: KEY_AND_VALUE
  LdapSecurityGroup:
    Condition: CreateOpenLDAPCondition
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-OpenLdapInstanceSecurityGroup'
      GroupDescription: Allows ssl, http and https ingress from all sources in the VPC
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '636'
          ToPort: '636'
          CidrIp: 0.0.0.0/0
  LdapEc2Instance:
    Condition: CreateOpenLDAPCondition
    Type: 'AWS::EC2::Instance'
    DependsOn: LdapSecurityGroup
    Metadata:
      Comment: Install Open Ldap
      'AWS::CloudFormation::Init':
        configSets:
          PreInstallAndInstall:
            - PreInstall
            - Install
        PreInstall:
          commands:
            1-setup-codedeploy:
              command: !Join
                - ''
                - - |
                    function check_error {     return_code=${1};     cmd="$2";     if [ ${return_code} -ne 0 ];     then         echo "$(date "+%m/%d/%Y %H:%M:%S") *** ERROR *** ${cmd} has failed with error $return_code";         exit 1;     fi; }
                    function execute_cmd {         cmd="${1}";         retry="${2}";         echo $cmd;         eval $cmd;         returnCode=${PIPESTATUS[0]};         if [ ${returnCode} -ne 0 ] ; then             if [ ${retry} = "RETRY" ] ; then                 sleep 2m;                 eval $cmd;                 check_error ${PIPESTATUS[0]} "$cmd";             fi;         else             check_error ${returnCode} "$cmd";         fi;          }
                    configFile="/tmp/logs.props"
                    . ${configFile}
                    user=mdladmin
                    password=$(openssl rand -base64 32 | tr -d /=+ | cut -c -16)
                    execute_cmd "useradd -m -d /home/${user} ${user}"
                    echo ${user}:${password} | chpasswd
                    echo "${user} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    cd /home/${user}
                    execute_cmd "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install"
                    execute_cmd "chmod +x ./install"
                    ./install auto 2>&1
                    sleep 2m
                    execute_cmd "./install auto" 2>&1 # Retrying after 2m
                    execute_cmd "sudo service codedeploy-agent status"
                    echo 'Code deploy setup complete, sleeping for 2 mins'
                    sleep 2m
                    execute_cmd "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py" "RETRY" 2&>1
                    execute_cmd "chmod +x ./awslogs-agent-setup.py"
                    execute_cmd "sudo python awslogs-agent-setup.py -n -r ${region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf"
                    execute_cmd "sudo service awslogs restart"
          files:
            /var/awslogs/etc/config/codedeploy_logs.conf:
              content: !Sub |
                [codedeploy-agent-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/aws/codedeploy-agent/codedeploy-agent.log
                log_stream_name = openldap/codedeploy/{instance_id}-codedeploy-agent-log
                log_group_name = ${LogGroupName}

                [codedeploy-updater-logs]
                file = /tmp/codedeploy-agent.update.log
                log_stream_name = openldap/codedeploy/{instance_id}-codedeploy-updater-log
                log_group_name = ${LogGroupName}

                [codedeploy-deployment-logs]
                file = /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
                log_stream_name = openldap/codedeploy/{instance_id}-codedeploy-deployments-log
                log_group_name = ${LogGroupName}
              mode: '000644'
              owner: root
              group: root
            /tmp/logs.props:
              content: !Sub |
                region=${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        Install:
          commands:
            1-deploy:
              command: !Join
                - ''
                - - |
                    chown -R mdladmin:mdladmin /home/mdladmin/deploy
                  - 'aws deploy create-deployment --application-name '
                  - !Sub '${MDLInstanceName}-OpenLdap'
                  - ' --deployment-config-name CodeDeployDefault.OneAtATime'
                  - ' --deployment-group-name '
                  - !Sub '${MDLInstanceName}-OpenLdapDeployGroup'
                  - ' --s3-location bucket='
                  - !Ref DeploymentBucketName
                  - ',bundleType=zip,key='
                  - !Ref ReleaseVersion
                  - '/ldap/ldap.zip '
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - |+
          files:
            /home/mdladmin/deploy/mdl/conf/deploy.props:
              content: !Join
                - ''
                - - waitHandleForLdap="
                  - !Ref LdapWaitHandle
                  - |-
                    "
                    MDLInstanceName=
                  - !Ref MDLInstanceName
                  - |-

                    Environment=
                  - !Ref Environment
                  - |-

                    stackName=
                  - !Ref 'AWS::StackName'
                  - |-

                    region=
                  - !Ref 'AWS::Region'
                  - |-

                    deployLocation=/home/mdladmin/deploy/mdl
                  - |-

                    logGroupName=
                  - !Ref LogGroupName
                  - |+

              mode: '000400'
              owner: mdladmin
              group: mdladmin
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LdapEc2Instance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '  --stack '
                  - !Ref 'AWS::StackId'
                  - '  --resource LdapEc2Instance '
                  - '  --configsets PreInstallAndInstall '
                  - '  --region     '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeypairName
      InstanceType: !Ref LdapInstanceType
      SecurityGroupIds:
        - !Ref LdapSecurityGroup
      SubnetId: !Select
        - '0'
        - !Split
          - ','
          - !Ref PrivateSubnetsParameterKey
      IamInstanceProfile: !Ref MDLInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub 'AWSLX${MDLInstanceName}-OpenLdap-${Environment}'
        - Key: Purpose
          Value: !Ref MDLInstanceName
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LdapEc2Instance --configsets PreInstallAndInstall --region ${AWS::Region}
  LdapWaitHandle:
    Condition: CreateOpenLDAPCondition
    Type: AWS::CloudFormation::WaitConditionHandle
  LdapWaitCondition:
    Condition: CreateOpenLDAPCondition
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LdapEc2Instance
    Properties:
      Handle: !Ref LdapWaitHandle
      Timeout: '900'

# LDAP General Parameters
  HostNameParameter:
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/HostName
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: LDAP HostName name
  LdapBaseDNParameter:
    DependsOn: HostNameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/BaseDN
      Type: String
      Value: !If [CreateOpenLDAPCondition, !Ref DN, NoAuthentication]
      Description: LDAP Base DN parameter

# LDAP Admin parameters
  LdapAdministratorNameParameter:
    DependsOn: LdapBaseDNParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/AdministratorName
      Type: String
      Value: !If [CreateOpenLDAPCondition, ldap_admin_user, NoAuthentication]
      Description: LDAP administrator name
  LdapAdministratorPasswordParameter:
    DependsOn: LdapAdministratorNameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/AdministratorPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: LDAP administator account password parameter

# Auth Groups

  LdapHerdAdminAuthGroupParameter:
    DependsOn: LdapAdministratorPasswordParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/AuthGroup/Admin
      Type: String
      Value: !If [CreateOpenLDAPCondition, APP_MDL_ACL_RO_herd_admin, NoAuthentication]
      Description: MDL Herd ADMIN auth group-name parameter
  LdapHerdRoAuthGroupParameter:
    DependsOn: LdapHerdAdminAuthGroupParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/AuthGroup/RO
      Type: String
      Value: !If [CreateOpenLDAPCondition, APP_MDL_ACL_RO_herd_ro, NoAuthentication]
      Description: MDL Herd Read-Only auth group-name parameter
  LdapHerdMdlAuthGroupParameter:
    DependsOn: LdapHerdRoAuthGroupParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/AuthGroup/MDL
      Type: String
      Value: !If [CreateOpenLDAPCondition, APP_MDL_ACL_RO_mdl_rw, NoAuthentication]
      Description: MDL Herd MDL auth group-name parameter
  LdapHerdSecAuthGroupParameter:
    DependsOn: LdapHerdMdlAuthGroupParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/AuthGroup/SEC
      Type: String
      Value: !If [CreateOpenLDAPCondition, APP_MDL_ACL_RO_sec_market_data_rw, NoAuthentication]
      Description: MDL Herd SEC auth group-name parameter
  LdapMliyAuthGroupParameter:
    DependsOn: LdapHerdSecAuthGroupParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/AuthGroup/MLIY
      Type: String
      Value: !If [CreateOpenLDAPCondition, mliyusers, NoAuthentication]
      Description: MDL Herd Mliy auth group-name parameter
# LDAP usernames and passwords
  LdapHerdAdminUsernameParameter:
    DependsOn: LdapMliyAuthGroupParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/HerdAdminUsername
      Type: String
      Value: !If [CreateOpenLDAPCondition, admin_user, NoAuthentication]
      Description: Herd admin account username parameter
  LdapHerdAdminPasswordParameter:
    DependsOn: LdapHerdAdminUsernameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/HerdAdminPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: Herd admin account password parameter
  LdapHerdRoUsernameParameter:
    DependsOn: LdapHerdAdminPasswordParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/HerdRoUsername
      Type: String
      Value: !If [CreateOpenLDAPCondition, ro_user, NoAuthentication]
      Description: Herd Read-Only account username parameter
  LdapHerdRoPasswordParameter:
    DependsOn: LdapHerdRoUsernameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/HerdRoPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: Herd Read-Only account password parameter

  LdapHerdMdlUsernameParameter:
    DependsOn: LdapHerdRoPasswordParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/HerdMdlUsername
      Type: String
      Value: !If [CreateOpenLDAPCondition, mdl_user, NoAuthentication]
      Description: Herd MDL account username parameter
  LdapHerdMdlPasswordParameter:
    DependsOn: LdapHerdMdlUsernameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/HerdMdlPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: Herd MDL account password parameter

  LdapHerdSecUsernameParameter:
    DependsOn: LdapHerdMdlPasswordParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/HerdSecUsername
      Type: String
      Value: !If [CreateOpenLDAPCondition, sec_user, NoAuthentication]
      Description: Herd SEC account username parameter
  LdapHerdSecPasswordParameter:
    DependsOn: LdapHerdSecUsernameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/HerdSecPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: Herd SEC account password parameter
  LdapHerdBasicUsernameParameter:
    DependsOn: LdapHerdSecPasswordParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/User/HerdBasicUsername
      Type: String
      Value: !If [CreateOpenLDAPCondition, basic_user, NoAuthentication]
      Description: Herd Basic User account username parameter
  LdapHerdBasicUserPasswordParameter:
    DependsOn: LdapHerdBasicUsernameParameter
    Condition: CreateSsmParametersCondition
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /LDAP/Password/HerdBasicUserPassword
      Type: String
      Value: !If [CreateOpenLDAPCondition, FilledLater, NoAuthentication]
      Description: Herd Basic User account password parameter
Outputs:
  OpenLdapHostnameDns:
    Condition: CreateOpenLDAPCondition
    Description: Open LDAP instance's private DNS name.
    Value: !GetAtt
      - LdapEc2Instance
      - PrivateDnsName
  OpenLdapHostIp:
    Condition: CreateOpenLDAPCondition
    Description: Open LDAP instance's private IP address.
    Value: !GetAtt
      - LdapEc2Instance
      - PrivateIp
