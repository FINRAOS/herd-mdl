#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: MDL - Security Groups - Installation Template
Parameters:
  VpcIdParameterKey:
    Description: VPC Parameter key name in system store
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceName:
    Description: MDLInstanceName name
    Type: String
  Environment:
    Description: Application environment
    Type: String
  EnableSSLAndAuth:
    Default: 'true'
    Description: Whether to enable Authentication/SSL
    Type: String
Conditions:
  EnableSSLAndAuth: !Equals
    - !Ref EnableSSLAndAuth
    - 'true'
  DisableSSLAndAuth: !Equals
    - !Ref EnableSSLAndAuth
    - 'false'
Resources:
  BdsqlEMRServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-BdsqlEMRServiceSecurityGroup'
      GroupDescription: Allow SSL & postgress to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8889'
          ToPort: '8889'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5439'
          ToPort: '5439'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt
            - MetastorRDSSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  BdsqlEMRSlaveSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-BdsqlEMRSlaveSecurityGroup'
      GroupDescription: Allow https & postgress to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  BdsqlEMRMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-BdsqlEMRMasterSecurityGroup'
      GroupDescription: Allow https & postgress to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5439'
          ToPort: '5439'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8889'
          ToPort: '8889'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt
            - MetastorRDSSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '10000'
          ToPort: '10000'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  ElasticSearchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-ElasticSearchSecurityGroup'
      GroupDescription: 'Allow ssh, http, https & all outgoing traffic'
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8888'
          ToPort: '8888'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  HerdRDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-HerdRDSSecurityGroup'
      GroupDescription: Allow https to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
  HerdALBSecurityGroupSSL:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: EnableSSLAndAuth
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-HerdALBSecurityGroup'
      GroupDescription: Allow https to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  HerdALBSecurityGroupPlainTXT:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: DisableSSLAndAuth
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-HerdALBSecurityGroup'
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  BdsqlALBSecurityGroupSSL:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: EnableSSLAndAuth
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-BdsqlALBSecurityGroup'
      GroupDescription: Allow https to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5439'
          ToPort: '5439'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  BdsqlALBSecurityGroupPlainTXT:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: DisableSSLAndAuth
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-BdsqlALBSecurityGroup'
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  HerdSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-HerdSecurityGroup'
      GroupDescription: Allow https & postgres to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  MetastorSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-MetastorSecurityGroup'
      GroupDescription: Allow https & mysql to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  MetastorEMRSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-MetastorEMRSecurityGroup'
      GroupDescription: Allow https & postgress to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  MetastorRDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-MetastorRDSSecurityGroup'
      GroupDescription: Allow https to client host
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  NsAuthSyncUtilitySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-${Environment}-NsAuthSyncSecurityGroup'
      GroupDescription: 'Allows thrift connection to Hive on EMR cluster'
      VpcId: !Ref VpcIdParameterKey
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                Resource: '*'
  DeleteSecurityGroupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'index.handler'
      Code:
        ZipFile: |
          import cfnresponse
          import boto3

          def handler(event, context):
              vpc_id = event['ResourceProperties']['VpcId']
              physical_id = "DeleteEmrDefaultSecurityGroupLambdaPhysicalID"
              response_data = {}
              if event['RequestType'] == 'Delete':
                  emr_sg_default = [
                      'ElasticMapReduce-Master-Private',
                      'ElasticMapReduce-ServiceAccess',
                      'ElasticMapReduce-Slave-Private'
                  ]
                  client = boto3.client('ec2')
                  try:
                      response = client.describe_security_groups(
                          Filters=[
                              {
                                  'Name': 'vpc-id',
                                  'Values': [
                                      vpc_id,
                                  ]
                              },
                              {
                                  'Name': 'group-name',
                                  'Values': emr_sg_default
                              },
                          ]
                      )
                      security_groups = response['SecurityGroups']
                      for item in security_groups:
                          print('{}:{}'.format(item['GroupName'], item['GroupId']))
                          empty_ingress_egress( item['GroupId'])

                      for item in security_groups:
                          client.delete_security_group(
                              GroupId=item['GroupId']
                          )
                  except Exception as e:
                      response_data['Message'] = 'Unexpected error. Exception: {}'.format(e)
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physical_id)
                  response_data['Message'] = 'Successfully Deleted {} EMR default Security Groups'.format(len(security_groups))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
              else:
                  response_data['Message'] = 'Nothing to do.'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)

          def empty_ingress_egress( group_id):
              ec2 = boto3.resource('ec2')
              sg = ec2.SecurityGroup(group_id)
              if len(sg.ip_permissions) > 0:
                  print('Empty ingress for SG: {}'.format(group_id))
                  sg.revoke_ingress(IpPermissions=sg.ip_permissions)
              if len(sg.ip_permissions_egress) > 0:
                  print('Empty egress for SG: {}'.format(group_id))
                  sg.revoke_egress(IpPermissions=sg.ip_permissions_egress)
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: 'python3.6'
      Timeout: '300'
      MemorySize: 256
  DeleteSecurityGroupCustomResource:
    Type: Custom::DeleteSecurityGroupCustomResource
    Properties:
      ServiceToken: !GetAtt 'DeleteSecurityGroupLambdaFunction.Arn'
      VpcId: !Ref VpcIdParameterKey
  MetastorRDSSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/MetastorRDS
      Type: String
      Value: !GetAtt
        - MetastorRDSSecurityGroup
        - GroupId
      Description: Security Group ID for Metastor RDS Group
  BdsqlEMRMasterSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/BdsqlEMRMasterSecurityGroup
      Type: String
      Value: !GetAtt
        - BdsqlEMRMasterSecurityGroup
        - GroupId
      Description: Security Group ID for BDSQL EMR Master Security Group
  BdsqlEMRServiceSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/BdsqlEMRService
      Type: String
      Value: !GetAtt
        - BdsqlEMRServiceSecurityGroup
        - GroupId
      Description: Security Group ID for BDSQL EMR Service Security Group
  BdsqlEMRSlaveSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/BdsqlEMRSlave
      Type: String
      Value: !GetAtt
        - BdsqlEMRSlaveSecurityGroup
        - GroupId
      Description: Security Group ID for BDSQL EMR Slave Security Group
  ElasticSearchSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/ElasticSearch
      Type: String
      Value: !GetAtt
        - ElasticSearchSecurityGroup
        - GroupId
      Description: Security Group ID for Elastic Search Group
  HerdRDSSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/HerdRDS
      Type: String
      Value: !GetAtt
        - HerdRDSSecurityGroup
        - GroupId
      Description: Security Group ID for Herd RDS Group
  HerdALBSecurityGroupParameterSSL:
    Type: 'AWS::SSM::Parameter'
    Condition: EnableSSLAndAuth
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/HerdALB
      Type: String
      Value: !GetAtt
        - HerdALBSecurityGroupSSL
        - GroupId
      Description: Security Group ID for Herd ALB Group
  HerdALBSecurityGroupParameterPlainTXT:
    Type: 'AWS::SSM::Parameter'
    Condition: DisableSSLAndAuth
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/HerdALB
      Type: String
      Value: !GetAtt
        - HerdALBSecurityGroupPlainTXT
        - GroupId
      Description: Security Group ID for Herd ALB Group
  BdsqlALBSecurityGroupParameterSSL:
    Type: 'AWS::SSM::Parameter'
    Condition: EnableSSLAndAuth
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/BdsqlALB
      Type: String
      Value: !GetAtt
        - BdsqlALBSecurityGroupSSL
        - GroupId
      Description: Security Group ID for Herd ALB Group
  BdsqlALBSecurityGroupParameterPlainTXT:
    Type: 'AWS::SSM::Parameter'
    Condition: DisableSSLAndAuth
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/BdsqlALB
      Type: String
      Value: !GetAtt
        - BdsqlALBSecurityGroupPlainTXT
        - GroupId
      Description: Security Group ID for Herd ALB Group
  HerdSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/Herd
      Type: String
      Value: !GetAtt
        - HerdSecurityGroup
        - GroupId
      Description: Security Group ID for Herd
  MetastorSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/Metastor
      Type: String
      Value: !GetAtt
        - MetastorSecurityGroup
        - GroupId
      Description: Security Group ID for metastor EC2 Group
  MetastorEMRSecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/MetastorEMR
      Type: String
      Value: !GetAtt
        - MetastorEMRSecurityGroup
        - GroupId
      Description: Security Group ID for metastor EMR Group
  NsAuthSyncUtilitySecurityGroupParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Join
        - ''
        - - /app/MDL/
          - !Ref MDLInstanceName
          - /
          - !Ref Environment
          - /SecurityGroup/NsAuthSyncUtility
      Type: String
      Value: !GetAtt
        - NsAuthSyncUtilitySecurityGroup
        - GroupId
      Description: Security Group ID for ns-auth-sync utility
