#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: MDL - Metastor - Server Installation Template
Parameters:
  HerdVersion:
    Description: Herd release version to use.
    Type: String
  MetastorVersion:
    Description: Metastor release version to use.
    Type: String
    Default: '1.1.0'
  ReleaseVersion:
    Description: Release version
    Type: String
    Default: current
  DomainNameSuffix:
    Description: Domain name suffix for MDL Domains
    Type: String
  MDLServerDeploymentRole:
    Description: 'Metastor Service Deployment role '
    Type: AWS::SSM::Parameter::Value<String>
  MetastorSecurityGroup:
    Description: 'Metastor ec2 Security Group '
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceProfile:
    Description: 'Metastor Instance Profile '
    Type: AWS::SSM::Parameter::Value<String>
  MetastorEMRSecurityGroup:
    Description: 'Metastor EMR Security Group '
    Type: AWS::SSM::Parameter::Value<String>
  MDLEMRServiceRole:
    Description: 'Metastor EMR Service role '
    Type: AWS::SSM::Parameter::Value<String>
  MDLStagingBucketName:
    Description: 'Metastor S3 Bucket '
    Type: AWS::SSM::Parameter::Value<String>
  LdapHostName:
    Description: LDAP Hostname for authentication
    Type: AWS::SSM::Parameter::Value<String>
  LdapBaseDN:
    Description: LDAP base dn for authentication
    Type: AWS::SSM::Parameter::Value<String>
  LdapMdlAppUsername:
    Description: open ldap app user for MDL
    Type: AWS::SSM::Parameter::Value<String>
  LdapMdlAppUserPasswordParameterKey:
    Description: LDAP app user password key (Secure String in SSM Parameter store)
    Type: String
  MetastorInstanceType:
    Description: Metastor Application EC2 instance type
    Type: String
    Default: m4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MetastorDBHostName:
    Description: The database host name
    Type: AWS::SSM::Parameter::Value<String>
  HerdLoadBalancerDNSName:
    Description: The DNS name of Herd web server
    Type: String
  HerdBucketName:
    Description: 'The bucket name of Herd '
    Type: AWS::SSM::Parameter::Value<String>
  ShepherdWebSiteBucketUrl:
    Description: S3 URL for Shepherd
    Type: AWS::SSM::Parameter::Value<String>
  ShepherdS3BucketName:
    Description: 'The bucket name of Shepherd '
    Type: AWS::SSM::Parameter::Value<String>
  CreateDemoObjects:
    Default: 'true'
    Description: Whether to configure Metastor with demo objects and data
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must specify true or false
    Type: String
  ImageId:
    Default: ami-1853ac65
    Description: AMI id for EC2 instances
    Type: String
  RefreshDatabase:
    Description: Refresh database or not
    Default: 'false'
    Type: String
  EnableSSLAndAuth:
    Default: 'true'
    Description: Whether to enable Authentication/SSL
    Type: String
  DeploymentBucketName:
    Description: Deployment bucket where the code resides
    Type: String
  KeypairName:
    Description: The name of the keypair in parameter store.
    Type: AWS::SSM::Parameter::Value<String>
  PrivateSubnetsParameterKey:
    Description: VPC Parameter key name in system store
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceName:
    Description: MDLInstanceName name
    Type: String
  Environment:
    Description: Application environment
    Type: String
  LogGroupName:
    Description: CloudWatch Log group name
    Type: String
Conditions:
  EnableSSLAndAuth: !Equals
    - !Ref EnableSSLAndAuth
    - 'true'
Resources:
  MetastorWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
    Properties: {}
  MetastorWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: MetastorScalingGroup
    Properties:
      Count: 1
      Handle: !Ref MetastorWaitHandle
      Timeout: '1200'
  MDLMetastorEc2Application:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-MetastorEc2'
  MetastorEc2DeployGroupASGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    DependsOn: MDLMetastorEc2Application
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-MetastorEc2'
      DeploymentGroupName: !Sub '${MDLInstanceName}-MetastorEc2DeployGroup'
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !Ref MDLServerDeploymentRole
      AutoScalingGroups:
        - !Ref MetastorScalingGroup
  MetastorScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 600
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref MetastorLaunchConfig
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier: !Split
        - ','
        - !Ref PrivateSubnetsParameterKey
      Tags:
        - Key: Name
          Value: !Sub 'AWSLX${MDLInstanceName}-Metastor-${Environment}'
          PropagateAtLaunch: 'true'
  MetastorLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install Metastor
      'AWS::CloudFormation::Init':
        configSets:
          PreInstallAndInstall:
            - PreInstall
            - Install
        PreInstall:
          commands:
            1-setup-codedeploy:
              command: !Join
                - ''
                - - |
                    function check_error {     return_code=${1};     cmd="$2";     if [ ${return_code} -ne 0 ];     then         echo "$(date "+%m/%d/%Y %H:%M:%S") *** ERROR *** ${cmd} has failed with error $return_code";         exit 1;     fi; }
                    function execute_cmd {         cmd="${1}";         retry="${2}";         echo $cmd;         eval $cmd;         returnCode=${PIPESTATUS[0]};         if [ ${returnCode} -ne 0 ] ; then             if [ ${retry} = "RETRY" ] ; then                 sleep 2m;                 eval $cmd;                 check_error ${PIPESTATUS[0]} "$cmd";             fi;         else             check_error ${returnCode} "$cmd";         fi;          }
                    configFile="/tmp/logs.props"
                    . ${configFile}
                    user=mdladmin
                    password=$(openssl rand -base64 32 | tr -d /=+ | cut -c -16)
                    execute_cmd "useradd -m -d /home/${user} ${user}"
                    echo ${user}:${password} | chpasswd
                    echo "${user} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    cd /home/${user}
                    execute_cmd "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install" "RETRY" 2>&1
                    execute_cmd "chmod +x ./install"
                    execute_cmd "./install auto" "RETRY" 2>&1
                    execute_cmd "sudo service codedeploy-agent status"
                    echo 'Code deploy setup complete, sleeping for 2 mins'
                    sleep 2m
                    execute_cmd "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py" "RETRY" 2>&1
                    execute_cmd "chmod +x ./awslogs-agent-setup.py"
                    execute_cmd "sudo python awslogs-agent-setup.py -n -r ${region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf"
                    execute_cmd "sudo service awslogs restart"
          files:
            /var/awslogs/etc/config/codedeploy_logs.conf:
              content: !Sub |
                [codedeploy-agent-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/aws/codedeploy-agent/codedeploy-agent.log
                log_stream_name = metastor/codedeploy/{instance_id}-codedeploy-agent-log
                log_group_name = ${LogGroupName}

                [codedeploy-updater-logs]
                file = /tmp/codedeploy-agent.update.log
                log_stream_name = metastor/codedeploy/{instance_id}-codedeploy-updater-log
                log_group_name = ${LogGroupName}

                [codedeploy-deployment-logs]
                file = /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
                log_stream_name = metastor/codedeploy/{instance_id}-codedeploy-deployments-log
                log_group_name = ${LogGroupName}
              mode: '000644'
              owner: root
              group: root
            /tmp/logs.props:
              content: !Sub |
                region=${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        Install:
          packages:
            yum:
              java-1.8.0-openjdk: []
              mysql: []
              dos2unix: []
          commands:
            1-remove-java7:
              command: yum remove -y java-1.7.0-openjdk
            2-deploy:
              command: !Join
                - ''
                - - |
                    chown -R mdladmin:mdladmin /home/mdladmin/deploy
                  - |
                  - 'aws deploy create-deployment  --application-name '
                  - !Sub '${MDLInstanceName}-MetastorEc2'
                  - ' --deployment-config-name CodeDeployDefault.OneAtATime'
                  - ' --deployment-group-name '
                  - !Sub '${MDLInstanceName}-MetastorEc2DeployGroup'
                  - '  --s3-location bucket='
                  - !Ref DeploymentBucketName
                  - ',bundleType=zip,key='
                  - !Ref ReleaseVersion
                  - '/metastorEc2/metastorEc2.zip '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

          files:
            /home/mdladmin/deploy/mdl/conf/deploy.props:
              content: !Join
                - ''
                - - waitHandleForMetastor="
                  - !Ref MetastorWaitHandle
                  - |-
                    "
                    httpProtocol=
                  - !If [EnableSSLAndAuth, https, http]
                  - |-

                    metastorHiveClusterKeyName=
                  - !Ref KeypairName
                  - |-

                    mdlInstanceName=
                  - !Ref MDLInstanceName
                  - |-

                    stackName=
                  - !Ref 'AWS::StackName'
                  - |-

                    region=
                  - !Ref 'AWS::Region'
                  - |-

                    metastorDBHost=
                  - !Ref MetastorDBHostName
                  - |-

                    metastorDBUser=metastor
                  - |-

                    metastoreDBInstance=
                  - !Sub '${MDLInstanceName}-${Environment}-Metastor'
                  - |-

                    environment=
                  - !Ref Environment
                  - |-

                    herdVersion=
                  - !Ref HerdVersion
                  - |-

                    metastorVersion=
                  - !Ref MetastorVersion
                  - |-

                    refreshDatabase=
                  - !Ref RefreshDatabase
                  - |-

                    enableSSLAndAuth=
                  - !Ref EnableSSLAndAuth
                  - |-

                    createDemoObjects=
                  - !Ref CreateDemoObjects
                  - |-

                    mdlStagingBucketName=
                  - !Ref MDLStagingBucketName
                  - |-

                    privateSubnets=
                  - !Ref PrivateSubnetsParameterKey
                  - |-

                    domainNameSuffix=
                  - !Ref DomainNameSuffix
                  - |-

                    mdlEMRServiceRole=
                  - !Ref MDLEMRServiceRole
                  - |-

                    mdlInstanceProfile=
                  - !Ref MDLInstanceProfile
                  - |-

                    metastorEMRSecurityGroup=
                  - !Ref MetastorEMRSecurityGroup
                  - |-

                    herdLoadBalancerDNSName=
                  - !Ref HerdLoadBalancerDNSName
                  - |-

                    herdS3BucketName=
                  - !Ref HerdBucketName
                  - |-

                    shepherdWebSiteBucketUrl=
                  - !Ref ShepherdWebSiteBucketUrl
                  - |-

                    shepherdS3BucketName=
                  - !Ref ShepherdS3BucketName
                  - |-

                    releaseVersion=
                  - !Ref ReleaseVersion
                  - |-

                    deploymentBucketName=
                  - !Ref DeploymentBucketName
                  - |-

                    ldapHostName=
                  - !Ref LdapHostName
                  - |-

                    ldapMdlAppUsername=
                  - !Ref LdapMdlAppUsername
                  - |-

                    ldapBaseDN=
                  - !Ref LdapBaseDN
                  - |-

                    ldapMdlAppUserPasswordParameterKey=
                  - !Ref LdapMdlAppUserPasswordParameterKey
                  - |-

                    deployLocation=/home/mdladmin/deploy/mdl
                  - |-

                    logGroupName=
                  - !Ref LogGroupName
                  - |+

              mode: '000400'
              owner: mdladmin
              group: mdladmin
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.MetastorLaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource MetastorLaunchConfig '
                  - '         --configsets PreInstallAndInstall '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      IamInstanceProfile: !Ref MDLInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref MetastorInstanceType
      KeyName: !Ref KeypairName
      SecurityGroups:
        - !Ref MetastorSecurityGroup
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            /opt/aws/bin/cfn-init -v  --stack ${AWS::StackName} --resource MetastorLaunchConfig --configsets PreInstallAndInstall --region ${AWS::Region}
