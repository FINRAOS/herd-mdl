#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: MDL - Elasticsearch Installation Template
Parameters:
  MDLServerDeploymentRole:
    Description: Elasticsearch Deployment Service Role Name
    Type: AWS::SSM::Parameter::Value<String>
  EsSecurityGroup:
    Description: Elasticsearch security group Name
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceProfile:
    Description: Elasticsearch Instance Profile Name
    Type: AWS::SSM::Parameter::Value<String>
  ReleaseVersion:
    Description: Release version
    Type: String
    Default: current
  DomainNameSuffix:
    Description: Domain name suffix for MDL Domains
    Type: String
  MDLStagingBucketName:
    Description: 'Metastor S3 Bucket '
    Type: AWS::SSM::Parameter::Value<String>
  DeploymentBucketName:
    Description: Deployment bucket where the code resides
    Type: String
  PrivateSubnetsParameterKey:
    Description: VPC Parameter key name in system store
    Type: AWS::SSM::Parameter::Value<String>
  ImageId:
    Default: ami-1853ac65
    Description: AMI id for EC2 instances
    Type: String
  EsInstanceType:
    Description: Elasticsearch EC2 node instance type
    Type: String
    Default: t2.medium
  KeypairName:
    Description: The name of the keypair in parameter store.
    Type: AWS::SSM::Parameter::Value<String>
  MDLInstanceName:
    Description: MDLInstanceName name
    Type: String
  Environment:
    Description: Application environment
    Type: String
  CertificateInfo:
    Description: Format - CN=<>,OU=<>,O=<>,L=<>,ST=<>,C=<>
    Type: String
  CertificateArn:
    Description: Certificate Arn for MDL
    Type: String
  EnableSSLAndAuth:
    Description: Whether to enable Authentication/SSL
    Type: String
  LogGroupName:
    Description: CloudWatch Log group name
    Type: String
  CloudWatchRetentionDays:
    Description: 'Retention days for CloudWatch logs'
    Type: Number
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Resources:
  MDLElasticsearch:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-Elasticsearch'
  DeployGroupASGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    DependsOn: MDLElasticsearch
    Properties:
      ApplicationName: !Sub '${MDLInstanceName}-Elasticsearch'
      DeploymentGroupName: !Sub '${MDLInstanceName}-ElasticsearchDeployGroup'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !Ref MDLServerDeploymentRole
      Ec2TagFilters:
        - Key: Name
          Value: !Sub 'AWSLX${MDLInstanceName}-Es-${Environment}'
          Type: KEY_AND_VALUE
  SslAcmArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/app/MDL/${MDLInstanceName}/${Environment}/ACM/Arn'
      Type: String
      Value: 'dummyInitialValue'
      Description: Self-signed Acm Certificate parameter
  EsEc2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Install Apache and Elasticsearch
      'AWS::CloudFormation::Init':
        configSets:
          PreInstallAndInstall:
            - PreInstall
            - Install
        PreInstall:
          commands:
            1-setup-codedeploy:
              command: !Join
                - ''
                - - |
                    function check_error {     return_code=${1};     cmd="$2";     if [ ${return_code} -ne 0 ];     then         echo "$(date "+%m/%d/%Y %H:%M:%S") *** ERROR *** ${cmd} has failed with error $return_code";         exit 1;     fi; }
                    function execute_cmd {         cmd="${1}";         retry="${2}";         echo $cmd;         eval $cmd;         returnCode=${PIPESTATUS[0]};         if [ ${returnCode} -ne 0 ] ; then             if [ ${retry} = "RETRY" ] ; then                 sleep 2m;                 eval $cmd;                 check_error ${PIPESTATUS[0]} "$cmd";             fi;         else             check_error ${returnCode} "$cmd";         fi;          }
                    configFile="/tmp/logs.props"
                    . ${configFile}
                    user=mdladmin
                    password=$(openssl rand -base64 32 | tr -d /=+ | cut -c -16)
                    execute_cmd "useradd -m -d /home/${user} ${user}"
                    echo ${user}:${password} | chpasswd
                    echo "${user} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    cd /home/${user}
                    execute_cmd "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install" "RETRY" 2>&1
                    execute_cmd "chmod +x ./install"
                    execute_cmd "./install auto" "RETRY" 2>&1
                    execute_cmd "sudo service codedeploy-agent status"
                    echo 'Code deploy setup complete, sleeping for 2 mins'
                    sleep 2m
                    execute_cmd "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py" "RETRY" 2>&1
                    execute_cmd "chmod +x ./awslogs-agent-setup.py"
                    execute_cmd "sudo python awslogs-agent-setup.py -n -r ${region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf"
                    execute_cmd "sudo service awslogs restart"
          files:
            /etc/yum.repos.d/elasticsearch.repo:
              content: !Join
                - |+

                - - '[elasticsearch-5.x]'
                  - name=Elasticsearch repository for 5.x packages
                  - 'baseurl=https://artifacts.elastic.co/packages/5.x/yum'
                  - gpgcheck=1
                  - 'gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch'
                  - enabled=1
                  - autorefresh=1
                  - |
                    type=rpm-md
              mode: '000644'
              owner: root
              group: root
            /var/awslogs/etc/config/codedeploy_logs.conf:
              content: !Sub |
                [codedeploy-agent-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/aws/codedeploy-agent/codedeploy-agent.log
                log_stream_name = elasticsearch/codedeploy/{instance_id}-codedeploy-agent-log
                log_group_name = ${LogGroupName}

                [codedeploy-updater-logs]
                file = /tmp/codedeploy-agent.update.log
                log_stream_name = elasticsearch/codedeploy/{instance_id}-codedeploy-updater-log
                log_group_name = ${LogGroupName}

                [codedeploy-deployment-logs]
                file = /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
                log_stream_name = elasticsearch/codedeploy/{instance_id}-codedeploy-deployments-log
                log_group_name = ${LogGroupName}
              mode: '000644'
              owner: root
              group: root
            /tmp/logs.props:
              content: !Sub |
                region=${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        Install:
          packages:
            yum:
              java-1.8.0-openjdk: []
              elasticsearch-5.1.1-1.noarch: []
          commands:
            1-remove-java7:
              command: yum remove -y java-1.7.0-openjdk
            2-deploy:
              command: !Join
                - ''
                - - |
                    chown -R mdladmin:mdladmin /home/mdladmin/deploy
                  - 'aws deploy create-deployment --application-name '
                  - !Sub '${MDLInstanceName}-Elasticsearch'
                  - ' --deployment-config-name CodeDeployDefault.OneAtATime'
                  - ' --deployment-group-name '
                  - !Sub '${MDLInstanceName}-ElasticsearchDeployGroup'
                  - ' --s3-location bucket='
                  - !Ref DeploymentBucketName
                  - ',bundleType=zip,key='
                  - !Ref ReleaseVersion
                  - '/elasticsearch/elasticsearch.zip '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

          files:
            /home/mdladmin/deploy/mdl/conf/deploy.props:
              content: !Join
                - ''
                - - waitHandleForEs="
                  - !Ref EsWaitHandle
                  - |-
                    "

                    mdlInstanceName=
                  - !Ref MDLInstanceName
                  - |-

                    mdlStagingBucketName=
                  - !Ref MDLStagingBucketName
                  - |-

                    environment=
                  - !Ref Environment
                  - |-

                    stackName=
                  - !Ref 'AWS::StackName'
                  - |-

                    region=
                  - !Ref 'AWS::Region'
                  - |-

                    certificateArn=
                  - !Ref CertificateArn
                  - |-

                    enableSSLAndAuth=
                  - !Ref EnableSSLAndAuth
                  - |-

                    certificateInfo=
                  - !Ref CertificateInfo
                  - |-

                    domainNameSuffix=
                  - !Ref DomainNameSuffix
                  - |-

                    deployLocation=/home/mdladmin/deploy/mdl
                  - |-

                    logGroupName=
                  - !Ref LogGroupName
                  - |-

                    cloudWatchRetentionDays=
                  - !Ref CloudWatchRetentionDays
                  - |+

              mode: '000400'
              owner: mdladmin
              group: mdladmin
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.EsEc2Instance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '  --stack '
                  - !Ref 'AWS::StackId'
                  - '  --resource EsEc2Instance '
                  - '  --configsets PreInstallAndInstall '
                  - '  --region     '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeypairName
      InstanceType: !Ref EsInstanceType
      SecurityGroupIds:
        - !Ref EsSecurityGroup
      SubnetId: !Select
        - '0'
        - !Split
          - ','
          - !Ref PrivateSubnetsParameterKey
      IamInstanceProfile: !Ref MDLInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub 'AWSLX${MDLInstanceName}-Es-${Environment}'
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - '/opt/aws/bin/cfn-init -v '
            - '  --stack '
            - !Ref 'AWS::StackName'
            - ' --resource EsEc2Instance '
            - ' --configsets PreInstallAndInstall '
            - ' --region '
            - !Ref 'AWS::Region'
            - |+
  EsWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  EsWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EsEc2Instance
    Properties:
      Handle: !Ref EsWaitHandle
      Timeout: '600'
Outputs:
  EsEc2DNS:
    Value: !GetAtt
      - EsEc2Instance
      - PrivateDnsName
    Description: Elasticsearch EC2 instance private DNS
  EsEc2Ip:
    Value: !GetAtt
      - EsEc2Instance
      - PrivateIp
    Description: Elasticsearch EC2 instance private IP address
