#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: MDL - Functional Test Deploy Host
Parameters:
  RollbackOnFailure:
    Default: 'true'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether rollback on app stack failure
  MDLInstanceName:
    Default: mdlt
    Description: instance name to be used for new mdl stack creation, using different mdlinstance name if mdlt is runing against existing mdl
    Type: String
  MDLStackName:
    Default: mdlt
    Description: existing mdl stack name or stack name to be used for new mdl stack creation(this name cannot be the same as current stack name)
    Type: String
  ReleaseVersion:
    Default: 1.1.0
    Description: 'Enter the MDL release to use - RC, DEV etc'
    Type: String
  EnableSSLAndAuth:
    Default: 'false'
    Description: Whether to enable HTTPS and SSL
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must specify true or false
    Type: String
  KeyName:
    Default: APP_MDL_PROD
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DeployComponents:
    Type: String
    Default: All
    AllowedValues: [All, Prereqs Only, Herd, Metastor, BDSQL]
    Description: Choose individual MDL components to deploy. Default is All, which will deploy all components
  ImageId:
    Default: ami-1853ac65
    Description: AMI id parameter key for EC2 instances
    Type: String
  InstanceType:
    Description: Test deploy host EC2 instance type
    Type: String
    Default: t2.medium
  MdltVpcIdParameterKey:
    Description: aws existing VPC Id
    Type: 'AWS::SSM::Parameter::Value<String>'
  MdltPrivateSubnetsParameter:
    Description: Existing private aws subnet id
    Type: 'AWS::SSM::Parameter::Value<String>'
  Environment:
    Description: Application environment
    Default: prod
    Type: String
  MdltResultS3BucketName:
     Description: S3 bucket name to save mdlt result
     Type: String
  CertificateArn:
    Description: Certificate Arn for MDL
    Type: String
  HostedZoneName:
    Description: Hosted Zone Name to create Route53 record set group for the given domain
    Type: String
  DomainNameSuffix:
    Description: Domain name suffix for MDL Domains
    Type: String
  MDLTWrapperInstanceName:
    Description: instance name for wrapper stack
    Type: String
  InstallMdlYmlUrl:
    Description: installMDL yaml file URL
    Type: String
  WaitOnVpcIfCreate:
    Description: wait on Vpc if createVPC=true
    Type: String
Resources:
  MdltBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub '${AWS::AccountId}-${MDLInstanceName}-mdlt-${Environment}'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: '*'
  EmptyS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'index.handler'
      Code:
        ZipFile: |
          import cfnresponse
          import boto3

          def handler(event, context):
              bucket_name = event['ResourceProperties']['MdltBucket']
              s3 = boto3.client('s3')
              physical_id = "EmptyS3BucketLambdaPhysicalID"
              response_data = {}
              if event['RequestType'] == 'Delete':
                  response_data['Message'] = 'Empty S3 bucket: {}'.format(bucket_name)

                  objects_to_delete = []

                  try:
                      for key in s3.list_objects_v2(Bucket=bucket_name, MaxKeys=1000)['Contents']:
                          objects_to_delete.append({
                              'Key': key['Key']
                          })

                      print('Deleting {} objects from staging bucket: {}'.format(len(objects_to_delete), bucket_name))
                      s3.delete_objects(
                          Bucket=bucket_name,
                          Delete={
                              'Objects': objects_to_delete
                          }
                      )
                      print('Deleted {} objects'.format(len(objects_to_delete)))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)

                  except Exception as e:
                      response_data['Message'] = 'Unexpected error. Exception: {}'.format(e)
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physical_id)
              else:
                  response_data['Message'] = 'Nothing to do.'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: 'python3.6'
      Timeout: '300'
      MemorySize: 2048
  EmptyS3CustomResource:
    Type: Custom::EmptyS3CustomResource
    Properties:
      ServiceToken: !GetAtt 'EmptyS3LambdaFunction.Arn'
      MdltBucket: !Ref MdltBucket
  DeployHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-DeployHostSecurityGroup'
      GroupDescription: Allow ssh & all outgoing traffic
      VpcId: !Ref MdltVpcIdParameterKey
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  DeployHostInstanceServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${MDLInstanceName}-DeployHostInstanceServiceRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
              - Effect: Allow
                NotAction:
                  - 'iam:*'
                  - 'organizations:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:DeleteServiceLinkedRole'
                  - 'iam:ListRoles'
                  - 'organizations:DescribeOrganization'
                Resource: '*'
  DeployHostInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${MDLInstanceName}-DeployHostInstanceProfile'
      Path: /
      Roles:
        - !Ref DeployHostInstanceServiceRole
  DeployHostEc2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Deploy mdl release and perform release validation
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              gettext: []
              java-1.8.0-openjdk: []
              gcc-c++: []
              make: []
          commands:
            1-setup:
              command: !Join
                - ''
                - - |
                    function check_error {     return_code=${1};     cmd="$2";     if [ ${return_code} -ne 0 ];     then         echo "$(date "+%m/%d/%Y %H:%M:%S") *** ERROR *** ${cmd} has failed with error $return_code";         exit 1;     fi; }
                    function execute_cmd {         cmd="${1}";         retry="${2}";         echo $cmd;         eval $cmd;         returnCode=${PIPESTATUS[0]};         if [ ${returnCode} -ne 0 ] ; then             if [ ${retry} = "RETRY" ] ; then                 sleep 2m;                 eval $cmd;                 check_error ${PIPESTATUS[0]} "$cmd";             fi;         else             check_error ${returnCode} "$cmd";         fi;          }
                    configFile="/tmp/logs.props"
                    . ${configFile}
                    execute_cmd "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py" "RETRY" 2&>1
                    execute_cmd "chmod +x ./awslogs-agent-setup.py"
                    execute_cmd "sudo python awslogs-agent-setup.py -n -r ${region} -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf"
                    execute_cmd "sudo service awslogs restart"
                    execute_cmd "yum remove -y java-1.7.0-openjdk"
                    execute_cmd "curl -sL https://rpm.nodesource.com/setup_0.10 | sudo -E bash -"
                    execute_cmd "yum install -y nodejs"
                    execute_cmd "pip install awscli --upgrade"
                    execute_cmd "aws configure set default.region ${region}"
                    execute_cmd "aws logs put-retention-policy --log-group-name ${logGroupName} --retention-in-days 90"
            2-run-mdlt:
              cwd: /home/ec2-user
              command: !Sub |
                #copy mdlt artifacts to ec2
                mkdir -p mdlt
                cd mdlt
                #copy from mdlt staging bucket
                aws s3 cp s3://${AWS::AccountId}-${MDLTWrapperInstanceName}-mdlt-staging-${Environment}/herd-mdlt-dist.zip mdlt.zip
                unzip mdlt.zip
                rm -f mdlt.zip
                find ./ -name "*.sh" -exec chmod +x {} \;
                cd ..
                ./mdlt/scripts/testRunner.sh /home/ec2-user/deployHost.props
          files:
            /var/awslogs/etc/config/codedeploy_logs.conf:
              content: !Sub |
                [mdl-setup-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file =  /var/log/mdl-setup.log
                log_stream_name = mdl/{instance_id}-setup-log
                log_group_name = ${AWS::StackName}

                [mdl-func-test-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file =  /var/log/mdl-func-test.log
                log_stream_name = mdl/{instance_id}-func-test-log
                log_group_name = ${AWS::StackName}

                [mdl-shutdown-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file =  /var/log/mdl-shutdown-test.log
                log_stream_name = mdl/{instance_id}-shutdown-test-log
                log_group_name = ${AWS::StackName}

                [mdl-junit-jupiter-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file =  /tmp/sam/TEST-junit-jupiter.xml
                log_stream_name = mdl/{instance_id}-junit-jupiter-log
                log_group_name = ${AWS::StackName}

                [mdl-cfn-init-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file =  /var/log/cfn-init.log
                log_stream_name = mdl/{instance_id}-cfn-init-log
                log_group_name = ${AWS::StackName}
              mode: '000644'
              owner: root
              group: root
            /tmp/logs.props:
              content: !Sub |
                region=${AWS::Region}
                logGroupName=${AWS::StackName}
                MDLTWrapperInstanceName=${MDLTWrapperInstanceName}
              mode: '000644'
              owner: root
              group: root
            /home/ec2-user/deployHost.props:
              content: !Join
                - ''
                - - MDLInstanceName=
                  - !Ref MDLInstanceName
                  - |+

                  - MDLTWrapperInstanceName=
                  - !Ref MDLTWrapperInstanceName
                  - |+

                  - MDLTStackName=
                  - !Ref 'AWS::StackName'
                  - |+

                  - MdltBucketName=
                  - !Ref MdltBucket
                  - |+

                  - MDLStackName=
                  - !Ref MDLStackName
                  - |+

                  - RegionName=
                  - !Ref 'AWS::Region'
                  - |+

                  - RollbackOnFailure=
                  - !Ref RollbackOnFailure
                  - |+

                  - DeployHostWaitHandle=
                  - !Join ['', ['"', !Ref DeployHostWaitHandle, '"']]
                  - |+

                  - ReleaseVersion=
                  - !Ref ReleaseVersion
                  - |+

                  - EnableSSLAndAuth=
                  - !Ref EnableSSLAndAuth
                  - |+

                  - DeployComponents=
                  - !Ref DeployComponents
                  - |+

                  - InstallMdlYmlUrl=
                  - !Ref InstallMdlYmlUrl
                  - |+

                  - Environment=
                  - !Ref Environment
                  - |+

                  - MdltResultS3BucketName=
                  - !Ref MdltResultS3BucketName
                  - |+

                  - DomainNameSuffix=
                  - !Ref DomainNameSuffix
                  - |+

                  - HostedZoneName=
                  - !Ref HostedZoneName
                  - |+

                  - CertificateArn=
                  - !Ref CertificateArn
                  - |+

                  - MdltResultS3BucketName=
                  - !Ref MdltResultS3BucketName
                  - |+

                  - KeyName=
                  - !Ref KeyName
                  - |+

            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.DeployHostEc2Instance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r DeployHostEc2Instance '
                  - ' --region     '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref DeployHostSecurityGroup
      SubnetId: !Select [0, !Split [',', !Ref MdltPrivateSubnetsParameter]]
      IamInstanceProfile: !Ref DeployHostInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${MDLInstanceName}-DeployHostEc2Node'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          #Deploy herd release and perform release validation
          opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployHostEc2Instance --region ${AWS::Region}
  DeployHostWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DeployHostWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DeployHostEc2Instance
    Properties:
      Handle: !Ref DeployHostWaitHandle
      Timeout: '14400'
Outputs:
  DeployHostDNS:
    Value: !GetAtt
      - DeployHostEc2Instance
      - PrivateDnsName
    Description: Deploy host private DNS
  DeployHostIp:
    Value: !GetAtt
      - DeployHostEc2Instance
      - PrivateIp
    Description: Deploy host private IP address
