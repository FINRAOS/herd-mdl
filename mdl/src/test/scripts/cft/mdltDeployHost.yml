#
# Copyright 2018 herd-mdl contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: 2010-09-09
Description: MDL - Functional Test Deploy Host
Parameters:
  RollbackOnFailure:
    Default: 'true'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether rollback on app stack failure
  MDLInstanceName:
    Default: mdlt
    Description: existing mdl stack associated instancename or instance name to be used for new mdl stack creation
    Type: String
  MDLStackName:
    Default: mdlt
    Description: existing mdl stack name or stack name to be used for new mdl stack creation(this name cannot be the same as current stack name)
    Type: String
  ReleaseVersion:
    Default: 1.1.0
    Description: 'Enter the MDL release to use - RC, DEV etc'
    Type: String
  InstallMdlYmlUrl:
    AllowedPattern : '.+'
  #TODO this value should come from mdlt.yml, remove this default value when commit
    Default: https://s3.amazonaws.com/herd-mdl-deploy-bucket/maggie/installMDL.yml
    Description: Url of the install mdl yml location
    Type: String
  EnableSSLAndAuth:
    Default: 'false'
    Description: Whether to enable HTTPS and SSL
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must specify true or false
    Type: String
  KeyName:
    Default: APP_MDL_PROD
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DeployComponents:
    Type: String
    Default: All
    AllowedValues: [All, Prereqs Only, Herd, Metastor, BDSQL]
    Description: Choose individual MDL components to deploy. Default is All, which will deploy all components
  ImageId:
    Default: ami-1853ac65
    Description: AMI id parameter key for EC2 instances
    Type: String
  InstanceType:
    Description: Test deploy host EC2 instance type
    Type: String
    Default: t2.medium
  VpcId:
    Description: aws existing VPC Id
    Type: 'AWS::EC2::VPC::Id'
  PublicSubnetId:
    Description: Existing aws subnet id
    Type: 'AWS::EC2::Subnet::Id'
  Environment:
    Description: Application environment
    Default: prod
    Type: String
  MdltResultS3BucketName:
     Description: S3 bucket name to save mdlt result
     Type: String
  CertificateArn:
    Description: Certificate Arn for MDL
    Type: String
  HostedZoneName:
    Description: Hosted Zone Name to create Route53 record set group for the given domain
    Type: String
  DomainNameSuffix:
    Description: Domain name suffix for MDL Domains
    Type: String
Resources:
  DeployHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${MDLInstanceName}-DeployHostSecurityGroup'
      GroupDescription: Allow ssh & all outgoing traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  DeployHostInstanceServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${MDLInstanceName}-DeployHostInstanceServiceRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
              - Effect: Allow
                NotAction:
                  - 'iam:*'
                  - 'organizations:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:DeleteServiceLinkedRole'
                  - 'iam:ListRoles'
                  - 'organizations:DescribeOrganization'
                Resource: '*'
  DeployHostInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${MDLInstanceName}-DeployHostInstanceProfile'
      Path: /
      Roles:
        - !Ref DeployHostInstanceServiceRole
  DeployHostEc2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Deploy mdl release and perform release validation
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              gettext: []
              java-1.8.0-openjdk: []
              gcc-c++: []
              make: []
          commands:
            1-setup:
              command: !Join
                - ''
                - - |
                    yum remove -y java-1.7.0-openjdk
                    curl -sL https://rpm.nodesource.com/setup_0.10 | sudo -E bash -
                    yum install -y nodejs
                    echo 'Now trying to install phantomjs and casperjs'
                    npm install -g phantomjs
                    npm install -g casperjs
                    pip install awscli --upgrade
            2-run-mdlt:
              cwd: /home/ec2-user
              command: !Sub |
                #copy mdlt artifacts to ec2
                mkdir -p mdlt
                cd mdlt
                #TODO this need to changed to github location
                wget https://s3.amazonaws.com/herd-mdl-deploy-bucket/maggie/herd-mdlt-1.2.0-dist.zip -O mdlt.zip
                unzip mdlt.zip
                rm -f mdlt.zip
                find ./ -name "*.sh" -exec chmod +x {} \;
                cd ..
                ./mdlt/scripts/testRunner.sh /home/ec2-user/deployHost.props

          files:
            /home/ec2-user/deployHost.props:
              content: !Join
                - ''
                - - MDLInstanceName=
                  - !Ref MDLInstanceName
                  - |+

                  - MdltBucketName=
                  - !Join ['-', [!Ref 'AWS::AccountId', !Ref MDLInstanceName, 'mdlt']]
                  - |+

                  - MDLStackName=
                  - !Ref MDLStackName
                  - |+

                  - RegionName=
                  - !Ref 'AWS::Region'
                  - |+

                  - RollbackOnFailure=
                  - !Ref RollbackOnFailure
                  - |+

                  - DeploymentBucketName=
                  - !Join ['-', [!Ref MDLInstanceName, 'mdl-staging-bucket']]
                  - |+

                  - DeployHostWaitHandle=
                  - !Ref DeployHostWaitHandle
                  - |+

                  - ReleaseVersion=
                  - !Ref ReleaseVersion
                  - |+

                  - EnableSSLAndAuth=
                  - !Ref EnableSSLAndAuth
                  - |+

                  - DeployComponents=
                  - !Ref DeployComponents
                  - |+

                  - InstallMdlYmlUrl=
                  - !Ref InstallMdlYmlUrl
                  - |+

                  - Environment=
                  - !Ref Environment
                  - |+

                  - MdltResultS3BucketName=
                  - !Ref MdltResultS3BucketName
                  - |+

                  - DomainNameSuffix=
                  - !Ref DomainNameSuffix
                  - |+

                  - HostedZoneName=
                  - !Ref HostedZoneName
                  - |+

                  - CertificateArn=
                  - !Ref CertificateArn
                  - |+

            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.DeployHostEc2Instance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r DeployHostEc2Instance '
                  - ' --region     '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DeployHostInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref DeployHostSecurityGroup
          SubnetId: !Ref PublicSubnetId
      Tags:
        - Key: Name
          Value: !Sub '${MDLInstanceName}-DeployHostEc2Node'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          #Deploy herd release and perform release validation
          opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployHostEc2Instance --region ${AWS::Region}
  DeployHostWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DeployHostWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DeployHostEc2Instance
    Properties:
      Handle: !Ref DeployHostWaitHandle
      Timeout: '10800'
Outputs:
  DeployHostDNS:
    Value: !GetAtt
      - DeployHostEc2Instance
      - PrivateDnsName
    Description: Deploy host private DNS
  DeployHostIp:
    Value: !GetAtt
      - DeployHostEc2Instance
      - PrivateIp
    Description: Deploy host private IP address
