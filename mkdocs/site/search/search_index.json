{
    "docs": [
        {
            "location": "/",
            "text": "What is Herd-MDL?\n\u00b6\n\n\nHerd-MDL is a managed data lake in the cloud. The product helps manage data with the Herd metadata catalog, explore data with Herd-UI, and access data with the BDSQL Interactive Query tool. All this data is stored in cost-efficient, highly elastic cloud storage and is accessible from a wide variety of compute platforms.\n\n\nWhat can I do with Herd-MDL?\n\u00b6\n\n\nHerd-MDL enables organizations to store, manage, process, and analyze massive amounts of data in the cloud. The initial use cases supported are:\n\n\nSearch and Discover\n\nEnd users use Herd-UI to locate and understand data in your data lake. Full-text search of all descriptive metadata ensures that users can quickly find data of interest for their analytical needs.\n\n\nInteractive Query\n\nSQL-based access to all data in the Herd catalog. A simple JDBC endpoint backed by a powerful Presto query cluster queries across petabytes of data and trillions of rows in seconds. And a native Hive Metastore interface is available for downstream access by tools in the Hadoop ecosystem, Spark, or other tools like AWS Athena\n\n\nIngest and Catalog\n\nIngest data into Herd-MDL with proven high-volume loader utility or with API-based integration. Register data with the Herd catalog to enable search/discovery and interactive query capabilities.\n\n\nIntegrate\n\nHerd and Herd-MDL are API-first products. Teams at FINRA have integrated custom data intake apps, ETL frameworks, EMR-based batch analytcis, and data science tools including a native Spark library that reads directly from the Herd catalog.\n\n\nHow does Herd-MDL work?\n\u00b6\n\n\nThis diagram illustrates how the technical components of Herd-MDL fulfull the use cases. For more information, see \nTechnical Overview",
            "title": "What is Herd-MDL?"
        },
        {
            "location": "/#what-is-herd-mdl",
            "text": "Herd-MDL is a managed data lake in the cloud. The product helps manage data with the Herd metadata catalog, explore data with Herd-UI, and access data with the BDSQL Interactive Query tool. All this data is stored in cost-efficient, highly elastic cloud storage and is accessible from a wide variety of compute platforms.",
            "title": "What is Herd-MDL?"
        },
        {
            "location": "/#what-can-i-do-with-herd-mdl",
            "text": "Herd-MDL enables organizations to store, manage, process, and analyze massive amounts of data in the cloud. The initial use cases supported are:  Search and Discover \nEnd users use Herd-UI to locate and understand data in your data lake. Full-text search of all descriptive metadata ensures that users can quickly find data of interest for their analytical needs.  Interactive Query \nSQL-based access to all data in the Herd catalog. A simple JDBC endpoint backed by a powerful Presto query cluster queries across petabytes of data and trillions of rows in seconds. And a native Hive Metastore interface is available for downstream access by tools in the Hadoop ecosystem, Spark, or other tools like AWS Athena  Ingest and Catalog \nIngest data into Herd-MDL with proven high-volume loader utility or with API-based integration. Register data with the Herd catalog to enable search/discovery and interactive query capabilities.  Integrate \nHerd and Herd-MDL are API-first products. Teams at FINRA have integrated custom data intake apps, ETL frameworks, EMR-based batch analytcis, and data science tools including a native Spark library that reads directly from the Herd catalog.",
            "title": "What can I do with Herd-MDL?"
        },
        {
            "location": "/#how-does-herd-mdl-work",
            "text": "This diagram illustrates how the technical components of Herd-MDL fulfull the use cases. For more information, see  Technical Overview",
            "title": "How does Herd-MDL work?"
        },
        {
            "location": "/basic-install/",
            "text": "Herd-MDL Basic Install\n\u00b6\n\n\nThe Basic Install is an easy, turnkey installation of Herd-MDL. This install is fully automated. It uses CloudFormation templates to create AWS resources then deploys Herd-MDL product, \nintegrates the components, and creates sample data.\n\n\nSee \nAdvanced Install\n for other options. For example if your organization requires that certain AWS resources such as IAM Roles, \nSecurity Groups, etc. are created outside Herd-MDL automated install. The Advanced Install allows for optional creation of AWS resources through other \nmechanisms and provides detailed specifications on what to create and how to provide references to Herd-MDL automated install.\n\n\nPrerequisites\n\u00b6\n\n\nThese are prerequisites that are necessary for installing MDL components for Basic Installation Type\n\n\n\n\nAn \nAWS\n account \n\n\nUser who has power user access as per this policy - \narn:aws:iam::aws:policy/PowerUserAccess\n\n\nMDL deployment creates various AWS resources like Cloudformation, EC2, IAM, Security Groups, S3 etc, and power user access is needed for creating these resources\n\n\nSample IAM policy for \nPowerUserAccess\n\n\n\n\n\n\n\n\nSteps\n\u00b6\n\n\nInstallation is automated through CloudFormation templates in AWS. The stack creates all the resources required by MDL application. This takes a couple of hours to create all the resources needed for MDL. A stack can be created using AWS console, or AWS CLI, or AWS SDK. Refer \nAWS documentation\n for creating stacks using Cloudformation templates. In this section, steps are described for creating the stack using AWS console.\n\n\n\n\nDownload release artefact: \ninstallMDL.yml\n to your local file system, this will install version \n1.4.0\n.\n\n\nLogin to AWS console and navigate to the \nCloudformation\n service.\n\n\nCreate a new stack using the option: \"Upload a template to Amazon S3\" - Refer to \nAWS documentation\n on how to select a local template.\n\n\nSelect the same \ninstallMDL.yml\n file from your local file system (which was downloaded in step 1).\n\n\n\n\nOn the next page\n\n\n\n\n\n\nEnter a unique value for the 'stack name' parameter. \n\n\n\n\nNote: A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters. Further reading: \nSpecifying Stack Name and Parameters\n\n\n\n\n\n\n\n\nLeave all other parameters to their default values and click 'Next'.\n\n\n\n\n\n\n\n\n\n\nOn the next page, specify any additional stack options, viz., tags, termination protection etc. for your stack and click 'Next'. Further reading on tags: \nAWS documentation\n\n\n\n\nReview the information on the next page and click on the 'Create' button, this will initiate stack creation.\n\n\nWait for 'CREATE_COMPLETE' on the stack and all its nested stacks.\n\n\nProceed to the \nUser Guide\n to explore Herd-MDL.",
            "title": "Basic Install"
        },
        {
            "location": "/basic-install/#herd-mdl-basic-install",
            "text": "The Basic Install is an easy, turnkey installation of Herd-MDL. This install is fully automated. It uses CloudFormation templates to create AWS resources then deploys Herd-MDL product, \nintegrates the components, and creates sample data.  See  Advanced Install  for other options. For example if your organization requires that certain AWS resources such as IAM Roles, \nSecurity Groups, etc. are created outside Herd-MDL automated install. The Advanced Install allows for optional creation of AWS resources through other \nmechanisms and provides detailed specifications on what to create and how to provide references to Herd-MDL automated install.",
            "title": "Herd-MDL Basic Install"
        },
        {
            "location": "/basic-install/#prerequisites",
            "text": "These are prerequisites that are necessary for installing MDL components for Basic Installation Type   An  AWS  account   User who has power user access as per this policy -  arn:aws:iam::aws:policy/PowerUserAccess  MDL deployment creates various AWS resources like Cloudformation, EC2, IAM, Security Groups, S3 etc, and power user access is needed for creating these resources  Sample IAM policy for  PowerUserAccess",
            "title": "Prerequisites"
        },
        {
            "location": "/basic-install/#steps",
            "text": "Installation is automated through CloudFormation templates in AWS. The stack creates all the resources required by MDL application. This takes a couple of hours to create all the resources needed for MDL. A stack can be created using AWS console, or AWS CLI, or AWS SDK. Refer  AWS documentation  for creating stacks using Cloudformation templates. In this section, steps are described for creating the stack using AWS console.   Download release artefact:  installMDL.yml  to your local file system, this will install version  1.4.0 .  Login to AWS console and navigate to the  Cloudformation  service.  Create a new stack using the option: \"Upload a template to Amazon S3\" - Refer to  AWS documentation  on how to select a local template.  Select the same  installMDL.yml  file from your local file system (which was downloaded in step 1).   On the next page    Enter a unique value for the 'stack name' parameter.    Note: A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters. Further reading:  Specifying Stack Name and Parameters     Leave all other parameters to their default values and click 'Next'.      On the next page, specify any additional stack options, viz., tags, termination protection etc. for your stack and click 'Next'. Further reading on tags:  AWS documentation   Review the information on the next page and click on the 'Create' button, this will initiate stack creation.  Wait for 'CREATE_COMPLETE' on the stack and all its nested stacks.  Proceed to the  User Guide  to explore Herd-MDL.",
            "title": "Steps"
        },
        {
            "location": "/user-guide/",
            "text": "Herd-MDL User Guide\n\u00b6\n\n\nOverview\n\u00b6\n\n\nLet's get to know Herd-MDL by exploring these features:\n\n\n\n\nSearch and Discovery - use Herd-UI to view the demo objects that are created during Herd installation \u2013 this is how end users will locate and understand data in Herd-MDL\n\n\nInteractive Query - connect to Big Data SQL (BDSQL) JDBC endpoint to query the data as it sits in S3 - this is how end users will access the data\n\n\nIngestion - explore two ways to ingest data into the Herd MDL - the Uploader tool and direct S3 upload with API registration\n\n\nIntegration - call some Herd REST endpoints that are used by Herd-UI and discuss various other integrations using the REST APIs.\n\n\n\n\nSearch and Discovery in Herd-UI\n\u00b6\n\n\nPurpose - search and browse in Herd-UI and view the detailed business and technical metadata that is stored in the Herd catalog.\n\n\nTerminology\n\n\n\n\nData Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.\n\n\nData Object (also known as a Business Object Data in Herd APIs) - represents actual data in some storage location. Includes information about physical location, partitions, and storage platform.\n\n\nCategory (also known as Tag in Herd APIs) - represents a business concept that is used to group and describe Data Entities, e.g. Market Data\n\n\n\n\nActivities\n\u00b6\n\n\nPre-requisites - Herd-MDL is installed and validated; User has browser and network access to Herd-UI URL.\n\n\nBrowse the catalog\n\n\n\n\nLocate the Herd-UI URL in output of Herd-MDL wrapper stack and enter that URL into a web browser\n\n\nBrowse by clicking 'SEC' on the Herd-UI home page.\n\n\nOnly a single category (SEC) is created in the demo install.\n\n\nHerd administrators and/or data publishers can define more categories and tag Data Entities with categories to build a browse-able taxonomy.\n\n\nThe Category page has a description of the category and a list of Data Entities that have been tagged with this category\n\n\nThe list shows a short description of each Data Entity along with its display name and physical name.\n\n\nUsers can filter the list of Data Entities by clicking on checkboxes to the left. This list includes all categories of all Data Entities in the list.\n\n\n\n\nSearch the catalog\n\n\n\n\nOn the Home page, enter a term (such as 'Price') in the search box and press the search button (magnifying glass icon).\n\n\nThe Search Results page shows a list of all Data Entities and Categories that contain that term\n\n\nThe term matches are visible with hit highlighting in the 'Found In' section of each search result. This shows how the term matched in the name, description, column name or description, etc in the Data Entity\n\n\nUsers can filter the list of Data Entities by clicking on checkboxes to the left. This list includes all categories of all Data Entities in the search results.\n\n\nClick on a Data Entity name (like 'Security Test Object') to view more details about that Data Entity\n\n\n\n\nLearn about a Data Entity\n\n\n\n\nThe Data Entity page for each object has a description, a list of categories it's been tagged with, and a list of contacts that are experts on this data.\n\n\nThe 'Columns' tab lists all columns in the data entity (if it's columnar data) along with description for each column and its datatype\n\n\nView Data Objects registered for this Data Entity by clicking 'Data Object List'\n\n\n\n\nView Data Objects\n\n\n\n\nThe Data Object List page shows all the Data Objects that have been registered for this Data Entity along with their partition values and information about their format\n\n\nClick on the 'View Data Object' link for any of the Data Objects to see more details\n\n\nThe Data Object Detail page shows all details about a data object including its partition values, audit information such as when it was registered, and its storage type and physical location\n\n\n\n\nMore information\n\n\n\n\nData publishers and/or Herd administrators can manage all the descriptive information and tagging via on-screen editing or via APIs as described in \nPopulating Business Metadata\n on the Herd GitHub wiki\n\n\nMore details about each page/screen in Herd-UI are available in the \nHerd-UI User Guide\n in the Herd-UI GitHub wiki\n\n\n\n\nTake-away\n\u00b6\n\n\nHerd-UI is a powerful search and discovery tool that allows end users to rapidly locate and understand data across the breadth of a massive data lake.\n\n\nInteractive Query with BDSQL\n\u00b6\n\n\nPurpose - explore data anywhere in the data lake using Big Data SQL (BDSQL), a Presto query cluster that can access all data registered in the Herd catalog\n\n\nTerminology\n\n\n\n\nData Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.\n\n\n\n\nActivities\n\u00b6\n\n\nPre-requisites - Herd-MDL is installed and validated; User has SQL client with presto-jdbc-0.190 driver and network access to the BDSQL JDBC endpoint\n\n\nThis section will use the 'Security Test Object'. The Data Entity page for 'Security Test Object' is \n/data-entities/SEC_MARKET_DATA/SecurityData\n\n\nQuery data\n\n\n\n\nLocate the BDSQL JDBC connection string in the output of the Herd-MDL wrapper stack and create a JDBC connection with a SQL client.\n\n\nFor demo installs without authentication, the user is 'hadoop' and the password is left blank.\n\n\nIt's easy to query data from any Data Entity in the data lake. Simply locate some basic technical metadata on the Data Entity page of the Herd-UI\n\n\nThe technical metadata required is: Namespace, Physical Name, Usage, and File Type. For example for the 'Security Test Object', these values are: Namespace=SEC_MARKET_DATA, Physical Name=SecurityData, Usage=MDL, and File Type=TXT\n\n\nQuery the data in the SQL client \u2013 the schema and logical table name for JDBC query are made up of Namespace.PhysicalName_Usage_FileType,\n\n\nSo to query 'Security Test Object', enter \n'select * from sec\\_market\\_data.securitydata\\_mdl\\_txt'.\n\n\nThe SQL client will display the results. Use partitions in the where clause to optimize performance.\n\n\n\n\nMore information\n\n\n\n\nMore details about how physical metadata in Herd is used to enable BDSQL is available in the \nTechnical Overview\n\n\nThe instance type and node count of the BDSQL Presto cluster can be tuned for performance\n\n\n\n\nTake-aways\n\u00b6\n\n\nUsers can query anything in the data lake in seconds. The example above has one object \u2013 but Herd-MDL achieves interactive query performance even if you have thousands of Data entities, millions of Data Objects and partitions, and cases where each Data Object has tens of billions of rows that make up a Data Entity with trillions of rows.\n\n\nBDSQL exposes all the data in your data lake to any user who can perform SQL queries. It looks like one gigantic database accessible to anyone with a SQL client \u2013 but it's actually based on more scalable and cost-effective technology than even the most expensive proprietary big data appliances.\n\n\nIngesting data into Herd-MDL\n\u00b6\n\n\nPurpose - provide an overview and simplified example of how to register data in Herd\n\n\nTerminology\n\n\n\n\nData Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.\n\n\nData Object (also known as a Business Object Data in Herd APIs) - represents actual data in some storage location. Includes information about physical location, partitions, and storage platform.\n\n\n\n\nActivities\n\u00b6\n\n\nPre-requisites\n\n\n\n\nHerd-MDL is installed and validated; User has machine with access to S3 endpoints to upload the data and Herd endpoints to register the data\n\n\nDownload \nherd_reg_demo.zip\n and unzip in a directory\n\n\nInstall Postman REST client\n\n\nObtain the Herd Uploader jar - use the link for \"HerdUploaderJarURL\" in the output of your Herd-MDL CloudFormation stack\n\n\n\n\nPerform one-time steps to register a new object (Business Object Definition with Format) in the Herd metadata catalog\n\n\n\n\nImport all 3 json files from herd_reg_demo/register_one_time into Postman. These files contain import the following:\n\n\nCollection called 'MDL Demo' that contains all requests that we will execute in sequence to perform the registration.\n\n\nPostman Environment called 'MDL Demo' that contains the Herd hostname. This is referenced\nfrom each request in the collection. To edit, click the gear icon in the upper-right that says 'Manage Environment'. Then click on 'MDL Demo' from the list to view the variable. Replace the domain value with the domain from the 'HerdURL' entry in the output of your Herd-MDL CloudFormation stack.\n\n\nPostman Global Variables for Namespace and BO Definition Name. These are referenced from request and can be changed to\nrun this demo multiple times without colliding with previously created objects.\n\n\n\n\n\n\nSelect 'MDL Demo' environment from the environment drop-down in the upper-right hand corner of Postman.\n\n\nTo test connectivity, run the 'Current User' request in the collection. For demo installations without authentication should receive results for TRUSTED_USER. \n\n\nNow, run the following requests in sequence to register a new object in the catalog:\n\n\nCreate Namespace - creates a new Namespace for your object. The value of the Namespace comes from the Postman Global\nVariable you imported which by default is 'reg_demo'\n\n\nCreate BO Definition - creates a new Business Object Definition for your object. The value of the BO Definition Name comes\nfrom the Postman Global Variable you imported which by default is 'demo_data'\n\n\nCreate BO Format - creates a Format for your object. The Format is simple - it has only two columns and is partitioned by\n'Transaction Date'\n\n\nDescriptive PUT - adds a friendly display name and definition\n\n\nRegister for Metastore-BDSQL - this registers the new object for inclusion in the Metastore used by the BDSQL interative query\ncluster.\n\n\n\n\n\n\nGo to Herd UI and search for 'demo_data' (or whatever you might have named your BO Definition). You will see a result for the object\nyou just created. Click to see the Data Entity page for your object.\n\n\nDrill down using the 'Data Object List' link and you will see that there are not yet any BData partitions registered\n\n\n\n\nRegister a new partition (Business Object Data) in the Herd metadata catalog. This step is generally performed in an ongoing fashion with new\npartitions/BData as they arrive.\n\n\n\n\nGet to a command line and navigate to the herd_reg_demo/register_bdata_ongoing directory\n\n\nOpen command.bat and replace the hostname value in the '-H' argument with the he domain from the 'HerdURL' entry in the output of your Herd-MDL CloudFormation stack\n\n\nPlace the Herd Uploader jar in the herd_reg_demo/register_bdata_ongoing directory\n\n\nRun command.bat - it performs the following:\n\n\ncommand.bat triggers the Herd uploader tool with command line arguments referring to the Herd API host, the data file\nassociated with this BData, and a manifest file that contains metadata about this BData\n\n\ncommand.bat also contains additional command line arguments as documented in Uploader Users Guide\n\n\nNote that you can configure a proxy if needed to access Herd and/or S3 using arguments documented in the Users Guide\n\n\n\n\n\n\nUploader tool performs the following:\n\n\nRead manifest file and confirm it references a valid BO Definition, Format, and Partition value for the BData being updated\n\n\nNOTE \u2013 unlike the Postman Collection that has variables for Namespace and BO Definition Name, the manifest.json has these\nvalues hard-coded. If you've changed either of those variables when registering with Postman, you must alter these values in the manifest.\njson as well.\n\n\nCall Herd API to pre-register the partition based on metadata from the manifest file and obtain S3 location for data upload\n\n\nCall Herd API to get temporary credentials to upload data file to S3. This step requires the user has WRITE permissions to the\nNamespace\n\n\nUpload the file to S3 using the temporary credentials\n\n\nCall Herd API to confirm the data is in place and mark the new BData Partition VALID. This designates it is ready for consumers\nto access the data.\n\n\n\n\n\n\nReturn to Herd UI and refresh the Data Object List page. The newly-registered BData will now appear. Drill down to see details such as\nS3 location, audit information.\n\n\nAfter a delay (30-minutes if Metastore cluster is idle, <10 minutes if Metastore cluster was running), the new data will be available to\nselect in BDSQL interactive query\n\n\n\n\nMore information\n\n\n\n\nLearn more about the Herd catalog in the \nHerd Wiki\n and about Herd REST APIs by browsing the \nHerd Swagger API documentation\n\n\n\n\nTake-aways\n\u00b6\n\n\nThere is a learning curve but after that, registering data is fairly straightforward. The registration process at FINRA is highly automated.\nSome use cases automate use of the Uploader tool. Other use cases perform some variation of the steps the the Uploader tool performs\nbut they all ultimately place data in S3 and call Herd APIs to register the data. Other use cases include:  integration between Herd and FINRA's ETL framework; integrations with custom apps of different varieties\n\n\nThis example shows registration of columnar data consumed through BDSQL but a similar approach is used to register document-based\ndata for consumption by other tools.\n\n\nThe Uploader tool is a quick, easy way to ingest Data Objects into the Herd-MDL. This tool has been used extensively at FINRA. Many teams script the generation of manifest files and the uploader CLI. Petabytes of data have been uploaded using this tool.\n\n\nHow to find MDL User Credentials to login to Herd/Shepherd/Bdsql\n\u00b6\n\n\nThis section describes how to locate credentials required for endpoints when you have installed with EnableSSLAndAuth=true.\n\n\n\n\nNote: A detailed description and a list of all default users and auth groups created for your stack can be found in the \nmanage OpenLdap section\n\n\n\n\nPrerequisites\n\n\n\n\nAWS Console Access of the AWS Account, where MDL is created\n\n\nMDL Instance Name of the MDL stack\n\n\nThis is the parameter to the MDL Cloudformation Stack\n\n\n\n\n\n\nEnableSSLAndAuth must be set to true while creating the stack\n\n\n\n\nSteps\n\n\n\n\nLogin to AWS Console and navigate to SSM Parameter section (Refer \nAWS Documentation\n)\n\n\nUser Name\n\n\nFind the parameter: /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername on the console\n\n\nExample :  \n/app/MDL/mdlstack/dev/LDAP/User/HerdAdminUsername\n\n\n\n\n\n\nGet the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd\n\n\nExample: \nherd_admin_user\n\n\n\n\n\n\n\n\n\n\nPassword  \n\n\nFind the parameter: /app/MDL/${MDLInstanceName}/${Environment}/Password/HerdAdminPassword on the console\n\n\nExample :  \n/app/MDL/mdlstack/dev/LDAP/Password/HerdAdminPassword\n\n\n\n\n\n\nGet the Value for the above parameter, it is a 12-letter AlphaNumeric String which specifies the password for Herd/Bdsql/Shepherd, and it is a Secure String\n\n\nExample: \nODMyOTdmZmE5\n\n\n\n\n\n\n\n\n\n\nUse the above User name, and Password to login to Herd/Shepherd/Bdsql  \n\n\n\n\nHerd-MDL additional use cases\n\u00b6\n\n\n\n\nScale!\n\n\nHerd-MDL is proven at scale. FINRA uses the Herd catalog, Herd-UI, and BDSQL for interactive query in a data lake with multiple petabytes. It's all the same technology as presented in this User Guide -- just at a much larger scale\n\n\n\n\n\n\nIntegrations\n\n\nTeams at FINRA have integrated with Herd-MDL to fulfill various data processing and analytics requirements. Contact us through GitHub for questions or a demonstration.\n\n\nIngest / Processing\n\n\nDocument-based use case - custom apps for data intake from end users\n\n\nBatch-processing use case - ETL framework that registers data and establishes lineage\n\n\n\n\n\n\nAnalytics\n\n\nBig Data BI tools - either custom or COTS like Tableau or Pentaho\n\n\nData Science tool including native Spark library for Herd",
            "title": "User Guide"
        },
        {
            "location": "/user-guide/#herd-mdl-user-guide",
            "text": "",
            "title": "Herd-MDL User Guide"
        },
        {
            "location": "/user-guide/#overview",
            "text": "Let's get to know Herd-MDL by exploring these features:   Search and Discovery - use Herd-UI to view the demo objects that are created during Herd installation \u2013 this is how end users will locate and understand data in Herd-MDL  Interactive Query - connect to Big Data SQL (BDSQL) JDBC endpoint to query the data as it sits in S3 - this is how end users will access the data  Ingestion - explore two ways to ingest data into the Herd MDL - the Uploader tool and direct S3 upload with API registration  Integration - call some Herd REST endpoints that are used by Herd-UI and discuss various other integrations using the REST APIs.",
            "title": "Overview"
        },
        {
            "location": "/user-guide/#search-and-discovery-in-herd-ui",
            "text": "Purpose - search and browse in Herd-UI and view the detailed business and technical metadata that is stored in the Herd catalog.  Terminology   Data Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.  Data Object (also known as a Business Object Data in Herd APIs) - represents actual data in some storage location. Includes information about physical location, partitions, and storage platform.  Category (also known as Tag in Herd APIs) - represents a business concept that is used to group and describe Data Entities, e.g. Market Data",
            "title": "Search and Discovery in Herd-UI"
        },
        {
            "location": "/user-guide/#activities",
            "text": "Pre-requisites - Herd-MDL is installed and validated; User has browser and network access to Herd-UI URL.  Browse the catalog   Locate the Herd-UI URL in output of Herd-MDL wrapper stack and enter that URL into a web browser  Browse by clicking 'SEC' on the Herd-UI home page.  Only a single category (SEC) is created in the demo install.  Herd administrators and/or data publishers can define more categories and tag Data Entities with categories to build a browse-able taxonomy.  The Category page has a description of the category and a list of Data Entities that have been tagged with this category  The list shows a short description of each Data Entity along with its display name and physical name.  Users can filter the list of Data Entities by clicking on checkboxes to the left. This list includes all categories of all Data Entities in the list.   Search the catalog   On the Home page, enter a term (such as 'Price') in the search box and press the search button (magnifying glass icon).  The Search Results page shows a list of all Data Entities and Categories that contain that term  The term matches are visible with hit highlighting in the 'Found In' section of each search result. This shows how the term matched in the name, description, column name or description, etc in the Data Entity  Users can filter the list of Data Entities by clicking on checkboxes to the left. This list includes all categories of all Data Entities in the search results.  Click on a Data Entity name (like 'Security Test Object') to view more details about that Data Entity   Learn about a Data Entity   The Data Entity page for each object has a description, a list of categories it's been tagged with, and a list of contacts that are experts on this data.  The 'Columns' tab lists all columns in the data entity (if it's columnar data) along with description for each column and its datatype  View Data Objects registered for this Data Entity by clicking 'Data Object List'   View Data Objects   The Data Object List page shows all the Data Objects that have been registered for this Data Entity along with their partition values and information about their format  Click on the 'View Data Object' link for any of the Data Objects to see more details  The Data Object Detail page shows all details about a data object including its partition values, audit information such as when it was registered, and its storage type and physical location   More information   Data publishers and/or Herd administrators can manage all the descriptive information and tagging via on-screen editing or via APIs as described in  Populating Business Metadata  on the Herd GitHub wiki  More details about each page/screen in Herd-UI are available in the  Herd-UI User Guide  in the Herd-UI GitHub wiki",
            "title": "Activities"
        },
        {
            "location": "/user-guide/#take-away",
            "text": "Herd-UI is a powerful search and discovery tool that allows end users to rapidly locate and understand data across the breadth of a massive data lake.",
            "title": "Take-away"
        },
        {
            "location": "/user-guide/#interactive-query-with-bdsql",
            "text": "Purpose - explore data anywhere in the data lake using Big Data SQL (BDSQL), a Presto query cluster that can access all data registered in the Herd catalog  Terminology   Data Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.",
            "title": "Interactive Query with BDSQL"
        },
        {
            "location": "/user-guide/#activities_1",
            "text": "Pre-requisites - Herd-MDL is installed and validated; User has SQL client with presto-jdbc-0.190 driver and network access to the BDSQL JDBC endpoint  This section will use the 'Security Test Object'. The Data Entity page for 'Security Test Object' is  /data-entities/SEC_MARKET_DATA/SecurityData  Query data   Locate the BDSQL JDBC connection string in the output of the Herd-MDL wrapper stack and create a JDBC connection with a SQL client.  For demo installs without authentication, the user is 'hadoop' and the password is left blank.  It's easy to query data from any Data Entity in the data lake. Simply locate some basic technical metadata on the Data Entity page of the Herd-UI  The technical metadata required is: Namespace, Physical Name, Usage, and File Type. For example for the 'Security Test Object', these values are: Namespace=SEC_MARKET_DATA, Physical Name=SecurityData, Usage=MDL, and File Type=TXT  Query the data in the SQL client \u2013 the schema and logical table name for JDBC query are made up of Namespace.PhysicalName_Usage_FileType,  So to query 'Security Test Object', enter  'select * from sec\\_market\\_data.securitydata\\_mdl\\_txt'.  The SQL client will display the results. Use partitions in the where clause to optimize performance.   More information   More details about how physical metadata in Herd is used to enable BDSQL is available in the  Technical Overview  The instance type and node count of the BDSQL Presto cluster can be tuned for performance",
            "title": "Activities"
        },
        {
            "location": "/user-guide/#take-aways",
            "text": "Users can query anything in the data lake in seconds. The example above has one object \u2013 but Herd-MDL achieves interactive query performance even if you have thousands of Data entities, millions of Data Objects and partitions, and cases where each Data Object has tens of billions of rows that make up a Data Entity with trillions of rows.  BDSQL exposes all the data in your data lake to any user who can perform SQL queries. It looks like one gigantic database accessible to anyone with a SQL client \u2013 but it's actually based on more scalable and cost-effective technology than even the most expensive proprietary big data appliances.",
            "title": "Take-aways"
        },
        {
            "location": "/user-guide/#ingesting-data-into-herd-mdl",
            "text": "Purpose - provide an overview and simplified example of how to register data in Herd  Terminology   Data Entity (also known as a Business Object Definition in Herd APIs) - represents a set of data with a specific business meaning e.g. Trade Details. Includes descriptive information and details of data format.  Data Object (also known as a Business Object Data in Herd APIs) - represents actual data in some storage location. Includes information about physical location, partitions, and storage platform.",
            "title": "Ingesting data into Herd-MDL"
        },
        {
            "location": "/user-guide/#activities_2",
            "text": "Pre-requisites   Herd-MDL is installed and validated; User has machine with access to S3 endpoints to upload the data and Herd endpoints to register the data  Download  herd_reg_demo.zip  and unzip in a directory  Install Postman REST client  Obtain the Herd Uploader jar - use the link for \"HerdUploaderJarURL\" in the output of your Herd-MDL CloudFormation stack   Perform one-time steps to register a new object (Business Object Definition with Format) in the Herd metadata catalog   Import all 3 json files from herd_reg_demo/register_one_time into Postman. These files contain import the following:  Collection called 'MDL Demo' that contains all requests that we will execute in sequence to perform the registration.  Postman Environment called 'MDL Demo' that contains the Herd hostname. This is referenced\nfrom each request in the collection. To edit, click the gear icon in the upper-right that says 'Manage Environment'. Then click on 'MDL Demo' from the list to view the variable. Replace the domain value with the domain from the 'HerdURL' entry in the output of your Herd-MDL CloudFormation stack.  Postman Global Variables for Namespace and BO Definition Name. These are referenced from request and can be changed to\nrun this demo multiple times without colliding with previously created objects.    Select 'MDL Demo' environment from the environment drop-down in the upper-right hand corner of Postman.  To test connectivity, run the 'Current User' request in the collection. For demo installations without authentication should receive results for TRUSTED_USER.   Now, run the following requests in sequence to register a new object in the catalog:  Create Namespace - creates a new Namespace for your object. The value of the Namespace comes from the Postman Global\nVariable you imported which by default is 'reg_demo'  Create BO Definition - creates a new Business Object Definition for your object. The value of the BO Definition Name comes\nfrom the Postman Global Variable you imported which by default is 'demo_data'  Create BO Format - creates a Format for your object. The Format is simple - it has only two columns and is partitioned by\n'Transaction Date'  Descriptive PUT - adds a friendly display name and definition  Register for Metastore-BDSQL - this registers the new object for inclusion in the Metastore used by the BDSQL interative query\ncluster.    Go to Herd UI and search for 'demo_data' (or whatever you might have named your BO Definition). You will see a result for the object\nyou just created. Click to see the Data Entity page for your object.  Drill down using the 'Data Object List' link and you will see that there are not yet any BData partitions registered   Register a new partition (Business Object Data) in the Herd metadata catalog. This step is generally performed in an ongoing fashion with new\npartitions/BData as they arrive.   Get to a command line and navigate to the herd_reg_demo/register_bdata_ongoing directory  Open command.bat and replace the hostname value in the '-H' argument with the he domain from the 'HerdURL' entry in the output of your Herd-MDL CloudFormation stack  Place the Herd Uploader jar in the herd_reg_demo/register_bdata_ongoing directory  Run command.bat - it performs the following:  command.bat triggers the Herd uploader tool with command line arguments referring to the Herd API host, the data file\nassociated with this BData, and a manifest file that contains metadata about this BData  command.bat also contains additional command line arguments as documented in Uploader Users Guide  Note that you can configure a proxy if needed to access Herd and/or S3 using arguments documented in the Users Guide    Uploader tool performs the following:  Read manifest file and confirm it references a valid BO Definition, Format, and Partition value for the BData being updated  NOTE \u2013 unlike the Postman Collection that has variables for Namespace and BO Definition Name, the manifest.json has these\nvalues hard-coded. If you've changed either of those variables when registering with Postman, you must alter these values in the manifest.\njson as well.  Call Herd API to pre-register the partition based on metadata from the manifest file and obtain S3 location for data upload  Call Herd API to get temporary credentials to upload data file to S3. This step requires the user has WRITE permissions to the\nNamespace  Upload the file to S3 using the temporary credentials  Call Herd API to confirm the data is in place and mark the new BData Partition VALID. This designates it is ready for consumers\nto access the data.    Return to Herd UI and refresh the Data Object List page. The newly-registered BData will now appear. Drill down to see details such as\nS3 location, audit information.  After a delay (30-minutes if Metastore cluster is idle, <10 minutes if Metastore cluster was running), the new data will be available to\nselect in BDSQL interactive query   More information   Learn more about the Herd catalog in the  Herd Wiki  and about Herd REST APIs by browsing the  Herd Swagger API documentation",
            "title": "Activities"
        },
        {
            "location": "/user-guide/#take-aways_1",
            "text": "There is a learning curve but after that, registering data is fairly straightforward. The registration process at FINRA is highly automated.\nSome use cases automate use of the Uploader tool. Other use cases perform some variation of the steps the the Uploader tool performs\nbut they all ultimately place data in S3 and call Herd APIs to register the data. Other use cases include:  integration between Herd and FINRA's ETL framework; integrations with custom apps of different varieties  This example shows registration of columnar data consumed through BDSQL but a similar approach is used to register document-based\ndata for consumption by other tools.  The Uploader tool is a quick, easy way to ingest Data Objects into the Herd-MDL. This tool has been used extensively at FINRA. Many teams script the generation of manifest files and the uploader CLI. Petabytes of data have been uploaded using this tool.",
            "title": "Take-aways"
        },
        {
            "location": "/user-guide/#how-to-find-mdl-user-credentials-to-login-to-herdshepherdbdsql",
            "text": "This section describes how to locate credentials required for endpoints when you have installed with EnableSSLAndAuth=true.   Note: A detailed description and a list of all default users and auth groups created for your stack can be found in the  manage OpenLdap section   Prerequisites   AWS Console Access of the AWS Account, where MDL is created  MDL Instance Name of the MDL stack  This is the parameter to the MDL Cloudformation Stack    EnableSSLAndAuth must be set to true while creating the stack   Steps   Login to AWS Console and navigate to SSM Parameter section (Refer  AWS Documentation )  User Name  Find the parameter: /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername on the console  Example :   /app/MDL/mdlstack/dev/LDAP/User/HerdAdminUsername    Get the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd  Example:  herd_admin_user      Password    Find the parameter: /app/MDL/${MDLInstanceName}/${Environment}/Password/HerdAdminPassword on the console  Example :   /app/MDL/mdlstack/dev/LDAP/Password/HerdAdminPassword    Get the Value for the above parameter, it is a 12-letter AlphaNumeric String which specifies the password for Herd/Bdsql/Shepherd, and it is a Secure String  Example:  ODMyOTdmZmE5      Use the above User name, and Password to login to Herd/Shepherd/Bdsql",
            "title": "How to find MDL User Credentials to login to Herd/Shepherd/Bdsql"
        },
        {
            "location": "/user-guide/#herd-mdl-additional-use-cases",
            "text": "Scale!  Herd-MDL is proven at scale. FINRA uses the Herd catalog, Herd-UI, and BDSQL for interactive query in a data lake with multiple petabytes. It's all the same technology as presented in this User Guide -- just at a much larger scale    Integrations  Teams at FINRA have integrated with Herd-MDL to fulfill various data processing and analytics requirements. Contact us through GitHub for questions or a demonstration.  Ingest / Processing  Document-based use case - custom apps for data intake from end users  Batch-processing use case - ETL framework that registers data and establishes lineage    Analytics  Big Data BI tools - either custom or COTS like Tableau or Pentaho  Data Science tool including native Spark library for Herd",
            "title": "Herd-MDL additional use cases"
        },
        {
            "location": "/dev-guide/",
            "text": "Build and deploy instructions\n\u00b6\n\n\nHow to build and deploy an MDL stack\n\u00b6\n\n\nWe \ndockerized\n our build-and-deploy environment to keep it simple and save you the hassle of installing\n JDK, Maven and Python on your machine. With that being said, if you'd like to use your own development \nenvironment- please skip the steps below and read the instructions \nhere\n.\n\n\nPrerequisites\n\u00b6\n\n\n\n\nS3-bucket to upload herd-mdl artifacts.\n\n\nValid AWS Credentials (for the build script to be able to upload to S3)\n\n\nDocker installed on your machine\n\n\n\n\nSteps\n\u00b6\n\n\n1. Clone the herd-mdl repo from GitHub\n\n\ngit clone https://github.com/FINRAOS/herd-mdl.git && cd herd-mdl\n\n\n2. Switch to the branch you want to deploy\n\n\ngit checkout <branch-name>\n\n\n3. Pull our official docker image from docker-hub \n\n\ndocker pull finraos/herd-mdl\n\n\n4. Navigate to the directory with build scripts  \n\n\ncd mdl/build/\n\n\nThis step is needed because the \nbuild-script\n needs a parameter-file which has default values for\n  CloudFormation when bringing up a stack, and this directory has one which you can modify and use.\n\n\nVerify that the folder-structure looks like this: \n\n\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 build_and_deploy.py\n\u251c\u2500\u2500 default-parameters.json\n\u2514\u2500\u2500 env.list\n\n\n\n\n5. Make changes to the \nenv.list\n file according to your needs, this file gets passed to the docker container as an env-file  \n\n\naction=deploy              \nbuild_from=remote          \nbranch=develop\ns3_bucket=s3_bucket_name\ns3_bucket_prefix=prefix\ndefault_stack_name=demo-stack\nproxy=<proxy-host>          \nparameter_file_name=default-parameters.json  \ncustom_tags=[{'Key': 'CustomKey','Value': 'CustomValue'}]      \nlocal_repo_path=/path/to/your/repo\nremote_repo_path=https://github.com/<username>/herd-mdl.git\nshow_output=True          \n\n\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nRequired\n\n\nPossible value(s)\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nY\n\n\nbuild \n deploy\n\n\nBuilds the artifact and upload to S3. \n Builds, uploads to S3 and launches a new stack.\n\n\n\n\n\n\nbuild_from\n\n\nY\n\n\nremote \n local\n\n\nClones remote repository to the container, switches to the specified branch and uses it to build artifacts. \n Uses your local repository (needs to be mounted to the docker container)\n\n\n\n\n\n\nbranch\n\n\nN\n\n\n<git branch>\n\n\nThe Git branch you want to build artifacts from.\n\n\n\n\n\n\ns3_bucket\n\n\nN\n\n\n<s3bucket>\n\n\nName of the S3 bucket you want to upload the build-artifacts to.\n\n\n\n\n\n\ns3_bucket_prefix\n\n\nN\n\n\n<prefix>\n\n\nAn optional prefix to use when uploading the build-artifact.\n\n\n\n\n\n\ndefault_stack_name\n\n\nY\n\n\n<CloudFormation stack-name>\n\n\nThe name to use when launching the MDL stack. Please note that there shouldn't be an existing stack with this name or the deployment will fail.\n\n\n\n\n\n\nproxy\n\n\nN\n\n\n<proxyhost:port>\n\n\nAn optional proxy used by the boto3 client to connect to AWS.\n\n\n\n\n\n\nparameter_file_name\n\n\nY\n\n\ndefault_parameters_file.json\n\n\nName of the parameters file which is used to populate when launching the CloudFormation stack. This could be any valid JSON file with the same format as the one included in the herd-mdl repository [link]\n\n\n\n\n\n\ncustom_tags\n\n\nN\n\n\njson_array\n\n\nAn optional set of tags you want applied to your CloudFormation stack.\n\n\n\n\n\n\nlocal_repo_path\n\n\nN\n\n\n/path/to/your/local/repo\n\n\nfully-qualified path to your local repo. Please note that this directory also needs to be mounted on the docker container as a bind-mount.\n\n\n\n\n\n\nremote_repo_path\n\n\nN\n\n\nhttps://remote/repo/location.git\n\n\nRemote repository location eg: \nhttps://github.com/<username>/herd-mdl.git\n\n\n\n\n\n\nshow_output\n\n\nN\n\n\nTrue \n False\n\n\nShow output from system commands \n Suppress system command outputs\n\n\n\n\n\n\n\n\n6. Prepare to launch your docker container\n\n\ndocker create --name <container-name> \\\n              --env-file env.list \\\n              --mount=\"--mount src=\"<local_repo_path>\",target=\"<local_repo_path>\",type=bind \" \\  \n              --env AWS_DEFAULT_REGION=<aws_region> \\\n              --env AWS_ACCESS_KEY_ID=<aws_access_key_id> \\\n              --env AWS_SECRET_ACCESS_KEY=<aws_secret_access_key> \\\n              --env AWS_SESSION_TOKEN=<aws_session_token> \\\n              <image-name>\n\n\n\n\n\n\nNote: The \nmount\n option is not required if you're building/deploying from a remote Git location.\n\n\n\n\n7. Copy the parameters file to the container\n\n\ndocker cp default-parameters.json <container-name>:/herd-mdl/default-parameters.json\n\n\n8. Launch the container \n\n\ndocker start --interactive <container-name>\n\n\n\n\nNote: The default \nentrypoint\n of this docker image runs the build-script. If you want to access to shell: override\n  the entrypoint:\n\n\ndocker start -it <container-name> --entrypoint /bin/bash\n\n\n\n\n\n\nRunning the build-script\n\u00b6\n\n\nIf you would like to run the \nbuild-and-deploy\n script as a standalone and not use our docker image- please \nfollow the instructions below.\n\n\nPrerequisites\n\n\n\n\nJDK 8\n\n\nDownload\n\n\nMaven 3.5.4\n\n\nDownload\n\n\nPython 3\n\n\nDownload\n\n\nInstall python dependencies\n\n\nGitPython\n\n\nboto3\n\n\n\n\n\n\n\n\nSteps\n\n\n1. Provide the required/optional parameters to the script as environment variables as needed. Refer to the list of accepted parameters \nhere\n. \n\n\n\n\nExamples\n\n\n\n\nLinux/OSX: \nexport action=deploy\n\n\nWindows: \nset action=deploy\n\n\n\n\n\n\n2. Run the python script.\n\n\npython3 build_and_deploy.py\n\n\n3. Verify that the stack was launched from your AWS console.\n\n\nNotes\n\u00b6\n\n\n1. You don't need to clone herd-mdl if you're only building it from a remote git location.\n\n2. The build script runs some system commands which could generate a lot of output, change the env-var: \nshow_output\n to \nFalse\n to suppress output.",
            "title": "Developer guide"
        },
        {
            "location": "/dev-guide/#build-and-deploy-instructions",
            "text": "",
            "title": "Build and deploy instructions"
        },
        {
            "location": "/dev-guide/#how-to-build-and-deploy-an-mdl-stack",
            "text": "We  dockerized  our build-and-deploy environment to keep it simple and save you the hassle of installing\n JDK, Maven and Python on your machine. With that being said, if you'd like to use your own development \nenvironment- please skip the steps below and read the instructions  here .",
            "title": "How to build and deploy an MDL stack"
        },
        {
            "location": "/dev-guide/#prerequisites",
            "text": "S3-bucket to upload herd-mdl artifacts.  Valid AWS Credentials (for the build script to be able to upload to S3)  Docker installed on your machine",
            "title": "Prerequisites"
        },
        {
            "location": "/dev-guide/#steps",
            "text": "1. Clone the herd-mdl repo from GitHub  git clone https://github.com/FINRAOS/herd-mdl.git && cd herd-mdl  2. Switch to the branch you want to deploy  git checkout <branch-name>  3. Pull our official docker image from docker-hub   docker pull finraos/herd-mdl  4. Navigate to the directory with build scripts    cd mdl/build/  This step is needed because the  build-script  needs a parameter-file which has default values for\n  CloudFormation when bringing up a stack, and this directory has one which you can modify and use.  Verify that the folder-structure looks like this:   .\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 build_and_deploy.py\n\u251c\u2500\u2500 default-parameters.json\n\u2514\u2500\u2500 env.list  5. Make changes to the  env.list  file according to your needs, this file gets passed to the docker container as an env-file    action=deploy              \nbuild_from=remote          \nbranch=develop\ns3_bucket=s3_bucket_name\ns3_bucket_prefix=prefix\ndefault_stack_name=demo-stack\nproxy=<proxy-host>          \nparameter_file_name=default-parameters.json  \ncustom_tags=[{'Key': 'CustomKey','Value': 'CustomValue'}]      \nlocal_repo_path=/path/to/your/repo\nremote_repo_path=https://github.com/<username>/herd-mdl.git\nshow_output=True",
            "title": "Steps"
        },
        {
            "location": "/dev-guide/#parameters",
            "text": "Parameter name  Required  Possible value(s)  Description      action  Y  build   deploy  Builds the artifact and upload to S3.   Builds, uploads to S3 and launches a new stack.    build_from  Y  remote   local  Clones remote repository to the container, switches to the specified branch and uses it to build artifacts.   Uses your local repository (needs to be mounted to the docker container)    branch  N  <git branch>  The Git branch you want to build artifacts from.    s3_bucket  N  <s3bucket>  Name of the S3 bucket you want to upload the build-artifacts to.    s3_bucket_prefix  N  <prefix>  An optional prefix to use when uploading the build-artifact.    default_stack_name  Y  <CloudFormation stack-name>  The name to use when launching the MDL stack. Please note that there shouldn't be an existing stack with this name or the deployment will fail.    proxy  N  <proxyhost:port>  An optional proxy used by the boto3 client to connect to AWS.    parameter_file_name  Y  default_parameters_file.json  Name of the parameters file which is used to populate when launching the CloudFormation stack. This could be any valid JSON file with the same format as the one included in the herd-mdl repository [link]    custom_tags  N  json_array  An optional set of tags you want applied to your CloudFormation stack.    local_repo_path  N  /path/to/your/local/repo  fully-qualified path to your local repo. Please note that this directory also needs to be mounted on the docker container as a bind-mount.    remote_repo_path  N  https://remote/repo/location.git  Remote repository location eg:  https://github.com/<username>/herd-mdl.git    show_output  N  True   False  Show output from system commands   Suppress system command outputs     6. Prepare to launch your docker container  docker create --name <container-name> \\\n              --env-file env.list \\\n              --mount=\"--mount src=\"<local_repo_path>\",target=\"<local_repo_path>\",type=bind \" \\  \n              --env AWS_DEFAULT_REGION=<aws_region> \\\n              --env AWS_ACCESS_KEY_ID=<aws_access_key_id> \\\n              --env AWS_SECRET_ACCESS_KEY=<aws_secret_access_key> \\\n              --env AWS_SESSION_TOKEN=<aws_session_token> \\\n              <image-name>   Note: The  mount  option is not required if you're building/deploying from a remote Git location.   7. Copy the parameters file to the container  docker cp default-parameters.json <container-name>:/herd-mdl/default-parameters.json  8. Launch the container   docker start --interactive <container-name>   Note: The default  entrypoint  of this docker image runs the build-script. If you want to access to shell: override\n  the entrypoint:  docker start -it <container-name> --entrypoint /bin/bash",
            "title": "Parameters"
        },
        {
            "location": "/dev-guide/#running-the-build-script",
            "text": "If you would like to run the  build-and-deploy  script as a standalone and not use our docker image- please \nfollow the instructions below.  Prerequisites   JDK 8  Download  Maven 3.5.4  Download  Python 3  Download  Install python dependencies  GitPython  boto3     Steps  1. Provide the required/optional parameters to the script as environment variables as needed. Refer to the list of accepted parameters  here .    Examples   Linux/OSX:  export action=deploy  Windows:  set action=deploy    2. Run the python script.  python3 build_and_deploy.py  3. Verify that the stack was launched from your AWS console.",
            "title": "Running the build-script"
        },
        {
            "location": "/dev-guide/#notes",
            "text": "1. You don't need to clone herd-mdl if you're only building it from a remote git location. \n2. The build script runs some system commands which could generate a lot of output, change the env-var:  show_output  to  False  to suppress output.",
            "title": "Notes"
        },
        {
            "location": "/admin-guide/",
            "text": "Herd-MDL Administration Guide\n\u00b6\n\n\nHow to SSH to an EC2 Instance in MDL\n\u00b6\n\n\nPrerequisites\n\n\n\n\nAWS Console Access of the AWS Account, where MDL is created.\n\n\nSSH Client (Example Putty).\n\n\nMDL Instance Name of the MDL stack.\n\n\nThis is the parameter to the MDL Cloudformation Stack.\n\n\n\n\n\n\nBastion Host in the VPC in case of connectivity issues to the private subnet.\n\n\n\n\nSteps\n\n\n\n\nLogin to AWS Console and navigate to SSM Parameter section (Refer \nAWS Documentation\n)\n\n\nSearch for the parameter: /app/MDL/${MDLInstanceName}/${Environment}/KEYS/KeypairName\n\n\nExample : \n/app/MDL/mdl/dev/KEYS/KeypairName\n\n\n\n\n\n\nGet the Value for the above parameter. That value specifies the keypair-name which holds the pem file\n\n\nExample: \napp_mdl_dev\n\n\n\n\n\n\nGet Parameter \"app_mdl_dev\" - Value from the previous step\n\n\nThe value of this parameter is a SecureString which is the private-key material for the keypair created for your stack. Copy the contents into a new file: \nkey.pem\n and make it read-only: \n\n\n$ chmod 400 key.pem\n\n\n\n\n\n\n\n\n\n\nLogin to the node using SSH client with user name \"ec2-user\" and the PEM file from previous step: \n\n\n$ ssh -i /path/to/key.pem ec2-user@<ip-address-ec2>\n\n\n\n\n\n\nDefault AMI has ec2-user configuration\n\n\n\n\n\n\n\n\nHow to find MDL User Credentials to login to Herd/Shepherd/Bdsql\n\u00b6\n\n\nThis section describes how to locate credentials required for endpoints when you have installed with EnableSSLAndAuth=true.\n\n\n\n\nNote: A detailed description and a list of all default users and auth groups created for your stack can be found in the \nmanage OpenLdap section\n\n\n\n\nPrerequisites\n\n\n\n\nAWS Console Access of the AWS Account, where MDL is created\n\n\nMDL Instance Name of the MDL stack\n\n\nThis is the parameter to the MDL Cloudformation Stack\n\n\n\n\n\n\nEnableSSLAndAuth must be set to true while creating the stack\n\n\n\n\nSteps\n\n\n\n\nLogin to AWS Console and navigate to SSM Parameter section (Refer \nAWS Documentation\n)\n\n\nUser Name\n\n\nFind the parameter: /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername on the console\n\n\nExample :  \n/app/MDL/mdlstack/dev/LDAP/User/HerdAdminUsername\n\n\n\n\n\n\nGet the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd\n\n\nExample: \nherd_admin_user\n\n\n\n\n\n\n\n\n\n\nPassword  \n\n\nFind the parameter: /app/MDL/${MDLInstanceName}/${Environment}/Password/HerdAdminPassword on the console\n\n\nExample :  \n/app/MDL/mdlstack/dev/LDAP/Password/HerdAdminPassword\n\n\n\n\n\n\nGet the Value for the above parameter, it is a 12-letter AlphaNumeric String which specifies the password for Herd/Bdsql/Shepherd, and it is a Secure String\n\n\nExample: \nODMyOTdmZmE5\n\n\n\n\n\n\n\n\n\n\nUse the above User name, and Password to login to Herd/Shepherd/Bdsql  \n\n\n\n\nHow-tos for initial creation of Herd metadata\n\u00b6\n\n\nRefer to \nHerd Documentation\n for details on the following:\n\n  Add Storage in Herd\n\n  Create New Namespace in Herd\n\n  Create New Business Object in Herd\n\n  Create New Format in Herd\n*  Register Data in Herd\n\n\nHow to propagate an 'Object' from Herd to Metastor\n\u00b6\n\n\nOnce Business Object is created in Herd, there is an additional step to include the Object in Metastor so that the Object is query-able in BDSQL. This step registers a Notification for the Object such that an Activity workflow is triggered for every Data Registration to this Object. This is a one time step for the Object. Once Object is registered for the Notification, all the future partitions registered for the Object will be available in BDSQL.\n\n\nHere is the XML to add the Notification in Herd\n\n\nobjectNotification.xml\n\n\n<businessObjectDataNotificationRegistrationCreateRequest>\n    <businessObjectDataNotificationRegistrationKey>\n        <namespace>MDL</namespace>\n        <notificationName>METASTOR_{{NAMESPACE}}_{{USAGE}}_{{OBJECT_NAME}}_{{FILE_FORMAT}}</notificationName>\n    </businessObjectDataNotificationRegistrationKey>\n    <businessObjectDataEventType>BUS_OBJCT_DATA_STTS_CHG</businessObjectDataEventType>\n    <businessObjectDataNotificationFilter>\n        <namespace>{{NAMESPACE}}</namespace>\n        <businessObjectDefinitionName>{{OBJECT_NAME}}</businessObjectDefinitionName>\n        <businessObjectFormatUsage>{{USAGE}}</businessObjectFormatUsage>\n        <businessObjectFormatFileType>{{FILE_FORMAT}}</businessObjectFormatFileType>\n        <newBusinessObjectDataStatus>VALID</newBusinessObjectDataStatus>\n        <storageName>S3_MANAGED</storageName>\n    </businessObjectDataNotificationFilter>\n    <jobActions>\n        <jobAction>\n            <namespace>MDL</namespace>\n            <jobName>addPartitionWorkflow</jobName>\n        </jobAction>\n    </jobActions>\n    <notificationRegistrationStatus>ENABLED</notificationRegistrationStatus>\n</businessObjectDataNotificationRegistrationCreateRequest>\n\n\n\n\nNOTE: \nReplace {{NAMESPACE}} with the actual Namespace of the Object\nReplace {{USAGE}} with the actual Usage of the Object\nReplace {{OBJECT_NAME}} with the actual Object Name\nReplace {{FILE_FORMAT}} with the actual File Type for the Object\n\n\nHere is the cURL syntax to add the Notification for the Object:\n\n\ncURL Command\n\n\ncat objectNotification.xml | curl -H \"Content-Type: application/xml\" -d @- -X POST http://HERD_DNS_NAME/herd-app/rest/notificationRegistrations/businessObjectDataNotificationRegistrations | xmllint --format -\n\n\n\n\nHow To Query the Data in BDSQL\n\u00b6\n\n\nPrerequisites\n\n\n\n\nAWS Console Access of the AWS Account, where MDL is created\n\n\nSQL Client with Presto Driver\n\n\nRefer \nPresto Documentation\n for the JDBC Driver\n\n\n\n\n\n\nMDL Instance Name of the MDL stack\n\n\nThis is the parameter to the MDL Cloudformation Stack\n\n\n\n\n\n\n\n\nSteps\n\n\n\n\nLogin to AWS Console and navigate to Clouformation \n\n\nGo to the Outputs Section of the MDL stack and Note down the value for the key \"BdsqlURL\"\n\n\nThis is the Bdsql JDBC URL\n\n\nExample - jdbc:\npresto://mdl.poc.aws.mdldomain.com:443/hive\n\n\n\n\n\n\nIf (EnableSSLAndAuth == false)  \n\n\nUse the above URL with default user name \"hadoop\" and without password to login to BDSQL using SQL Client that supports Presto JDBC Driver\n\n\n\n\n\n\nIf (EnableSSLAndAuth == true)\n\n\nNavigate to SSM Parameter section (Refer \nAWS Documentation\n) for Username and Password\n\n\nUser Name\n\n\nOpen Parameter /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername\n\n\nExample : /app/MDL/mdl/dev/LDAP/User/HerdAdminUsername\n\n\nGet the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd\n\n\nExample: herd_admin\n\n\n\n\n\n\nPassword  \n\n\nOpen Parameter /app/MDL/${MDLInstanceName}/${Environment}/LDAP/Password/HerdAdminPassword\n\n\nExample : /app/MDL/mdl/dev/LDAP/Password/HerdAdminPassword\n\n\nGet the Value for the above parameter. That value specifies the password for Herd/Bdsql/Shepherd, and this parameter is a Secure String\n\n\nExample: ODMyOTdmZmE5\n\n\n\n\n\n\nUse the above URL, User name, and Password to login to Bdsql using the SQL Client that supports Presto JDBC Driver\n\n\n\n\n\n\n\n\nManaging OpenLDAP Users and Groups\n\u00b6\n\n\nMDL provides a helper script to manage users and groups. The script is deployed onto the OpenLDAP server in /home/mdladmin/deploy/mdl/scripts/.\n\n\nUsage and examples\n\n\n# ./manageLdap.sh --help\n\n\nUsage:\n\nmanageLdap.sh --action [create_user|create_group|add_attribute|replace_attribute|add_user_to_group|remove_user_from_group|delete_user|delete_group|delete_object|show_directory] [--user name] [--password password] [--group name] [--dn distinguishedname]\n\n\nExamples:\n\n\n  manageLdap.sh --action create_user --user userA --password password --email test@gmail.com --phone 1-234-567-8901\n  manageLdap.sh --action add_attribute --user userA --attribute telephoneNumber --value 1-234-567-8901\n  manageLdap.sh --action replace_attribute --user userA --attribute mail --value new@gmail.com\n  manageLdap.sh --action create_group --user userA --group groupA\n  manageLdap.sh --action add_user_to_group --user userB --group groupA\n  manageLdap.sh --action remove_user_from_group --user userB --group groupA\n  manageLdap.sh --action delete_object --dn \"cn=userA,ou=People,ou=Groups,dc=domain,dc=com\"\n  manageLdap.sh --action delete_user --user userA\n  manageLdap.sh --action delete_group --group groupA\n  manageLdap.sh --action show_directory\n  manageLdap.sh --help\n\n\n\n\nCreate new user:\n\n\n\\# ./manageLdap.sh --action create_user --user userA --password password\n\\# ./manageLdap.sh --action create_user --user userB --password password --email test@gmail.com \n\\# ./manageLdap.sh --action create_user --user userC --password password --email test@gmail.com --phone 1-234-567-8901\n\n\n\n\nadding new entry \"cn=$username,ou=People,dc=finra,dc=org\"\n\n\nCreate new group:\n\n\n\\# ./manageLdap.sh --action create_group --user userA --group groupA\n\n\nadding new entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"\n\n\nAdd user to group:\n\n\n\\# ./manageLdap.sh --action add_user_to_group --user userA --group groupA\n\n\nadd member:\n        cn=userA,ou=People,dc=finra,dc=org\nmodifying entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"\n\n\nRemove user from group:\n\n\n\\# ./manageLdap.sh --action remove_user_from_group --user userA --group groupA\n\n\ndelete member:\n        cn=userA,ou=People,dc=finra,dc=org\nmodifying entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"\n\n\nDelete user:\n\n\n\\# ./manageLdap.sh --action delete_user --user userA\n\n\ndeleting entry \"cn=userA,ou=People,dc=finra,dc=org\"\n\n\nDelete group:\n\n\n\\# ./manageLdap.sh --action delete_group --group groupA\n\n\ndeleting entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"\n\n\nDelete object:\n\n\n\\# ./manageLdap.sh --action delete_object --dn \"uid=userA,ou=People,dc=finra,dc=org\"\n\n\nAdd new user attribute:\n\n\n\\# ./manageLdap.sh --action add_attribute --user userA --attribute telephoneNumber --value 1-234-567-8901\n\n\nModify existing user attribute value:\n\n\n`\\# ./manageLdap.sh --action replace_attribute --user userA --attribute mail --value new@gmail.com\n\n\nShow directory information:\n\n\n\\# ./manageLdap.sh --action show_directory\n# extended LDIF\n#\n# LDAPv3\n# base <dc=mdl,dc=org> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# mdl.org\ndn: dc=mdl,dc=org\nobjectClass: dcObject\nobjectClass: organization\ndc: mdl.org\no: mdl\n\n# People, mdl.org\ndn: ou=People,dc=mdl,dc=org\nobjectClass: organizationalUnit\nou: People\n\n# Groups, mdl.org\ndn: ou=Groups,dc=mdl,dc=org\nobjectClass: organizationalUnit\nou: Groups\n\n# mdl_user, People, mdl.org\ndn: cn=mdl_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: mdl_user\ncn: mdl_user\nsn: null\nuserPassword:: e1NTSEF9SVhKL2NJb3Fmb2VkaVd5Tkp0U1BGN3EzOVpsdGk5RWE=\nuidNumber: 10002\ngidNumber: 1001\nhomeDirectory: /home/mdl_user\nmail: mdl_user@mdl.org\nloginShell: /bin/bash\n\n# sec_user, People, mdl.org\ndn: cn=sec_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: sec_user\ncn: sec_user\nsn: null\nuserPassword:: e1NTSEF9WVlaaGJxYmhGbTRwQ1JWaERRdUdVV3gyc3l4OHlPWUU=\nuidNumber: 10003\ngidNumber: 1001\nhomeDirectory: /home/sec_user\nmail: sec_user@mdl.org\nloginShell: /bin/bash\n\n# admin_user, People, mdl.org\ndn: cn=admin_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: admin_user\ncn: admin_user\nsn: null\nuserPassword:: e1NTSEF9VktJdkR2R1RLRENIOTRFK05FNXEwRUVEYWExdU5lQ0Q=\nuidNumber: 10004\ngidNumber: 1001\nhomeDirectory: /home/admin_user\nmail: admin_user@mdl.org\nloginShell: /bin/bash\n\n# ro_user, People, mdl.org\ndn: cn=ro_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: ro_user\ncn: ro_user\nsn: null\nuserPassword:: e1NTSEF9L2ZodFFBSUwwU1hFUUIwc2dzSVJiSFY3VW0wUlkySWg=\nuidNumber: 10005\ngidNumber: 1001\nhomeDirectory: /home/ro_user\nmail: ro_user@mdl.org\nloginShell: /bin/bash\n\n# basic_user, People, mdl.org\ndn: cn=basic_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: basic_user\ncn: basic_user\nsn: null\nuserPassword:\nuidNumber: 10006\ngidNumber: 1001\nhomeDirectory: /home/basic_user\nmail: basic_user@mdl.org\nloginShell: /bin/bash\n\n# APP_MDL_ACL_RO_herd_admin, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_herd_admin,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_admin\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_herd_ro, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_herd_ro,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_ro\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=basic_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_mdl_rw, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_mdl_rw,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_mdl_rw\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=mdl_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_sec_market_data_rw, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_sec_market_data_rw,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_sec_market_data_rw\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=sec_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_Users, Groups, mdl.org\ndn: cn=APP_MDL_Users,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_Users\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=mdl_user,ou=People,dc=mdl,dc=org\nmember: cn=sec_user,ou=People,dc=mdl,dc=org\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# search result\nsearch: 2\nresult: 0 Success\n\n# numResponses: 15\n# numEntries: 14\n\n\n\n\nHow to find Herd-MDL logs in CloudWatch\n\u00b6\n\n\nNote: Logs are created in cloudwatch only when the log content is NOT empty; therefore, some\u00a0of the log streams mentioned below may not be found if there is no content in the logs.\n\n\nLogs inside customized stack log group\n\u00b6\n\n\nSteps:\n\n\n\n\nLogin to the AWS Console and navigate to CloudWatch.\n\n\nClick on 'Logs' in the left panel.\n\n\nFilter Log Groups with your stack's cloudwatch log-group name.\n\n\nwhere to find the stack's log group name?\n: it's the value for the parameter: \nCloudWatchLogGroupName\n in the outputs section of the MDL stack.(Example value: \nlogtest-MdlStack-10IBXFGDHF94M\n)\n\n\n\n\n\n\nClick on above filtered stack log group to access it: inside this stack log group folder, you will find the logs saved as individual log streams.\n\n\n\n\nElastic Search Log Streams:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\n\n\n\n\nCodeDeploy Logs\n\n\nelasticsearch/codedeploy/*\n\n\n\n\n\n\nApache Logs\n\n\nelasticsearch/apache/*\n\n\n\n\n\n\nElastic Search Logs\n\n\nelasticsearch/*\n\n\n\n\n\n\n\n\nHerd Log Streams:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\n\n\n\n\nCodeDeploy Log\n\n\nherd/codedeploy/*\n\n\n\n\n\n\nApache Logs\n\n\nherd/apache/*\n\n\n\n\n\n\nTomcat Logs\n\n\nherd/tomcat/*\n\n\n\n\n\n\nApplication Logs\n\n\nherd/application/herd.log\n\n\n\n\n\n\n\n\nMetastor Log Streams:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\n\n\n\n\nCodeDeploy Logs\n\n\nmetastor/codedeploy/*\n\n\n\n\n\n\n\n\nBdsql Log Streams:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\n\n\n\n\nEMR bootstrap Logs\n\n\n/bdsql/bootstrap/*\n\n\n\n\n\n\nEMR hadoop step Logs\n\n\n/bdsql/hadoop/step/*\n\n\n\n\n\n\n\n\nOpenLdap Log Streams:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\n\n\n\n\nCodeDeploy Log\n\n\nopenldap/codedeploy/*\n\n\n\n\n\n\n\n\nLogs with aws default log group\n\u00b6\n\n\nRds Log Group:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\nExample\n\n\n\n\n\n\nRds Log\n\n\n/aws/rds/instance/{{RdsInstanceName}}/{{logType}}/{{RdsInstanceName}}\n\n\n/aws/rds/instance/logtest-prod-metastor/error\n/aws/rds/instance/logtest-prod-metastor/general\n/aws/rds/instance/logtest-prod-metastor/audit\n/aws/rds/instance/logtest-prod-metastor/slowquery\n\n\n\n\n\n\n\n\nLambda Log Group:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLocation(format)\n\n\nExample\n\n\n\n\n\n\nLambda Log\n\n\n/aws/lambda/{{lambda_function_name}}\n\n\n/aws/lambda/maggietest-ArtifactCopyLambdaFunction-IT8KBCH3IFQ4\n\n\n\n\n\n\n\n\nHERD zero-downtime upgrade\n\u00b6\n\n\nMDL offers a Blue/Green style rolling upgrade mechanism for HERD and guarantees the following:\n\n\n\n\nNew Herd version (App, DB) is active with one click\n\n\nAll Herd data is unchanged including metadata catalog and Herd configuration\n\n\nWorks with zero downtime\n\n\nUpgrade is a blue/green style deployment and the relacement stack is smoke-tested before traffic is rerouted.\n\n\n\n\n\n\n\n\nNote: Rolling upgrades currently support forward-compatibility only, this means that Herd can only be upgraded to a \nnewer\n version. \n\n\n\n\nHow to perform a rolling upgrade\n\n\nMDL includes a \nLambda function\n which takes care of managing configurations and invoking a zero-downtime upgrade to Herd, \nbelow are steps on how to use the aforementioned Lambda function to perform a rolling upgrade:\n\n\n\n\n\n\nLogin to the AWS console and find the Upgrade-utility lambda function, it is named in the following format: \n   \n \n${MDLInstanceName}-Herd-${Environment}-UPGRADE-HERD-LAMBDA-FUNCTION\n\n   \n eg. \nMDL-Herd-dev-UPGRADE-HERD-LAMBDA-FUNCTION\n\n\n\n\n\n\nInvoke the lambda function with the following event (payload):\n\n\n\n\n\n\n    {\n      \"RequestedVersion\": \"<desired-herd-version>\"\n    }\n\n\n\n\nThe lambda function can be invoked in the following ways:\n\n\n\n\nUsing the AWS CLI's \ninvoke-lambda\n command.\n\n\nFrom the AWS Lambda console, \nmanually invoke the Lambda function\n using a test-event.\n\n\nUsing the \nAWS-SDK\n. \n\n\n\n\n\n  \nTry it out!\n\n  \n\n  \n \n  To try out a zero-downtime deployment, check out our \nwalk-through\n tutorial which will guide you through a sample deployment using the AWS Lambda console.\n  \n\n  \n\n  \n\n\nTroubleshooting\n\u00b6\n\n\nProblem\n\n\nCloud formation fails with error \"The maximum number of addresses has been reached\". This happens while creating VPC.\n\n\nCause\n\n\nThe account has reached the maximum number of EIPs. EIPs are needed while configuring VPC for NatGateway.\n\n\nSolution\n\n\n\n\nRecreate the MDL stack with option \"VPC=false\". In this case, user needs to create SSM parameters as per \"CreateVPC\" section in \nHerd-MDL CFT Specifications\n   \n\n\nIncrease the account level limit for EIPs so that NatGateway doesn't fail while allocating EIP in the account\n\n\n\n\n\n\nProblem\n\n\nCloud formation fails with error \"Already exists in stack\". This happens while creating AWS resources.\n\n\nCause\n\n\nThere is already another stack with the same MDLInstanceName in the same AWS account in the same region . \n\n\nSolution\n\n\n\n\nDelete the existing stack with same \"MDLInstanceName\" and then re-try creating the new stack\n\n\nEnter different \"MDLInstanceName\" for the new stack so that this does not collide with existing resources\n\n\n\n\n\n\nProblem\n\n\nCode Deploy fails with error \"HEALTH_CONSTRAINTS\". This happens with ElasticSearch/Herd/Metastor EC2 instances.\n\n\nCause\n\n\nThis seems to be an AWS issue that occurs occasionally. Under certain cases, CodeDeploy is unable to find the EC2 Instances created by AutoScaling group. \n\n\nSolution\n\n\n\n\nRestart the Stack Creation process   \n\n\n\n\nKnown Issues\n\u00b6\n\n\n\n\nEmptying S3 buckets manually before deleting the stack\n\n\n\n\nS3 buckets need to be emptied before deleting the stack. Otherwise, stack deletion fails. This will be fixed in future releases such that MDL takes care of emptying the buckets when Stack Deletion is triggered.\n\n\n\n\nDeleting SSM parameters manually before deleting the stack\n\n\n\n\nSome of the SSM parameters need to be deleted before deleting the stack. Note that Stack Deletion will not fail. However, these SSM parameters will be stale, if they are not cleaned-up. Search for all the SSM parameters with \"MDLInstanceName\" and delete the same for clean-up. This will be fixed in future releases such that MDL takes care of deleting all the SSM parameters, when Stack Deletion is triggered.\n\n\n\n\nDeleting RDS Snapshots\n\n\n\n\nAWS account has limits for number of RDS snapshots stored. MDL by default stores the RDS snapshot before deleting the same. If the number of RDS snapshots reach the AWS account limit, then MDL cannot delete the stack due to RDS snapshot issue. In this case, the user either needs to clean-up existing RDS snapshots or increase the RDS snapshot limit for the AWS account.",
            "title": "Administration"
        },
        {
            "location": "/admin-guide/#herd-mdl-administration-guide",
            "text": "",
            "title": "Herd-MDL Administration Guide"
        },
        {
            "location": "/admin-guide/#how-to-ssh-to-an-ec2-instance-in-mdl",
            "text": "Prerequisites   AWS Console Access of the AWS Account, where MDL is created.  SSH Client (Example Putty).  MDL Instance Name of the MDL stack.  This is the parameter to the MDL Cloudformation Stack.    Bastion Host in the VPC in case of connectivity issues to the private subnet.   Steps   Login to AWS Console and navigate to SSM Parameter section (Refer  AWS Documentation )  Search for the parameter: /app/MDL/${MDLInstanceName}/${Environment}/KEYS/KeypairName  Example :  /app/MDL/mdl/dev/KEYS/KeypairName    Get the Value for the above parameter. That value specifies the keypair-name which holds the pem file  Example:  app_mdl_dev    Get Parameter \"app_mdl_dev\" - Value from the previous step  The value of this parameter is a SecureString which is the private-key material for the keypair created for your stack. Copy the contents into a new file:  key.pem  and make it read-only:   $ chmod 400 key.pem      Login to the node using SSH client with user name \"ec2-user\" and the PEM file from previous step:   $ ssh -i /path/to/key.pem ec2-user@<ip-address-ec2>    Default AMI has ec2-user configuration",
            "title": "How to SSH to an EC2 Instance in MDL"
        },
        {
            "location": "/admin-guide/#how-to-find-mdl-user-credentials-to-login-to-herdshepherdbdsql",
            "text": "This section describes how to locate credentials required for endpoints when you have installed with EnableSSLAndAuth=true.   Note: A detailed description and a list of all default users and auth groups created for your stack can be found in the  manage OpenLdap section   Prerequisites   AWS Console Access of the AWS Account, where MDL is created  MDL Instance Name of the MDL stack  This is the parameter to the MDL Cloudformation Stack    EnableSSLAndAuth must be set to true while creating the stack   Steps   Login to AWS Console and navigate to SSM Parameter section (Refer  AWS Documentation )  User Name  Find the parameter: /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername on the console  Example :   /app/MDL/mdlstack/dev/LDAP/User/HerdAdminUsername    Get the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd  Example:  herd_admin_user      Password    Find the parameter: /app/MDL/${MDLInstanceName}/${Environment}/Password/HerdAdminPassword on the console  Example :   /app/MDL/mdlstack/dev/LDAP/Password/HerdAdminPassword    Get the Value for the above parameter, it is a 12-letter AlphaNumeric String which specifies the password for Herd/Bdsql/Shepherd, and it is a Secure String  Example:  ODMyOTdmZmE5      Use the above User name, and Password to login to Herd/Shepherd/Bdsql",
            "title": "How to find MDL User Credentials to login to Herd/Shepherd/Bdsql"
        },
        {
            "location": "/admin-guide/#how-tos-for-initial-creation-of-herd-metadata",
            "text": "Refer to  Herd Documentation  for details on the following:   Add Storage in Herd   Create New Namespace in Herd   Create New Business Object in Herd   Create New Format in Herd\n*  Register Data in Herd",
            "title": "How-tos for initial creation of Herd metadata"
        },
        {
            "location": "/admin-guide/#how-to-propagate-an-object-from-herd-to-metastor",
            "text": "Once Business Object is created in Herd, there is an additional step to include the Object in Metastor so that the Object is query-able in BDSQL. This step registers a Notification for the Object such that an Activity workflow is triggered for every Data Registration to this Object. This is a one time step for the Object. Once Object is registered for the Notification, all the future partitions registered for the Object will be available in BDSQL.  Here is the XML to add the Notification in Herd  objectNotification.xml  <businessObjectDataNotificationRegistrationCreateRequest>\n    <businessObjectDataNotificationRegistrationKey>\n        <namespace>MDL</namespace>\n        <notificationName>METASTOR_{{NAMESPACE}}_{{USAGE}}_{{OBJECT_NAME}}_{{FILE_FORMAT}}</notificationName>\n    </businessObjectDataNotificationRegistrationKey>\n    <businessObjectDataEventType>BUS_OBJCT_DATA_STTS_CHG</businessObjectDataEventType>\n    <businessObjectDataNotificationFilter>\n        <namespace>{{NAMESPACE}}</namespace>\n        <businessObjectDefinitionName>{{OBJECT_NAME}}</businessObjectDefinitionName>\n        <businessObjectFormatUsage>{{USAGE}}</businessObjectFormatUsage>\n        <businessObjectFormatFileType>{{FILE_FORMAT}}</businessObjectFormatFileType>\n        <newBusinessObjectDataStatus>VALID</newBusinessObjectDataStatus>\n        <storageName>S3_MANAGED</storageName>\n    </businessObjectDataNotificationFilter>\n    <jobActions>\n        <jobAction>\n            <namespace>MDL</namespace>\n            <jobName>addPartitionWorkflow</jobName>\n        </jobAction>\n    </jobActions>\n    <notificationRegistrationStatus>ENABLED</notificationRegistrationStatus>\n</businessObjectDataNotificationRegistrationCreateRequest>  NOTE: \nReplace {{NAMESPACE}} with the actual Namespace of the Object\nReplace {{USAGE}} with the actual Usage of the Object\nReplace {{OBJECT_NAME}} with the actual Object Name\nReplace {{FILE_FORMAT}} with the actual File Type for the Object  Here is the cURL syntax to add the Notification for the Object:  cURL Command  cat objectNotification.xml | curl -H \"Content-Type: application/xml\" -d @- -X POST http://HERD_DNS_NAME/herd-app/rest/notificationRegistrations/businessObjectDataNotificationRegistrations | xmllint --format -",
            "title": "How to propagate an 'Object' from Herd to Metastor"
        },
        {
            "location": "/admin-guide/#how-to-query-the-data-in-bdsql",
            "text": "Prerequisites   AWS Console Access of the AWS Account, where MDL is created  SQL Client with Presto Driver  Refer  Presto Documentation  for the JDBC Driver    MDL Instance Name of the MDL stack  This is the parameter to the MDL Cloudformation Stack     Steps   Login to AWS Console and navigate to Clouformation   Go to the Outputs Section of the MDL stack and Note down the value for the key \"BdsqlURL\"  This is the Bdsql JDBC URL  Example - jdbc: presto://mdl.poc.aws.mdldomain.com:443/hive    If (EnableSSLAndAuth == false)    Use the above URL with default user name \"hadoop\" and without password to login to BDSQL using SQL Client that supports Presto JDBC Driver    If (EnableSSLAndAuth == true)  Navigate to SSM Parameter section (Refer  AWS Documentation ) for Username and Password  User Name  Open Parameter /app/MDL/${MDLInstanceName}/${Environment}/LDAP/User/HerdAdminUsername  Example : /app/MDL/mdl/dev/LDAP/User/HerdAdminUsername  Get the Value for the above parameter. That value specifies the user name for Herd/Bdsql/Shepherd  Example: herd_admin    Password    Open Parameter /app/MDL/${MDLInstanceName}/${Environment}/LDAP/Password/HerdAdminPassword  Example : /app/MDL/mdl/dev/LDAP/Password/HerdAdminPassword  Get the Value for the above parameter. That value specifies the password for Herd/Bdsql/Shepherd, and this parameter is a Secure String  Example: ODMyOTdmZmE5    Use the above URL, User name, and Password to login to Bdsql using the SQL Client that supports Presto JDBC Driver",
            "title": "How To Query the Data in BDSQL"
        },
        {
            "location": "/admin-guide/#managing-openldap-users-and-groups",
            "text": "MDL provides a helper script to manage users and groups. The script is deployed onto the OpenLDAP server in /home/mdladmin/deploy/mdl/scripts/.  Usage and examples  # ./manageLdap.sh --help  Usage: manageLdap.sh --action [create_user|create_group|add_attribute|replace_attribute|add_user_to_group|remove_user_from_group|delete_user|delete_group|delete_object|show_directory] [--user name] [--password password] [--group name] [--dn distinguishedname]  Examples:    manageLdap.sh --action create_user --user userA --password password --email test@gmail.com --phone 1-234-567-8901\n  manageLdap.sh --action add_attribute --user userA --attribute telephoneNumber --value 1-234-567-8901\n  manageLdap.sh --action replace_attribute --user userA --attribute mail --value new@gmail.com\n  manageLdap.sh --action create_group --user userA --group groupA\n  manageLdap.sh --action add_user_to_group --user userB --group groupA\n  manageLdap.sh --action remove_user_from_group --user userB --group groupA\n  manageLdap.sh --action delete_object --dn \"cn=userA,ou=People,ou=Groups,dc=domain,dc=com\"\n  manageLdap.sh --action delete_user --user userA\n  manageLdap.sh --action delete_group --group groupA\n  manageLdap.sh --action show_directory\n  manageLdap.sh --help  Create new user:  \\# ./manageLdap.sh --action create_user --user userA --password password\n\\# ./manageLdap.sh --action create_user --user userB --password password --email test@gmail.com \n\\# ./manageLdap.sh --action create_user --user userC --password password --email test@gmail.com --phone 1-234-567-8901  adding new entry \"cn=$username,ou=People,dc=finra,dc=org\"  Create new group:  \\# ./manageLdap.sh --action create_group --user userA --group groupA  adding new entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"  Add user to group:  \\# ./manageLdap.sh --action add_user_to_group --user userA --group groupA  add member:\n        cn=userA,ou=People,dc=finra,dc=org\nmodifying entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"  Remove user from group:  \\# ./manageLdap.sh --action remove_user_from_group --user userA --group groupA  delete member:\n        cn=userA,ou=People,dc=finra,dc=org\nmodifying entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"  Delete user:  \\# ./manageLdap.sh --action delete_user --user userA  deleting entry \"cn=userA,ou=People,dc=finra,dc=org\"  Delete group:  \\# ./manageLdap.sh --action delete_group --group groupA  deleting entry \"cn=groupA,ou=Groups,dc=finra,dc=org\"  Delete object:  \\# ./manageLdap.sh --action delete_object --dn \"uid=userA,ou=People,dc=finra,dc=org\"  Add new user attribute:  \\# ./manageLdap.sh --action add_attribute --user userA --attribute telephoneNumber --value 1-234-567-8901  Modify existing user attribute value:  `\\# ./manageLdap.sh --action replace_attribute --user userA --attribute mail --value new@gmail.com  Show directory information:  \\# ./manageLdap.sh --action show_directory\n# extended LDIF\n#\n# LDAPv3\n# base <dc=mdl,dc=org> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# mdl.org\ndn: dc=mdl,dc=org\nobjectClass: dcObject\nobjectClass: organization\ndc: mdl.org\no: mdl\n\n# People, mdl.org\ndn: ou=People,dc=mdl,dc=org\nobjectClass: organizationalUnit\nou: People\n\n# Groups, mdl.org\ndn: ou=Groups,dc=mdl,dc=org\nobjectClass: organizationalUnit\nou: Groups\n\n# mdl_user, People, mdl.org\ndn: cn=mdl_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: mdl_user\ncn: mdl_user\nsn: null\nuserPassword:: e1NTSEF9SVhKL2NJb3Fmb2VkaVd5Tkp0U1BGN3EzOVpsdGk5RWE=\nuidNumber: 10002\ngidNumber: 1001\nhomeDirectory: /home/mdl_user\nmail: mdl_user@mdl.org\nloginShell: /bin/bash\n\n# sec_user, People, mdl.org\ndn: cn=sec_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: sec_user\ncn: sec_user\nsn: null\nuserPassword:: e1NTSEF9WVlaaGJxYmhGbTRwQ1JWaERRdUdVV3gyc3l4OHlPWUU=\nuidNumber: 10003\ngidNumber: 1001\nhomeDirectory: /home/sec_user\nmail: sec_user@mdl.org\nloginShell: /bin/bash\n\n# admin_user, People, mdl.org\ndn: cn=admin_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: admin_user\ncn: admin_user\nsn: null\nuserPassword:: e1NTSEF9VktJdkR2R1RLRENIOTRFK05FNXEwRUVEYWExdU5lQ0Q=\nuidNumber: 10004\ngidNumber: 1001\nhomeDirectory: /home/admin_user\nmail: admin_user@mdl.org\nloginShell: /bin/bash\n\n# ro_user, People, mdl.org\ndn: cn=ro_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: ro_user\ncn: ro_user\nsn: null\nuserPassword:: e1NTSEF9L2ZodFFBSUwwU1hFUUIwc2dzSVJiSFY3VW0wUlkySWg=\nuidNumber: 10005\ngidNumber: 1001\nhomeDirectory: /home/ro_user\nmail: ro_user@mdl.org\nloginShell: /bin/bash\n\n# basic_user, People, mdl.org\ndn: cn=basic_user,ou=People,dc=mdl,dc=org\nobjectClass: inetOrgPerson\nobjectClass: posixAccount\nuid: basic_user\ncn: basic_user\nsn: null\nuserPassword:\nuidNumber: 10006\ngidNumber: 1001\nhomeDirectory: /home/basic_user\nmail: basic_user@mdl.org\nloginShell: /bin/bash\n\n# APP_MDL_ACL_RO_herd_admin, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_herd_admin,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_admin\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_herd_ro, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_herd_ro,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_ro\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=basic_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_mdl_rw, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_mdl_rw,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_mdl_rw\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=mdl_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_ACL_RO_sec_market_data_rw, Groups, mdl.org\ndn: cn=APP_MDL_ACL_RO_sec_market_data_rw,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_sec_market_data_rw\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=sec_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# APP_MDL_Users, Groups, mdl.org\ndn: cn=APP_MDL_Users,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_Users\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=mdl_user,ou=People,dc=mdl,dc=org\nmember: cn=sec_user,ou=People,dc=mdl,dc=org\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=admin_user,ou=People,dc=mdl,dc=org\n\n# search result\nsearch: 2\nresult: 0 Success\n\n# numResponses: 15\n# numEntries: 14",
            "title": "Managing OpenLDAP Users and Groups"
        },
        {
            "location": "/admin-guide/#how-to-find-herd-mdl-logs-in-cloudwatch",
            "text": "Note: Logs are created in cloudwatch only when the log content is NOT empty; therefore, some\u00a0of the log streams mentioned below may not be found if there is no content in the logs.",
            "title": "How to find Herd-MDL logs in CloudWatch"
        },
        {
            "location": "/admin-guide/#logs-inside-customized-stack-log-group",
            "text": "Steps:   Login to the AWS Console and navigate to CloudWatch.  Click on 'Logs' in the left panel.  Filter Log Groups with your stack's cloudwatch log-group name.  where to find the stack's log group name? : it's the value for the parameter:  CloudWatchLogGroupName  in the outputs section of the MDL stack.(Example value:  logtest-MdlStack-10IBXFGDHF94M )    Click on above filtered stack log group to access it: inside this stack log group folder, you will find the logs saved as individual log streams.   Elastic Search Log Streams:           Description  Location(format)    CodeDeploy Logs  elasticsearch/codedeploy/*    Apache Logs  elasticsearch/apache/*    Elastic Search Logs  elasticsearch/*     Herd Log Streams:           Description  Location(format)    CodeDeploy Log  herd/codedeploy/*    Apache Logs  herd/apache/*    Tomcat Logs  herd/tomcat/*    Application Logs  herd/application/herd.log     Metastor Log Streams:           Description  Location(format)    CodeDeploy Logs  metastor/codedeploy/*     Bdsql Log Streams:           Description  Location(format)    EMR bootstrap Logs  /bdsql/bootstrap/*    EMR hadoop step Logs  /bdsql/hadoop/step/*     OpenLdap Log Streams:           Description  Location(format)    CodeDeploy Log  openldap/codedeploy/*",
            "title": "Logs inside customized stack log group"
        },
        {
            "location": "/admin-guide/#logs-with-aws-default-log-group",
            "text": "Rds Log Group:            Description  Location(format)  Example    Rds Log  /aws/rds/instance/{{RdsInstanceName}}/{{logType}}/{{RdsInstanceName}}  /aws/rds/instance/logtest-prod-metastor/error /aws/rds/instance/logtest-prod-metastor/general /aws/rds/instance/logtest-prod-metastor/audit /aws/rds/instance/logtest-prod-metastor/slowquery     Lambda Log Group:            Description  Location(format)  Example    Lambda Log  /aws/lambda/{{lambda_function_name}}  /aws/lambda/maggietest-ArtifactCopyLambdaFunction-IT8KBCH3IFQ4",
            "title": "Logs with aws default log group"
        },
        {
            "location": "/admin-guide/#herd-zero-downtime-upgrade",
            "text": "MDL offers a Blue/Green style rolling upgrade mechanism for HERD and guarantees the following:   New Herd version (App, DB) is active with one click  All Herd data is unchanged including metadata catalog and Herd configuration  Works with zero downtime  Upgrade is a blue/green style deployment and the relacement stack is smoke-tested before traffic is rerouted.     Note: Rolling upgrades currently support forward-compatibility only, this means that Herd can only be upgraded to a  newer  version.    How to perform a rolling upgrade  MDL includes a  Lambda function  which takes care of managing configurations and invoking a zero-downtime upgrade to Herd, \nbelow are steps on how to use the aforementioned Lambda function to perform a rolling upgrade:    Login to the AWS console and find the Upgrade-utility lambda function, it is named in the following format: \n      ${MDLInstanceName}-Herd-${Environment}-UPGRADE-HERD-LAMBDA-FUNCTION \n     eg.  MDL-Herd-dev-UPGRADE-HERD-LAMBDA-FUNCTION    Invoke the lambda function with the following event (payload):        {\n      \"RequestedVersion\": \"<desired-herd-version>\"\n    }  The lambda function can be invoked in the following ways:   Using the AWS CLI's  invoke-lambda  command.  From the AWS Lambda console,  manually invoke the Lambda function  using a test-event.  Using the  AWS-SDK .    \n   Try it out! \n   \n    \n  To try out a zero-downtime deployment, check out our  walk-through  tutorial which will guide you through a sample deployment using the AWS Lambda console.",
            "title": "HERD zero-downtime upgrade"
        },
        {
            "location": "/admin-guide/#troubleshooting",
            "text": "Problem  Cloud formation fails with error \"The maximum number of addresses has been reached\". This happens while creating VPC.  Cause  The account has reached the maximum number of EIPs. EIPs are needed while configuring VPC for NatGateway.  Solution   Recreate the MDL stack with option \"VPC=false\". In this case, user needs to create SSM parameters as per \"CreateVPC\" section in  Herd-MDL CFT Specifications      Increase the account level limit for EIPs so that NatGateway doesn't fail while allocating EIP in the account    Problem  Cloud formation fails with error \"Already exists in stack\". This happens while creating AWS resources.  Cause  There is already another stack with the same MDLInstanceName in the same AWS account in the same region .   Solution   Delete the existing stack with same \"MDLInstanceName\" and then re-try creating the new stack  Enter different \"MDLInstanceName\" for the new stack so that this does not collide with existing resources    Problem  Code Deploy fails with error \"HEALTH_CONSTRAINTS\". This happens with ElasticSearch/Herd/Metastor EC2 instances.  Cause  This seems to be an AWS issue that occurs occasionally. Under certain cases, CodeDeploy is unable to find the EC2 Instances created by AutoScaling group.   Solution   Restart the Stack Creation process",
            "title": "Troubleshooting"
        },
        {
            "location": "/admin-guide/#known-issues",
            "text": "Emptying S3 buckets manually before deleting the stack   S3 buckets need to be emptied before deleting the stack. Otherwise, stack deletion fails. This will be fixed in future releases such that MDL takes care of emptying the buckets when Stack Deletion is triggered.   Deleting SSM parameters manually before deleting the stack   Some of the SSM parameters need to be deleted before deleting the stack. Note that Stack Deletion will not fail. However, these SSM parameters will be stale, if they are not cleaned-up. Search for all the SSM parameters with \"MDLInstanceName\" and delete the same for clean-up. This will be fixed in future releases such that MDL takes care of deleting all the SSM parameters, when Stack Deletion is triggered.   Deleting RDS Snapshots   AWS account has limits for number of RDS snapshots stored. MDL by default stores the RDS snapshot before deleting the same. If the number of RDS snapshots reach the AWS account limit, then MDL cannot delete the stack due to RDS snapshot issue. In this case, the user either needs to clean-up existing RDS snapshots or increase the RDS snapshot limit for the AWS account.",
            "title": "Known Issues"
        },
        {
            "location": "/tech-overview/",
            "text": "Herd-MDL Technical Overview\n\u00b6\n\n\nHerd-MDL Architecture\n\u00b6\n\n\n\n\nMDL consists of four major components.\n\n\nHerd\n\u00b6\n\n\n\n\nHerd maintains the metadata information about each object registered/tracked by MDL. \n\n\nHerd ALB enables the end user to connect to Herd web server. Note that the MDL components are hosted in private subnets for security reasons, and the ALBs enable users to interact with each component.\n\n\nHerd has a postgres database which stores all the metadata information\n\n\nHerd uses OpenLDAP for authentication/authorization of end users\n\n\nHerd can be deployed with SSL or without SSL support\n\n\nEnd user can access Herd in three ways\n\n\nREST endpoints - Herd provides REST endpoints which can be used to interact with Herd\n\n\nUser may use any of the rest clients available to them like \nPostMan\n or \nAdvanced Rest Client\n\n\n\n\n\n\nSDK - Herd provides a Java SDK in case user needs to interact with Herd through Java applications\n\n\nCommand line - End user can use \ncURL\n command to interact with Herd end points              \n\n\n\n\n\n\n\n\nHerd-UI\n\u00b6\n\n\n\n\nHerd UI provides the user interface for the end user to retrieve details about the objects tracked by Herd\n\n\nCloudfront is used to render the angular pages for UI\n\n\nHerd-UI supports both SSL or Plaintext deployments\n\n\n\n\nMetastor\n\u00b6\n\n\n\n\nMetastor shares the Hive metastore with Bdsql Presto cluster\n\n\nMetastor takes care of updating Hive metastore for the objects tracked in MDL\n\n\nAs soon as Hive metastore is updated, the objects are available in Bdsql Presto cluster for querying, as they share the same Hive metastore\n\n\nMetastor creates Hive external tables pointing to the S3 location of data objects/partitions\n\n\nMetastor uses notification feature (Activiti) from Herd for data upload event notifications\n\n\n\n\nBig Data SQL (BDSQL)\n\u00b6\n\n\n\n\nBDSQL uses EMR Presto cluster which is extended to user through JDBC end point\n\n\nBDSQL takes care of authorization for the objects being queried through Presto\n\n\nBDSQL uses OpenLDAP for authentication/authorization\n\n\nBDSQL supports both SSL and Plaintext deployments\n\n\n\n\nHerd-MDL Product Install\n\u00b6\n\n\nHerd-MDL makes extensive use of CloudFormation to create AWS resources and to install and configure the Herd-MDL product. Instructions are available to perform \nBasic\n and \nAdvanced\n installations. The sections below include information to help understand the details of the product install. And feel free to browse the source code as well - start with the \ntop-level Herd-MDL CloudFormation install template\n and dig!\n\n\nFlow Diagram\n\u00b6\n\n\nThis section describes the nested CloudFormation templates and flow between. The layers of the flow are as follows:\n\n\n\n\nMDL - Installation template\n\n\nWrapper template that takes in various general and specific parameters\n\n\nCalls prerequisite stacks conditionally depending on parameters\n\n\nCalls MDL stacks\n\n\n\n\n\n\nMDL - Prerequisites primary installation templates\n\n\nConditionally creates required AWS resources based on general parameters\n\n\nMDL can create all required AWS resources -- or for 'Advanced' installations, it can refer to externally created AWS resources \n\n\nNothing specific to MDL product is configured in this layer - just AWS resources that are \nNOT\n EC2, RDS, ALB, EMR\n\n\n\n\n\n\nMDL - Prerequisites secondary installation templates   \n\n\nCreates required MDL resources: RDS for Herd, Metastore\n\n\nCreates Herd-UI static asset deployment\n\n\n\n\n\n\nMDL - Product installation templates\n\n\nElasticSearch - install and configure ElasticSearch for use by Herd\n\n\nHerd Webserver - install Herd and create endpoint for REST APIs\n\n\nMetastor Server - install Metastore, integrate with Herd\n\n\nBdsql - install BDSQL, integrate with Metastore, create JDBC endpoint\n\n\n\n\n\n\n\n\n\n\nResources Diagram\n\u00b6\n\n\nThis diagram shows all the resources created during Herd-MDL Product Install:",
            "title": "Technical Overview"
        },
        {
            "location": "/tech-overview/#herd-mdl-technical-overview",
            "text": "",
            "title": "Herd-MDL Technical Overview"
        },
        {
            "location": "/tech-overview/#herd-mdl-architecture",
            "text": "MDL consists of four major components.",
            "title": "Herd-MDL Architecture"
        },
        {
            "location": "/tech-overview/#herd",
            "text": "Herd maintains the metadata information about each object registered/tracked by MDL.   Herd ALB enables the end user to connect to Herd web server. Note that the MDL components are hosted in private subnets for security reasons, and the ALBs enable users to interact with each component.  Herd has a postgres database which stores all the metadata information  Herd uses OpenLDAP for authentication/authorization of end users  Herd can be deployed with SSL or without SSL support  End user can access Herd in three ways  REST endpoints - Herd provides REST endpoints which can be used to interact with Herd  User may use any of the rest clients available to them like  PostMan  or  Advanced Rest Client    SDK - Herd provides a Java SDK in case user needs to interact with Herd through Java applications  Command line - End user can use  cURL  command to interact with Herd end points",
            "title": "Herd"
        },
        {
            "location": "/tech-overview/#herd-ui",
            "text": "Herd UI provides the user interface for the end user to retrieve details about the objects tracked by Herd  Cloudfront is used to render the angular pages for UI  Herd-UI supports both SSL or Plaintext deployments",
            "title": "Herd-UI"
        },
        {
            "location": "/tech-overview/#metastor",
            "text": "Metastor shares the Hive metastore with Bdsql Presto cluster  Metastor takes care of updating Hive metastore for the objects tracked in MDL  As soon as Hive metastore is updated, the objects are available in Bdsql Presto cluster for querying, as they share the same Hive metastore  Metastor creates Hive external tables pointing to the S3 location of data objects/partitions  Metastor uses notification feature (Activiti) from Herd for data upload event notifications",
            "title": "Metastor"
        },
        {
            "location": "/tech-overview/#big-data-sql-bdsql",
            "text": "BDSQL uses EMR Presto cluster which is extended to user through JDBC end point  BDSQL takes care of authorization for the objects being queried through Presto  BDSQL uses OpenLDAP for authentication/authorization  BDSQL supports both SSL and Plaintext deployments",
            "title": "Big Data SQL (BDSQL)"
        },
        {
            "location": "/tech-overview/#herd-mdl-product-install",
            "text": "Herd-MDL makes extensive use of CloudFormation to create AWS resources and to install and configure the Herd-MDL product. Instructions are available to perform  Basic  and  Advanced  installations. The sections below include information to help understand the details of the product install. And feel free to browse the source code as well - start with the  top-level Herd-MDL CloudFormation install template  and dig!",
            "title": "Herd-MDL Product Install"
        },
        {
            "location": "/tech-overview/#flow-diagram",
            "text": "This section describes the nested CloudFormation templates and flow between. The layers of the flow are as follows:   MDL - Installation template  Wrapper template that takes in various general and specific parameters  Calls prerequisite stacks conditionally depending on parameters  Calls MDL stacks    MDL - Prerequisites primary installation templates  Conditionally creates required AWS resources based on general parameters  MDL can create all required AWS resources -- or for 'Advanced' installations, it can refer to externally created AWS resources   Nothing specific to MDL product is configured in this layer - just AWS resources that are  NOT  EC2, RDS, ALB, EMR    MDL - Prerequisites secondary installation templates     Creates required MDL resources: RDS for Herd, Metastore  Creates Herd-UI static asset deployment    MDL - Product installation templates  ElasticSearch - install and configure ElasticSearch for use by Herd  Herd Webserver - install Herd and create endpoint for REST APIs  Metastor Server - install Metastore, integrate with Herd  Bdsql - install BDSQL, integrate with Metastore, create JDBC endpoint",
            "title": "Flow Diagram"
        },
        {
            "location": "/tech-overview/#resources-diagram",
            "text": "This diagram shows all the resources created during Herd-MDL Product Install:",
            "title": "Resources Diagram"
        },
        {
            "location": "/ldap-tree/",
            "text": "MDL OpenLDAP organization\n\u00b6\n\n\nMDL uses an OpenLDAP installation to manage User authentication and authorization across all its components.\n\n\nThere are 2 main Organizational Units (\nOU\ns) which are used:\n\n\n\n\nou=People\n: Each individual user is a member of this organizational unit. These are what employees, users or service accounts are represented with.\n\n\nou=Groups\n: Users may be part of 'auth-groups' (also known as AD groups) which are members of this organizational unit. This helps grouping users together\n    and applying cross-cutting policies or privileges across users which are members of a given group.\n\n\n\n\nAttributes on MDL LDAP objects\n\u00b6\n\n\n\n\nUser attributes\n: List of attributes with example values which are defined for objects of type User:\n\n\n\n\n dn: cn=sec_user,ou=People,dc=mdl,dc=org\n objectClass: inetOrgPerson\n objectClass: posixAccount\n uid: sec_user\n cn: sec_user\n sn: null\n userPassword:: e1NTSEF9WVlaaGJxYmhGbTRwQ1JWaERRdUdVV3gyc3l4OHlPWUU=\n uidNumber: 10003\n gidNumber: 1001\n homeDirectory: /home/sec_user\n mail: sec_user@mdl.org\n loginShell: /bin/bash\n\n\n\n\n\n\nGroup attributes\n: List of attributes with example values which are defined for objects of type Group:\n\n\n\n\ndn: cn=APP_MDL_ACL_RO_herd_ro,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_ro\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=basic_user,ou=People,dc=mdl,dc=org\n\n\n\n\nmemberOf Overlay\n\u00b6\n\n\nHerd uses \n'memberOf'\n information contained in each request's HTTP headers to determine the auth-groups a user is part of and \nsubsequently allows/blocks actions which are pre-defined in a \nrole-to-security-function\n mapping.\n\n\nThis overlay is installed and enabled in MDL's OpenLDAP installation. Please note that the memberOf attribute is an operational attribute, and it is requested explicitly\nby the Apache webserver which reverse-proxies to the Herd app.\n\n\nLDAP directory tree\n\u00b6\n\n\nA pictorial representation of MDL's LDAP directory structure:",
            "title": "Users and Groups"
        },
        {
            "location": "/ldap-tree/#mdl-openldap-organization",
            "text": "MDL uses an OpenLDAP installation to manage User authentication and authorization across all its components.  There are 2 main Organizational Units ( OU s) which are used:   ou=People : Each individual user is a member of this organizational unit. These are what employees, users or service accounts are represented with.  ou=Groups : Users may be part of 'auth-groups' (also known as AD groups) which are members of this organizational unit. This helps grouping users together\n    and applying cross-cutting policies or privileges across users which are members of a given group.",
            "title": "MDL OpenLDAP organization"
        },
        {
            "location": "/ldap-tree/#attributes-on-mdl-ldap-objects",
            "text": "User attributes : List of attributes with example values which are defined for objects of type User:    dn: cn=sec_user,ou=People,dc=mdl,dc=org\n objectClass: inetOrgPerson\n objectClass: posixAccount\n uid: sec_user\n cn: sec_user\n sn: null\n userPassword:: e1NTSEF9WVlaaGJxYmhGbTRwQ1JWaERRdUdVV3gyc3l4OHlPWUU=\n uidNumber: 10003\n gidNumber: 1001\n homeDirectory: /home/sec_user\n mail: sec_user@mdl.org\n loginShell: /bin/bash   Group attributes : List of attributes with example values which are defined for objects of type Group:   dn: cn=APP_MDL_ACL_RO_herd_ro,ou=Groups,dc=mdl,dc=org\ncn: APP_MDL_ACL_RO_herd_ro\nobjectClass: top\nobjectClass: groupOfNames\nmember: cn=ro_user,ou=People,dc=mdl,dc=org\nmember: cn=basic_user,ou=People,dc=mdl,dc=org",
            "title": "Attributes on MDL LDAP objects"
        },
        {
            "location": "/ldap-tree/#memberof-overlay",
            "text": "Herd uses  'memberOf'  information contained in each request's HTTP headers to determine the auth-groups a user is part of and \nsubsequently allows/blocks actions which are pre-defined in a  role-to-security-function  mapping.  This overlay is installed and enabled in MDL's OpenLDAP installation. Please note that the memberOf attribute is an operational attribute, and it is requested explicitly\nby the Apache webserver which reverse-proxies to the Herd app.",
            "title": "memberOf Overlay"
        },
        {
            "location": "/ldap-tree/#ldap-directory-tree",
            "text": "A pictorial representation of MDL's LDAP directory structure:",
            "title": "LDAP directory tree"
        },
        {
            "location": "/authorizations-overview/",
            "text": "RBAC, Authorizations and Security in MDL\n\u00b6\n\n\nRole-based access control (\nRBAC\n) in Herd is managed in the following two ways:\n\n\n\n\n\n\nLDAP based auth-groups\n: Leverages a delegation model whereby Herd is provided information via the HTTP header on the identity of the user and the\n   access groups they are part of. Users are assigned auth-groups as part of the authentication process and Herd maps auth-groups to REST end points to provide RBAC.\n\n\n\n\n\n\nNamespace-based permissions\n: A more granular security model where operations are authorized at the Namespace level. All access to data in Herd is controlled by the calling user's authorization to data in that Namespace.\n   This authorization mapping in maintained in Herd and is readable/modifiable via CRUD end-points.  \n\n\n\n\n\n\nAuth-Groups\n\u00b6\n\n\nThere are 4 auth groups created in the MDL stack's OpenLDAP instance, all of these are mapped to REST end-points with the 'role(s)' they are assigned in the Herd DataBase and the app \nperforms a look-up when authorizing a user based off of these roles. \n\n\n\n\n\n\n\n\nAuth Group\n\n\nMembers\n\n\nAuthorizations in Herd\n\n\n\n\n\n\n\n\n\n\nAPP_MDL_ACL_RO_herd_admin\n\n\nadmin_user\n\n\nRead/Write/Admin Services\n\n\n\n\n\n\nAPP_MDL_ACL_RO_mdl_rw\n\n\nmdl_user\n\n\nRead/Write Services\n\n\n\n\n\n\nAPP_MDL_ACL_RO_sec_market_data_rw\n\n\nsec_user\n\n\nRead/Write Services\n\n\n\n\n\n\nAPP_MDL_ACL_RO_herd_ro\n\n\nro_user\n\n\nRead Services\n\n\n\n\n\n\n\n\nUsers and authorizations\n\u00b6\n\n\nThere are 5 users which get created in your MDL stack for RBAC demonstration purposes - the table below lists each of those users and their respective authorizations. \nPlease note that Users can be added/deleted/modified by using the \nmanageLdap.sh\n script as descibed in the \nmanage OpenLdap\n section.                             \n\n\n\n\n\n\n\n\nUser Id\n\n\nAuthorizations in Herd\n\n\nAuthorizations in BDSQL\n\n\nSSM Parameter* name for Password\n\n\n\n\n\n\n\n\n\n\nadmin_user\n\n\nRead/Write/Admin Services \n All Namespaces\n\n\nAll data schemas \n Read/Write own user schema\n\n\n{ssm-prefix}/HerdAdminPassword\n\n\n\n\n\n\nmdl_user\n\n\nRead/Write Services \n MDL Namespace\n\n\nRead MDL schema \n Read/Write own user schema\n\n\n{ssm-prefix}/HerdMdlPassword\n\n\n\n\n\n\nsec_user\n\n\nRead/Write Services \n All Namespaces\n\n\nRead SEC_MARKET_DATA schema \n Read/Write own user schema\n\n\n{ssm-prefix}/HerdSecPassword\n\n\n\n\n\n\nro_user\n\n\nRead/Write Services \n All Namespaces\n\n\nRead MDL schema \n Read SEC_MARKET_DATA schema \n Read/Write own user schema\n\n\n{ssm-prefix}/HerdRoUserPassword\n\n\n\n\n\n\nbasic_user\n\n\nRead open REST services \n No Namespaces\n\n\nNot authorized to use BDSQL\n\n\n{ssm-prefix}/HerdBasicUserPassword\n\n\n\n\n\n\n\n\n*replace \n{ssm-prefix}\n in the password param-names with \n/app/MDL/${MDLInstanceName}/${Environment}/LDAP/Password\n \n\n\nHERD - a unified access-control provider\n\u00b6\n\n\nHERD provides centralized access-control on data at the namespace level across the MDL ecosystem. All access to data in Herd is controlled by the calling user's authorization to data in that Namespace, \nthis applies to all access points across MDL: HERD REST APIs, HERD-UI and BDSQL. \n\n\nNamespace level permissions in HERD\n\u00b6\n\n\n\n\nA user may be granted permissions to READ, WRITE, EXECUTE, or GRANT data in a set of Namespaces. \n\n\nThese authorizations restrict access to all operations including:\n      Meta-data services like reading and writing Business Object Definitions, Business Object Formats, and Business Object Data in a given Namespace\n      Other services such as Clusters, Jobs, and Notifications owned by a given Namespace.\n\n\nIf not authorized, the services will return an appropriate HTTP error response such as 403 Forbidden.\n\n\n\n\nNamespace level permissions in BDSQL\n\u00b6\n\n\n\n\n\n\nAny user which has READ permissions to a Namespace in HERD translates to them having SELECT privileges on \nall\n tables under the corresponding schema for that Namespace in BDSQL.\n\n\n\n\nNote: Users \nmust\n have READ permissions to a Namespace to be granted SELECT privilege in BDSQL, there is no implicit permission-mapping.\n\n\n\n\n\n\n\n\nSELECT privileges are granted/revoked automatically in BDSQL when the corresponding namespace-permission is modified in HERD, this normally takes only a couple of minutes.\n\n\n\n\nAny namespace which has \nglobal-read\n in HERD results in \nall\n users having SELECT privilege to its corresponding schema (and all tables) in BDSQL.",
            "title": "Authorizations and Security"
        },
        {
            "location": "/authorizations-overview/#rbac-authorizations-and-security-in-mdl",
            "text": "Role-based access control ( RBAC ) in Herd is managed in the following two ways:    LDAP based auth-groups : Leverages a delegation model whereby Herd is provided information via the HTTP header on the identity of the user and the\n   access groups they are part of. Users are assigned auth-groups as part of the authentication process and Herd maps auth-groups to REST end points to provide RBAC.    Namespace-based permissions : A more granular security model where operations are authorized at the Namespace level. All access to data in Herd is controlled by the calling user's authorization to data in that Namespace.\n   This authorization mapping in maintained in Herd and is readable/modifiable via CRUD end-points.",
            "title": "RBAC, Authorizations and Security in MDL"
        },
        {
            "location": "/authorizations-overview/#auth-groups",
            "text": "There are 4 auth groups created in the MDL stack's OpenLDAP instance, all of these are mapped to REST end-points with the 'role(s)' they are assigned in the Herd DataBase and the app \nperforms a look-up when authorizing a user based off of these roles.      Auth Group  Members  Authorizations in Herd      APP_MDL_ACL_RO_herd_admin  admin_user  Read/Write/Admin Services    APP_MDL_ACL_RO_mdl_rw  mdl_user  Read/Write Services    APP_MDL_ACL_RO_sec_market_data_rw  sec_user  Read/Write Services    APP_MDL_ACL_RO_herd_ro  ro_user  Read Services",
            "title": "Auth-Groups"
        },
        {
            "location": "/authorizations-overview/#users-and-authorizations",
            "text": "There are 5 users which get created in your MDL stack for RBAC demonstration purposes - the table below lists each of those users and their respective authorizations. \nPlease note that Users can be added/deleted/modified by using the  manageLdap.sh  script as descibed in the  manage OpenLdap  section.                                  User Id  Authorizations in Herd  Authorizations in BDSQL  SSM Parameter* name for Password      admin_user  Read/Write/Admin Services   All Namespaces  All data schemas   Read/Write own user schema  {ssm-prefix}/HerdAdminPassword    mdl_user  Read/Write Services   MDL Namespace  Read MDL schema   Read/Write own user schema  {ssm-prefix}/HerdMdlPassword    sec_user  Read/Write Services   All Namespaces  Read SEC_MARKET_DATA schema   Read/Write own user schema  {ssm-prefix}/HerdSecPassword    ro_user  Read/Write Services   All Namespaces  Read MDL schema   Read SEC_MARKET_DATA schema   Read/Write own user schema  {ssm-prefix}/HerdRoUserPassword    basic_user  Read open REST services   No Namespaces  Not authorized to use BDSQL  {ssm-prefix}/HerdBasicUserPassword     *replace  {ssm-prefix}  in the password param-names with  /app/MDL/${MDLInstanceName}/${Environment}/LDAP/Password",
            "title": "Users and authorizations"
        },
        {
            "location": "/authorizations-overview/#herd-a-unified-access-control-provider",
            "text": "HERD provides centralized access-control on data at the namespace level across the MDL ecosystem. All access to data in Herd is controlled by the calling user's authorization to data in that Namespace, \nthis applies to all access points across MDL: HERD REST APIs, HERD-UI and BDSQL.",
            "title": "HERD - a unified access-control provider"
        },
        {
            "location": "/authorizations-overview/#namespace-level-permissions-in-herd",
            "text": "A user may be granted permissions to READ, WRITE, EXECUTE, or GRANT data in a set of Namespaces.   These authorizations restrict access to all operations including:\n      Meta-data services like reading and writing Business Object Definitions, Business Object Formats, and Business Object Data in a given Namespace\n      Other services such as Clusters, Jobs, and Notifications owned by a given Namespace.  If not authorized, the services will return an appropriate HTTP error response such as 403 Forbidden.",
            "title": "Namespace level permissions in HERD"
        },
        {
            "location": "/authorizations-overview/#namespace-level-permissions-in-bdsql",
            "text": "Any user which has READ permissions to a Namespace in HERD translates to them having SELECT privileges on  all  tables under the corresponding schema for that Namespace in BDSQL.   Note: Users  must  have READ permissions to a Namespace to be granted SELECT privilege in BDSQL, there is no implicit permission-mapping.     SELECT privileges are granted/revoked automatically in BDSQL when the corresponding namespace-permission is modified in HERD, this normally takes only a couple of minutes.   Any namespace which has  global-read  in HERD results in  all  users having SELECT privilege to its corresponding schema (and all tables) in BDSQL.",
            "title": "Namespace level permissions in BDSQL"
        },
        {
            "location": "/advanced-install/",
            "text": "Herd-MDL Advanced Install\n\u00b6\n\n\nUse these Advanced Installation instructions if your organization requires that certain AWS resources such as IAM Roles, Security Groups, etc. are created outside Herd-MDL automated install. The Advanced Install allows for optional creation of AWS resources through other mechanisms and provides detailed specifications on what to create and how to reference resources created outside Herd-MDL automated install.\n\n\nSee \nBasic Install\n for an easy, turnkey installation of Herd-MDL. \n\n\nPrerequisites\n\u00b6\n\n\nThese are prerequisites that are necessary for installing MDL components for Advanced Installation Type\n\n\n\n\nAn \nAWS\n account \n\n\nUser who has power user access as per this policy - \narn:aws:iam::aws:policy/PowerUserAccess\n\n\nMDL deployment creates various AWS resources like Cloudformation, EC2, IAM, Security Groups, S3 etc, and power user access is needed for creating these resources\n\n\nSample IAM policy for \nPowerUserAccess\n\n\n\n\n\n\nDomain - if (EnableSSLAndAuth == true)\n\n\nUser account needs to own a Domain for using with Route53 record set for public end points created by MDL\n\n\nRefer \nAWS documentation\n for setting up a new Domain\n\n\nDomain must be owned by User in case \"EnableSSLAndAuth\" parameter is specified\n\n\n\n\n\n\nCertificate in ACM with \nWildcard Domain Name\n - if (EnableSSLAndAuth == true)\n\n\nThe Certificate should match any first level subdomain (Wildcard character supports this)\n\n\nFormat - \n*.domain\n\n\nExample: \n*.example.com\n\n\n\n\n\n\nMDL prefixes corresponding first level subdomain (Example: \nmdlHerd.example.com\n, \nmdlShepherd.example.com\n, and \nmdlBdsql.example.com\n)\n\n\nCertificate in ACM needs to exist in the AWS account in case \"EnableSSLAndAuth\" parameter is specified\n\n\n\n\n\n\nHosted Zone in Route53 - if (EnableSSLAndAuth == true)\n\n\nMDL adds a record set for Hosted Zone in Route53 to associate the DNS information with Domain Name\n\n\nMDL creates three record sets (Example: \nmdlHerd.example.com\n, \nmdlShepherd.example.com\n, and \nmdlBdsql.example.com\n)\n\n\nHosted Zone needs to exist in the AWS account in case \"EnableSSLAndAuth\" parameter is specified\n\n\n\n\n\n\nThere are some conditional parameters for MDL, which let the user to use existing resources instead of creating them as part of MDL. In these case, corresponding SSM parameters need to be created before creating MDL stack. Following are the conditional resource types in MDL.\n\n\nVPC/Subnets - if (CreateVPC == false)\n\n\nRefer to \nCreateVPC section\n and create SSM parameters in case existing VPC/Subnets need to be used\n\n\n\n\n\n\nS3 - if (CreateS3Buckets == false)\n\n\nRefer  to \nCreateS3Buckets section\n and create SSM parameters in case existing S3 buckets need to be used\n\n\n\n\n\n\nIAM - if (CreateIAMRoles == false)\n\n\nRefer to \nCreateIAMRoles section\n and create SSM parameters in case existing IAM roles need to be used\n\n\n\n\n\n\nRDS - if (CreateRDSInstances == false)\n\n\nRefer to \nCreateRDSInstances section\n and create SSM parameters in case existing RDS instances need to be used\n\n\n\n\n\n\nSecurity Groups - if (CreateSecurityGroups == false)\n\n\nRefer to \nCreateSecurityGroups section\n and create SSM parameters in case existing Security Groups need to be used\n\n\n\n\n\n\nSQS - if (CreateSQS == false)\n\n\nRefer to \nCreateSQS section\n and create SSM parameters in case existing SQS need to be used\n\n\n\n\n\n\nOpenLDAP - if (CreateOpenLDAP  == false)\n\n\nRefer to \nCreateOpenLDAP section\n and create SSM parameters in case existing OpenLDAP need to be used\n\n\n\n\n\n\nKeyPair - if (CreateKeypair == false)\n\n\nRefer to \nCreateKeypair section\n and create SSM parameters in case existing KeyPair needs to be used\n\n\n\n\n\n\nCloudfront Distribution - if (CreateCloudFrontDistribution == false)\n\n\nRefer to \n CreateCloudFrontDistribution section\n and create SSM parameters in case existing Cloudfront needs to be used\n\n\n\n\n\n\n\n\n\n\n\n\nSteps\n\u00b6\n\n\nInstallation is automated through Cloudformation templates in AWS. The stack creates all the resources required by MDL application. This roughly takes a couple of hours to create all the resources needed for MDL. A stack can be created using AWS console, or AWS CLI, or AWS SDK. Refer \nAWS documentation\n for creating stacks using Cloudformation templates. In this section, steps are described for creating the stack using AWS console.\n\n\n\n\nDownload the attached \ninstallMDL.yml\n file to local file system\n\n\nLogin to AWS console and navigate to \nCloudformation\n\n\nCreate the stack using option \"Upload a template to Amazon S3\" - Refer \nAWS documentation\n for selecting a local template\n\n\nChoose the installMDL.yml file from local file system\n\n\n\n\nIn the next page, \n\n\n\n\nEnter the values for \nStack Name\n  \n\n\nA stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.\n\n\n\n\n\n\nRefer to \nMDL CFT Specifications\n and change the required parameters for the chosen installation type  \n\n\n\n\n\n\n\n\nIn the next page, specify the stack options as per \nAWS documentation\n\n\n\n\nReview the parameters, and create the stack as per \nAWS documentation\n\n\nWait for \"CREATE_COMPLETE\" on the stack and all nested stacks.\n\n\n\n\nCFT Specifications\n\u00b6\n\n\nDeployment Parameters\n\u00b6\n\n\nThese parameters are related to which version and components to deploy.\n\n\nReleaseVersion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nReleaseVersion\n\n\n\n\n\n\nDescription\n\n\nRelease version of MDL application to install\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\n1.4.0 (latest release)\n\n\n\n\n\n\nAllowed Values\n\n\n1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0\n\n\n\n\n\n\n\n\nDeployComponents\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDeployComponents\n\n\n\n\n\n\nDescription\n\n\nMDL Component to deploy\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nAll\n\n\n\n\n\n\nAllowed Values\n\n\nParameter Value\nDescription\nAll\nInstall all the available Components\nPrereqs Only\nInstall only the pre-requirements without any EC2\nHerd\nInstall Prereqs then Herd and its dependencies\nMetastor\nInstall Prereqs, Herd, Metastor and all their depencencies\n\n\n\n\n\n\n\n\nGeneric Parameters\n\u00b6\n\n\nThese parameters define the basic parameters used across various components\n\n\nImageId\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nImageId\n\n\n\n\n\n\nDescription\n\n\nAMI id for the EC2 instances. Note that OSS user may use any other AMI which is similar to amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2. However, there could be some issues in terms of package installation/availability, while using a different AMI. So, it is user's responsibility to make sure provided AMI has all the packages like amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nami-1853ac65\n\n\n\n\n\n\n\n\nMDLInstanceName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMDLInstanceName\n\n\n\n\n\n\nDescription\n\n\nName of the Application being installed\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nmdl\n\n\n\n\n\n\nAllowed Pattern\n\n\n[a-z0-9_]*\n\n\n\n\n\n\nMax Length\n\n\n15\n\n\n\n\n\n\n\n\nEnvironment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nEnvironment\n\n\n\n\n\n\nDescription\n\n\nEnvironment name for MDL\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nprod\n\n\n\n\n\n\nAllowed Pattern\n\n\n[a-z0-9_]*\n\n\n\n\n\n\nMax Length\n\n\n4\n\n\n\n\n\n\n\n\nCloudWatchRetentionDays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCloudWatchRetentionDays\n\n\n\n\n\n\nDescription\n\n\nRetention days for CloudWatch logs\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\n90\n\n\n\n\n\n\n\n\nConditional Parameters\n\u00b6\n\n\nThese are conditional parameters to decide whether MDL creates certain resources or MDL uses existing resources. In each case where a parameter is false, SSM parameters must be present that allow MDL to reference the resources that have been created prior to running the Herd-MDL automated install. \n\n\nCreateS3Buckets\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateS3Buckets\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create S3 buckets or to use existing s3 buckets. User needs to fill the SSM parameters as per below information in case of using existing s3 buckets.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nHerd Bucket\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/Herd\n/app/MDL/mdl/prod/S3/Herd\n{{BucketName}}\n123456789012-mdl-herd-prod\nMDL Bucket\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/MDL\napp/MDL/mdl/prod/S3/MDL\n{{BucketName}}\n123456789012-mdl-mdl-prod \nShepherd Bucket\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/Shepherd\napp/MDL/mdl/prod/S3/Shepherd\n{{BucketName}}\n123456789012-mdl-shepherd-prod \n\n\n\n\n\n\n\n\nCreateIAMRoles\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateIAMRoles\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create IAM roles or to use existing IAM roles. User needs to fill the SSM parameters as per below information in case of using existing IAM roles.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nEMR Service Role \nPermissions Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLEMRServiceRole\n/app/MDL/mdl/prod/IAM/MDLEMRServiceRole\n{{EMRRoleName}}\nAPP_mdl_EMR\nMDL Instance Profile for EC2instances\nPermissions Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLInstanceProfile\n/app/MDL/mdl/prod/IAM/MDLInstanceProfile\n{{MDLInstanceProfileName}}\nmdl-MDLInstanceProfile\nMDL Instance Role for EC2 instances\nPermissions Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLInstanceRole\n/app/MDL/mdl/prod/IAM/MDLInstanceRole\n{{MDLInstanceProfileARN}}\narn:aws:iam::123456789012:role/APP_mdl_Instance\nCode Deployment Role for EC2\nPermissions Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLServerDeploymentRole\n/app/MDL/mdl/prod/IAM/MDLServerDeploymentRole\n{{MDLServerDeploymentRoleARN}}\narn:aws:iam::123456789012:role/APP_mdl_Deployment\n\n\n\n\n\n\n\n\nCreateRDSInstances\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateRDSInstances\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create RDS or to use existing RDS. User needs to fill the SSM parameters as per below information in case of using existing RDS.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nHerd RDS DB Host Name\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/RDS/HerdDBHostName\n/app/MDL/mdl/prod/RDS/HerdDBHostName\n{{DBHostName}}\nmdl-prod-herd.ctrfbf70ykmy.us-east-1.rds.amazonaws.com\nMetastor RDS DB HostName\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/RDS/MetastorDBHostName\n/app/MDL/mdl/prod/RDS/MetastorDBHostName\n{{DBHostName}}\nmdl-prod-metastor.ctrfbf70ykmy.us-east-1.rds.amazonaws.com\nPassword for Herd RDS Master Account\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/HERD/RDS/masterAccount\n/app/MDL/mdl/dev/HERD/RDS/masterAccount\n{{Password}}-This is a Secure String\nwbPAEl55nd2lF2H5\nPassword for Metastor RDS Master Account\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/METASTOR/RDS/hiveAccount\n/app/MDL/mdl/dev/METASTOR/RDS/hiveAccount\n{{Password}}-This is a Secure String\nwvFST98TFO7uCwtR\n\n\n\n\n\n\n\n\nCreateSecurityGroups\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateSecurityGroups\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create Security Groups or to use existing Security Groups. User needs to fill the SSM parameters as per below information in case of using existing Security Groups.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nSecurity Group for BDSQL ALB\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlALB\n/app/MDL/mdl/prod/SecurityGroup/BdsqlALB\n{{SecurityGroupName}}\nmdl-prod-BdsqlALBSecurityGroup\nSecurity Group for BDSQL EMR Service\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlEMRService\n/app/MDL/mdl/prod/SecurityGroup/BdsqlEMRService\n{{SecurityGroupName}}\nmdl-prod-BdsqlEMRServiceSecurityGroup\nSecurity Group for BDSQL EMR Slave Nodes\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlEMRSlave\n/app/MDL/mdl/prod/SecurityGroup/BdsqlEMRSlave\n{{SecurityGroupName}}\nmdl-prod-BdsqlEMRSlaveSecurityGroup\nSecurity Group for Elastic Search EC2\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/ElasticSearch\n/app/MDL/mdl/prod/SecurityGroup/ElasticSearch\n{{SecurityGroupName}}\nmdl-prod-ElasticSearchSecurityGroup\nSecurity Group for Herd EC2-\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/Herd\n/app/MDL/mdl/prod/SecurityGroup/Herd\n{{SecurityGroupName}}\nmdl-prod-HerdSecurityGroup\nSecurity Group for Herd ALB\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/HerdALB\n/app/MDL/mdl/prod/SecurityGroup/HerdALB\n{{SecurityGroupName}}\nmdl-prod-HerdALBSecurityGroup\nSecurity Group for Herd RDS\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/HerdRDS\n/app/MDL/mdl/prod/SecurityGroup/HerdRDS\n{{SecurityGroupName}}\nmdl-prod-HerdRDSSecurityGroup\nSecurity Group for Metastor EC2\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/Metastor\n/app/MDL/mdl/prod/SecurityGroup/Metastor\n{{SecurityGroupName}}\nmdl-prod-MetastorSecurityGroup\nSecurity Group for Metastor EMR\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/MetastorEMR\n/app/MDL/mdl/prod/SecurityGroup/MetastorEMR\n{{SecurityGroupName}}\nmdl-prod-MetastorEMRSecurityGroup\nSecurity Group for Metastor RDS\nPorts Required\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/MetastorRDS\n/app/MDL/mdl/prod/SecurityGroup/MetastorRDS\n{{SecurityGroupName}}\nmdl-prod-MetastorRDSSecurityGroup\n\n\n\n\n\n\n\n\nCreateSQS\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateSQS\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create SQS or to use existing SQS. User needs to fill the SSM parameters as per below information in case of using existing SQS.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nFlag about whether SQS was created by CFT\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/CreatedByMDL\n/app/MDL/mdl/prod/SQS/CreatedByMDL\nfalse\nfalse\nHerd SQS Name\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/HerdQueueIn\n/app/MDL/mdl/prod/SQS/HerdQueueIn\n{{SQSName}}\nmdl-prod-HERD-INCOMING\nES Index SQS\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/SearchIndexUpdateSqsQueue\n/app/MDL/mdl/prod/SQS/SearchIndexUpdateSqsQueue\n{{SQSName}}\nmdl-prod-ESEARCH-SEARCH_INDEX_UPDATE\n\n\n\n\n\n\n\n\nCreateOpenLDAP\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateOpenLDAP\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create OpenLDAP Server or to use existing OpenLDAP Server. User needs to fill the SSM parameters as per below information in case of using existing OpenLDAP Server for Authentication.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nVPCId\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/ID\n/global/mdl/prod/VPC/ID\n{{VPCID}}\nvpc-abc01234\nPrivate Subnet List\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/private\n/global/mdl/prod/VPC/SubnetIDs/private\n{{PrivateSubnetsList}}\nsubnet-abc01234,subnet-abc56789\nPublic Subnet List\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/public\n/global/mdl/prod/VPC/SubnetIDs/public\n{{PublicSubnetsList}}\nsubnet-abc01234,subnet-abc56789\n\n\n\n\n\n\n\n\nCreateVPC\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateVPC\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create new VPC/Subnets or to use existing VPC/Subnets. User needs to fill the SSM parameters as per below information in case of using existing VPC/Subnets.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nSSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nVPC Id\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/ID\n/global/mdl/prod/VPC/ID\n{{VPCID}}\nvpc-abc01234\nPrivate Subnet List\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/private\n/global/mdl/prod/VPC/SubnetIDs/private\n{{PrivateSubnetsList}}\nsubnet-abc01234,subnet-abc56789\nPublic Subnet List\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/public\n/global/mdl/prod/VPC/SubnetIDs/public\n{{PublicSubnetsList}}\nsubnet-abc01234,subnet-abc56789\n\n\n\n\n\n\n\n\nCreateKeypair\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateKeypair\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create new KeyPair or to use existing KeyPair. User needs to fill the SSM parameters as per below information in case of using existing KeyPair. Note that the private key will be uploaded to parameter store in case MDL creates the keys.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nInput SSM Parameters\n (required if false)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nKeyPair Name\n/app/MDL/{{MDLInstanceName}}/{{Environment}}/KEYS/KeypairName\n/app/MDL/mdl/prod/KEYS/KeypairName\n{{KeypairName}}\napp_mdl_prod\n\n\n\n\n\n\nOutput SSM Parameters\n (in case of true)\n\n\nDescription\nName (Format)\nName (Example)\nValue (Format)\nValue (Example)\nPrivate Key Created\n/{{KeypairName}}\n/app_mdl_prod\n{{PrivateKey}} - \nThis is Secure String\n-----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAy6fMbEN605odHWNJTEItk7VmOIsff3+YLzrAHGGCv7cvwEZapaoqzZGqiydI 0fSCpHASdo5bLv1tjr0Z+mNIf6OEj8M07FudDJ2Zfkw5hx6rRjxGT0Qf0UXNRElQbH/mlxCsMcRX empCdBA+yqH0VPqekhB1IwrMhxfpUVLvJk4LRa5JU+tVzIGUgSBK+PLlaCVfEmcC5evaQ1PJjSmn hErEZ5qwo3pSrIi5tOay+uuNgwjygQarRhq19HKoRNS2G0+uP3uae0bO3magXfSVS7KEw+8ttGLU 1nLHn5FQqeTPssweot1mOqyK0m4tLTBDimo11bcBrqKYgCy4M+fPeQIDAQABAoIBAH7CuuLIPbNn waeBHSZyKpw91JptPfXGHZuIHfuMVi2uf/JV2CY1fN7nRBfJI/JLFuXzPAq/INJmu8KUwY6wLXgE \n2pd2A2sq0p2QkNqwUZG1APHgJmECgYEA5Mc25rWSiEi8xxN3k6aeWqZ7ZCF0HVL2WBrXjQnyw8Mg\n 4tPTozdbUDnwwidFizNcrBorUZ0TM9s4aBnrUicKkXgG7ueUZLE2u48ejye0BxBoU+voIqz3BWpo L2b/skU+PpyIIwhKvgdxcaLWj25UsAg9q7gRRHwbfBsFZtc7yt1guQ/hwWYXEh1yvSq7W9i5bhd4 2pd2A2sq0p2QkNqwUZG1APHgJmECgYEA5Mc25rWSiEi8xxN3k6aeWqZ7ZCF0HVL2WBrXjQnyw8Mg ixl1iPMX8KxQTAc2dnR5Ct69HiOBTYZZdtWM2JvtiPi3BawQOxsH89KgCOW9zyHlaD7ayynWrabN LrFvVrrzFVmMssJOnpKLwx6VJoCDBWMaFsQYjEN/tdyeqTnNnbsCgYEA4+NS6PgqzHRoE1KAU6kO TE9rM7WiV0aQ8VkVBQtaKFnR1NtPlwGl0S3chkC3UwkfZ5JjQ61Nx8DBeTEHpxc4K0OI4xbOnYzn J/sSU9s9K/9TwymlKsiV4T3u24y3LiYEZzq+Bjne6uAsyWdkCIe4q/JOen3K83cT8oqcjSbHWlsC gYAC0S0s5Bl80iB49xVm3QtgJGKqlfrfDZF4/kOfOfsiS/nPnK2k1RF7ZjPK69/Qz5hZ+OotP9Ss xrW9T93fIPRo1l8yk67Te366kuJjmaifr1Qq13NMQySgmMg4BflQARdTMPoZjWj4bOeJrIu7oKN8 Yn8Evr9qor4k2CWgAdU1VwKBgC4i06I+u8twtbFTvo8xZqekXHu3hgpNSwLRmiPPTI1mwchqLg7Q UpWqxz6W04aIDkeVp2sIJvsN1x2GA5qcZM69eXUgJOxYnmPFvMwlUpkZtAeK4tlqio1zUGw6bMt2 /uU3S0lPZgX/\nUpWqxz6W04aIDkeVp2sIJvsN1x2GA5qcZM69eXUgJOxYnmPFvMwlUpkZtAeK4tlqio1zUGw6bMt2\n Mb2/EXlHHhsl7uZKdXQIdRPeQIxT/8XAAjDszCpy2UbG7t8CYfck0rH3r6VeefLocP2jF7550aB7 1UJX47Wud7wKNi0lVwDSahkA2/Va7aaaIH72ZaWszGwFuk1GiDX01UiNh/VjtVKhiTPU\n-----END RSA PRIVATE KEY-----\n\n\n\n\n\n\n\n\nCreateCloudFrontDistribution\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateCloudFrontDistribution\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create new Cloudfront Distribution or to use existing Cloudfront Distribution. User needs to fill the SSM parameters as per below information in case of using existing Cloudfront Distribution. Here is the \ntemplate\n to create one.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nCreateDemoObjects\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateDemoObjects\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create demo data in the data lake.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nEnableSSLAndAuth\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nEnableSSLAndAuth\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to enable Authentication for Herd/BDSQL/Shepherd. If Authentication is enabled, MDL uses OpenLDAP to perform authentication/authorization\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nfalse\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nRefreshDatabase\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRefreshDatabase\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to refresh RDS for both Herd and Metastor. This is disabled during stack updates.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nRDS Parameters\n\u00b6\n\n\nThese parameters are related to RDS\n\n\nHerdDBClass\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nHerdDBClass\n\n\n\n\n\n\nDescription\n\n\nSpecifies the required Database Class for Herd RDS\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateRDSInstances == true)\n\n\n\n\n\n\nDefault Value\n\n\ndb.m4.large\n\n\n\n\n\n\nAllowed Values\n\n\nRefer to \nAWS RDS\n documentation for valid values\n\n\n\n\n\n\n\n\nHerdDBSize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nHerdDBSize\n\n\n\n\n\n\nDescription\n\n\nSpecifies the required Database Size for Herd RDS (in GB)\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateRDSInstances == true)\n\n\n\n\n\n\nDefault Value\n\n\n10\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS RDS\n documentation for more details\n\n\n\n\n\n\n\n\nMetastorDBClass\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMetastorDBClass\n\n\n\n\n\n\nDescription\n\n\nSpecifies the required Database Class for Metastor RDS\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateRDSInstances == true)\n\n\n\n\n\n\nDefault Value\n\n\ndb.m4.large\n\n\n\n\n\n\nAllowed Values\n\n\nRefer to \nAWS RDS\n documentation for valid values\n\n\n\n\n\n\n\n\nMetastorDBSize\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMetastorDBSize\n\n\n\n\n\n\nDescription\n\n\nSpecifies the required Database Size for Metastor RDS (in GB)\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateRDSInstances == true)\n\n\n\n\n\n\nDefault Value\n\n\n10\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS RDS\n documentation for more details\n\n\n\n\n\n\n\n\nWeb Domain and Certificate Parameters\n\u00b6\n\n\nThese parameters are related to Certificates and Domains. These are required only if EnableSSLAndAuth = true\n\n\nCertificateArn\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCertificateArn\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Arn information from ACM for the Certificate to be used in MDL. Refer \nAWS documentation\n to create Certificates in ACM.\n\n\n\n\n\n\nRequired\n\n\nOnly If (EnableSSLAndAuth == true)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS documentation\n for getting the ARN of the Certificate. Note that the certificate is used for three end points: Herd, Shepherd, and Bdsql. So, Certificate should have \nWildcard Domain Name\n. The Certificate should match any first level subdomain. Format - \n.domainName\n* (Example: \n.example.com\n). MD prefixes corresponding first level subdomain (Example: \nmdlHerd.example.com\n, \nmdlShepherd.example.com\n, and \nmdlBdsql.example.com\n*).\n\n\n\n\n\n\n\n\nDomainNameSuffix\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDomainNameSuffix\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Domain Name Suffix as per the Certificate specified in \"CertificateArn\"\n\n\n\n\n\n\nRequired\n\n\nOnly If (EnableSSLAndAuth == true)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS documentation\n for setting up a new Domain. When \"EnableSSLAndAuth\" option is enabled, MDL uses this DomainNameSuffix for the Route53 configurations. So, user needs to own this specified domain. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.\n\n\n\n\n\n\n\n\nHostedZoneName\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nHostedZoneName\n\n\n\n\n\n\nDescription\n\n\nSpecifies the HostedZoneName for Route53 configuration\n\n\n\n\n\n\nRequired\n\n\nOnly If (EnableSSLAndAuth == true)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details about creating Hosted Zone. When \"EnableSSLAndAuth\" option is enabled, MDL uses this HostedZoneName for the Route53 configurations. So, user needs to own this specified domain related to the HostedZone. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.\n\n\n\n\n\n\n\n\nCertificateInfo\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCertificateInfo\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Certificate Information for creating self-signed certificates\n\n\n\n\n\n\nRequired\n\n\nOnly If (EnableSSLAndAuth == true)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nFormat of: CN=<>,OU=<>,O=<>,L=<>,ST=<>,C=<>\n\n\n\n\n\n\n\n\nLdapDN\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nLdapDN\n\n\n\n\n\n\nDescription\n\n\nSpecifies the LDAP Domain name used in OpenLDAP configuration\n\n\n\n\n\n\nRequired\n\n\nOnly If (EnableSSLAndAuth == true)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\n^(dc=[^=]+,)*(dc=[^=]+)$\n\n\n\n\n\n\n\n\nEC2 Instance Parameters\n\u00b6\n\n\nThese parameters describe the instance types for various EC2 that are use to run components of the Herd-MDL product\n\n\nEsInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nEsInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for Elastic Search EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nt2.medium\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nHerdInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nHerdInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for Herd EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nm4.2xlarge\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nLdapInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nLdapInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for OpenLDAP EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nt2.small\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nMetastorInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMetastorInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for Metastor EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nm4.2xlarge\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nBdsqlMasterInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nBdsqlMasterInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for BDSQL Presto EMR Cluster Master Instance\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nm4.4xlarge\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nBdsqlCoreInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nBdsqlMasterInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for BDSQL Presto EMR Cluster Core Instance\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nm4.4xlarge\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nNumberOfBdsqlCoreInstances\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nNumberOfBdsqlCoreInstances\n\n\n\n\n\n\nDescription\n\n\nSpecifies the number of Core Instances for BDSQL Presto EMR Cluster\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\n1\n\n\n\n\n\n\nAllowed Values\n\n\nInteger\n\n\n\n\n\n\n\n\nTag Parameters\n\u00b6\n\n\nThese parameters describe the tag information for the AWS resources created by MDL.\n\n\nCustomTagName\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCustomTagName\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Tag Name to be applied to all the AWS resources created by MDL\n\n\n\n\n\n\nRequired\n\n\nNo\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n\n\n\n\n\n\n\n\nCustomTagValue\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCustomTagValue\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Tag Value to be applied to all the AWS resources created by MDL\n\n\n\n\n\n\nRequired\n\n\nNo\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation",
            "title": "Advanced Install"
        },
        {
            "location": "/advanced-install/#herd-mdl-advanced-install",
            "text": "Use these Advanced Installation instructions if your organization requires that certain AWS resources such as IAM Roles, Security Groups, etc. are created outside Herd-MDL automated install. The Advanced Install allows for optional creation of AWS resources through other mechanisms and provides detailed specifications on what to create and how to reference resources created outside Herd-MDL automated install.  See  Basic Install  for an easy, turnkey installation of Herd-MDL.",
            "title": "Herd-MDL Advanced Install"
        },
        {
            "location": "/advanced-install/#prerequisites",
            "text": "These are prerequisites that are necessary for installing MDL components for Advanced Installation Type   An  AWS  account   User who has power user access as per this policy -  arn:aws:iam::aws:policy/PowerUserAccess  MDL deployment creates various AWS resources like Cloudformation, EC2, IAM, Security Groups, S3 etc, and power user access is needed for creating these resources  Sample IAM policy for  PowerUserAccess    Domain - if (EnableSSLAndAuth == true)  User account needs to own a Domain for using with Route53 record set for public end points created by MDL  Refer  AWS documentation  for setting up a new Domain  Domain must be owned by User in case \"EnableSSLAndAuth\" parameter is specified    Certificate in ACM with  Wildcard Domain Name  - if (EnableSSLAndAuth == true)  The Certificate should match any first level subdomain (Wildcard character supports this)  Format -  *.domain  Example:  *.example.com    MDL prefixes corresponding first level subdomain (Example:  mdlHerd.example.com ,  mdlShepherd.example.com , and  mdlBdsql.example.com )  Certificate in ACM needs to exist in the AWS account in case \"EnableSSLAndAuth\" parameter is specified    Hosted Zone in Route53 - if (EnableSSLAndAuth == true)  MDL adds a record set for Hosted Zone in Route53 to associate the DNS information with Domain Name  MDL creates three record sets (Example:  mdlHerd.example.com ,  mdlShepherd.example.com , and  mdlBdsql.example.com )  Hosted Zone needs to exist in the AWS account in case \"EnableSSLAndAuth\" parameter is specified    There are some conditional parameters for MDL, which let the user to use existing resources instead of creating them as part of MDL. In these case, corresponding SSM parameters need to be created before creating MDL stack. Following are the conditional resource types in MDL.  VPC/Subnets - if (CreateVPC == false)  Refer to  CreateVPC section  and create SSM parameters in case existing VPC/Subnets need to be used    S3 - if (CreateS3Buckets == false)  Refer  to  CreateS3Buckets section  and create SSM parameters in case existing S3 buckets need to be used    IAM - if (CreateIAMRoles == false)  Refer to  CreateIAMRoles section  and create SSM parameters in case existing IAM roles need to be used    RDS - if (CreateRDSInstances == false)  Refer to  CreateRDSInstances section  and create SSM parameters in case existing RDS instances need to be used    Security Groups - if (CreateSecurityGroups == false)  Refer to  CreateSecurityGroups section  and create SSM parameters in case existing Security Groups need to be used    SQS - if (CreateSQS == false)  Refer to  CreateSQS section  and create SSM parameters in case existing SQS need to be used    OpenLDAP - if (CreateOpenLDAP  == false)  Refer to  CreateOpenLDAP section  and create SSM parameters in case existing OpenLDAP need to be used    KeyPair - if (CreateKeypair == false)  Refer to  CreateKeypair section  and create SSM parameters in case existing KeyPair needs to be used    Cloudfront Distribution - if (CreateCloudFrontDistribution == false)  Refer to   CreateCloudFrontDistribution section  and create SSM parameters in case existing Cloudfront needs to be used",
            "title": "Prerequisites"
        },
        {
            "location": "/advanced-install/#steps",
            "text": "Installation is automated through Cloudformation templates in AWS. The stack creates all the resources required by MDL application. This roughly takes a couple of hours to create all the resources needed for MDL. A stack can be created using AWS console, or AWS CLI, or AWS SDK. Refer  AWS documentation  for creating stacks using Cloudformation templates. In this section, steps are described for creating the stack using AWS console.   Download the attached  installMDL.yml  file to local file system  Login to AWS console and navigate to  Cloudformation  Create the stack using option \"Upload a template to Amazon S3\" - Refer  AWS documentation  for selecting a local template  Choose the installMDL.yml file from local file system   In the next page,    Enter the values for  Stack Name     A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.    Refer to  MDL CFT Specifications  and change the required parameters for the chosen installation type       In the next page, specify the stack options as per  AWS documentation   Review the parameters, and create the stack as per  AWS documentation  Wait for \"CREATE_COMPLETE\" on the stack and all nested stacks.",
            "title": "Steps"
        },
        {
            "location": "/advanced-install/#cft-specifications",
            "text": "",
            "title": "CFT Specifications"
        },
        {
            "location": "/advanced-install/#deployment-parameters",
            "text": "These parameters are related to which version and components to deploy.  ReleaseVersion           Name  ReleaseVersion    Description  Release version of MDL application to install    Required  Yes    Default Value  1.4.0 (latest release)    Allowed Values  1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0     DeployComponents           Name  DeployComponents    Description  MDL Component to deploy    Required  Yes    Default Value  All    Allowed Values  Parameter Value Description All Install all the available Components Prereqs Only Install only the pre-requirements without any EC2 Herd Install Prereqs then Herd and its dependencies Metastor Install Prereqs, Herd, Metastor and all their depencencies",
            "title": "Deployment Parameters"
        },
        {
            "location": "/advanced-install/#generic-parameters",
            "text": "These parameters define the basic parameters used across various components  ImageId             Name  ImageId    Description  AMI id for the EC2 instances. Note that OSS user may use any other AMI which is similar to amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2. However, there could be some issues in terms of package installation/availability, while using a different AMI. So, it is user's responsibility to make sure provided AMI has all the packages like amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2    Required  Yes    Default Value  ami-1853ac65     MDLInstanceName           Name  MDLInstanceName    Description  Name of the Application being installed    Required  Yes    Default Value  mdl    Allowed Pattern  [a-z0-9_]*    Max Length  15     Environment           Name  Environment    Description  Environment name for MDL    Required  Yes    Default Value  prod    Allowed Pattern  [a-z0-9_]*    Max Length  4     CloudWatchRetentionDays           Name  CloudWatchRetentionDays    Description  Retention days for CloudWatch logs    Required  Yes    Default Value  90",
            "title": "Generic Parameters"
        },
        {
            "location": "/advanced-install/#conditional-parameters",
            "text": "These are conditional parameters to decide whether MDL creates certain resources or MDL uses existing resources. In each case where a parameter is false, SSM parameters must be present that allow MDL to reference the resources that have been created prior to running the Herd-MDL automated install.   CreateS3Buckets           Name  CreateS3Buckets    Description  Specifies whether to create S3 buckets or to use existing s3 buckets. User needs to fill the SSM parameters as per below information in case of using existing s3 buckets.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) Herd Bucket /app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/Herd /app/MDL/mdl/prod/S3/Herd {{BucketName}} 123456789012-mdl-herd-prod MDL Bucket /app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/MDL app/MDL/mdl/prod/S3/MDL {{BucketName}} 123456789012-mdl-mdl-prod  Shepherd Bucket /app/MDL/{{MDLInstanceName}}/{{Environment}}/S3/Shepherd app/MDL/mdl/prod/S3/Shepherd {{BucketName}} 123456789012-mdl-shepherd-prod      CreateIAMRoles               Name  CreateIAMRoles    Description  Specifies whether to create IAM roles or to use existing IAM roles. User needs to fill the SSM parameters as per below information in case of using existing IAM roles.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) EMR Service Role  Permissions Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLEMRServiceRole /app/MDL/mdl/prod/IAM/MDLEMRServiceRole {{EMRRoleName}} APP_mdl_EMR MDL Instance Profile for EC2instances Permissions Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLInstanceProfile /app/MDL/mdl/prod/IAM/MDLInstanceProfile {{MDLInstanceProfileName}} mdl-MDLInstanceProfile MDL Instance Role for EC2 instances Permissions Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLInstanceRole /app/MDL/mdl/prod/IAM/MDLInstanceRole {{MDLInstanceProfileARN}} arn:aws:iam::123456789012:role/APP_mdl_Instance Code Deployment Role for EC2 Permissions Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/IAM/MDLServerDeploymentRole /app/MDL/mdl/prod/IAM/MDLServerDeploymentRole {{MDLServerDeploymentRoleARN}} arn:aws:iam::123456789012:role/APP_mdl_Deployment     CreateRDSInstances              Name  CreateRDSInstances    Description  Specifies whether to create RDS or to use existing RDS. User needs to fill the SSM parameters as per below information in case of using existing RDS.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) Herd RDS DB Host Name /app/MDL/{{MDLInstanceName}}/{{Environment}}/RDS/HerdDBHostName /app/MDL/mdl/prod/RDS/HerdDBHostName {{DBHostName}} mdl-prod-herd.ctrfbf70ykmy.us-east-1.rds.amazonaws.com Metastor RDS DB HostName /app/MDL/{{MDLInstanceName}}/{{Environment}}/RDS/MetastorDBHostName /app/MDL/mdl/prod/RDS/MetastorDBHostName {{DBHostName}} mdl-prod-metastor.ctrfbf70ykmy.us-east-1.rds.amazonaws.com Password for Herd RDS Master Account /app/MDL/{{MDLInstanceName}}/{{Environment}}/HERD/RDS/masterAccount /app/MDL/mdl/dev/HERD/RDS/masterAccount {{Password}}-This is a Secure String wbPAEl55nd2lF2H5 Password for Metastor RDS Master Account /app/MDL/{{MDLInstanceName}}/{{Environment}}/METASTOR/RDS/hiveAccount /app/MDL/mdl/dev/METASTOR/RDS/hiveAccount {{Password}}-This is a Secure String wvFST98TFO7uCwtR     CreateSecurityGroups             Name  CreateSecurityGroups    Description  Specifies whether to create Security Groups or to use existing Security Groups. User needs to fill the SSM parameters as per below information in case of using existing Security Groups.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) Security Group for BDSQL ALB Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlALB /app/MDL/mdl/prod/SecurityGroup/BdsqlALB {{SecurityGroupName}} mdl-prod-BdsqlALBSecurityGroup Security Group for BDSQL EMR Service Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlEMRService /app/MDL/mdl/prod/SecurityGroup/BdsqlEMRService {{SecurityGroupName}} mdl-prod-BdsqlEMRServiceSecurityGroup Security Group for BDSQL EMR Slave Nodes Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/BdsqlEMRSlave /app/MDL/mdl/prod/SecurityGroup/BdsqlEMRSlave {{SecurityGroupName}} mdl-prod-BdsqlEMRSlaveSecurityGroup Security Group for Elastic Search EC2 Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/ElasticSearch /app/MDL/mdl/prod/SecurityGroup/ElasticSearch {{SecurityGroupName}} mdl-prod-ElasticSearchSecurityGroup Security Group for Herd EC2- Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/Herd /app/MDL/mdl/prod/SecurityGroup/Herd {{SecurityGroupName}} mdl-prod-HerdSecurityGroup Security Group for Herd ALB Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/HerdALB /app/MDL/mdl/prod/SecurityGroup/HerdALB {{SecurityGroupName}} mdl-prod-HerdALBSecurityGroup Security Group for Herd RDS Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/HerdRDS /app/MDL/mdl/prod/SecurityGroup/HerdRDS {{SecurityGroupName}} mdl-prod-HerdRDSSecurityGroup Security Group for Metastor EC2 Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/Metastor /app/MDL/mdl/prod/SecurityGroup/Metastor {{SecurityGroupName}} mdl-prod-MetastorSecurityGroup Security Group for Metastor EMR Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/MetastorEMR /app/MDL/mdl/prod/SecurityGroup/MetastorEMR {{SecurityGroupName}} mdl-prod-MetastorEMRSecurityGroup Security Group for Metastor RDS Ports Required /app/MDL/{{MDLInstanceName}}/{{Environment}}/SecurityGroup/MetastorRDS /app/MDL/mdl/prod/SecurityGroup/MetastorRDS {{SecurityGroupName}} mdl-prod-MetastorRDSSecurityGroup     CreateSQS             Name  CreateSQS    Description  Specifies whether to create SQS or to use existing SQS. User needs to fill the SSM parameters as per below information in case of using existing SQS.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) Flag about whether SQS was created by CFT /app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/CreatedByMDL /app/MDL/mdl/prod/SQS/CreatedByMDL false false Herd SQS Name /app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/HerdQueueIn /app/MDL/mdl/prod/SQS/HerdQueueIn {{SQSName}} mdl-prod-HERD-INCOMING ES Index SQS /app/MDL/{{MDLInstanceName}}/{{Environment}}/SQS/SearchIndexUpdateSqsQueue /app/MDL/mdl/prod/SQS/SearchIndexUpdateSqsQueue {{SQSName}} mdl-prod-ESEARCH-SEARCH_INDEX_UPDATE     CreateOpenLDAP             Name  CreateOpenLDAP    Description  Specifies whether to create OpenLDAP Server or to use existing OpenLDAP Server. User needs to fill the SSM parameters as per below information in case of using existing OpenLDAP Server for Authentication.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) VPCId /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/ID /global/mdl/prod/VPC/ID {{VPCID}} vpc-abc01234 Private Subnet List /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/private /global/mdl/prod/VPC/SubnetIDs/private {{PrivateSubnetsList}} subnet-abc01234,subnet-abc56789 Public Subnet List /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/public /global/mdl/prod/VPC/SubnetIDs/public {{PublicSubnetsList}} subnet-abc01234,subnet-abc56789     CreateVPC             Name  CreateVPC    Description  Specifies whether to create new VPC/Subnets or to use existing VPC/Subnets. User needs to fill the SSM parameters as per below information in case of using existing VPC/Subnets.    Required  Yes    Default Value  true    Allowed Values  true, false    SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) VPC Id /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/ID /global/mdl/prod/VPC/ID {{VPCID}} vpc-abc01234 Private Subnet List /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/private /global/mdl/prod/VPC/SubnetIDs/private {{PrivateSubnetsList}} subnet-abc01234,subnet-abc56789 Public Subnet List /app/MDL/{{MDLInstanceName}}/{{Environment}}/VPC/SubnetIDs/public /global/mdl/prod/VPC/SubnetIDs/public {{PublicSubnetsList}} subnet-abc01234,subnet-abc56789     CreateKeypair             Name  CreateKeypair    Description  Specifies whether to create new KeyPair or to use existing KeyPair. User needs to fill the SSM parameters as per below information in case of using existing KeyPair. Note that the private key will be uploaded to parameter store in case MDL creates the keys.    Required  Yes    Default Value  true    Allowed Values  true, false    Input SSM Parameters  (required if false)  Description Name (Format) Name (Example) Value (Format) Value (Example) KeyPair Name /app/MDL/{{MDLInstanceName}}/{{Environment}}/KEYS/KeypairName /app/MDL/mdl/prod/KEYS/KeypairName {{KeypairName}} app_mdl_prod    Output SSM Parameters  (in case of true)  Description Name (Format) Name (Example) Value (Format) Value (Example) Private Key Created /{{KeypairName}} /app_mdl_prod {{PrivateKey}} -  This is Secure String -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAy6fMbEN605odHWNJTEItk7VmOIsff3+YLzrAHGGCv7cvwEZapaoqzZGqiydI 0fSCpHASdo5bLv1tjr0Z+mNIf6OEj8M07FudDJ2Zfkw5hx6rRjxGT0Qf0UXNRElQbH/mlxCsMcRX empCdBA+yqH0VPqekhB1IwrMhxfpUVLvJk4LRa5JU+tVzIGUgSBK+PLlaCVfEmcC5evaQ1PJjSmn hErEZ5qwo3pSrIi5tOay+uuNgwjygQarRhq19HKoRNS2G0+uP3uae0bO3magXfSVS7KEw+8ttGLU 1nLHn5FQqeTPssweot1mOqyK0m4tLTBDimo11bcBrqKYgCy4M+fPeQIDAQABAoIBAH7CuuLIPbNn waeBHSZyKpw91JptPfXGHZuIHfuMVi2uf/JV2CY1fN7nRBfJI/JLFuXzPAq/INJmu8KUwY6wLXgE  2pd2A2sq0p2QkNqwUZG1APHgJmECgYEA5Mc25rWSiEi8xxN3k6aeWqZ7ZCF0HVL2WBrXjQnyw8Mg  4tPTozdbUDnwwidFizNcrBorUZ0TM9s4aBnrUicKkXgG7ueUZLE2u48ejye0BxBoU+voIqz3BWpo L2b/skU+PpyIIwhKvgdxcaLWj25UsAg9q7gRRHwbfBsFZtc7yt1guQ/hwWYXEh1yvSq7W9i5bhd4 2pd2A2sq0p2QkNqwUZG1APHgJmECgYEA5Mc25rWSiEi8xxN3k6aeWqZ7ZCF0HVL2WBrXjQnyw8Mg ixl1iPMX8KxQTAc2dnR5Ct69HiOBTYZZdtWM2JvtiPi3BawQOxsH89KgCOW9zyHlaD7ayynWrabN LrFvVrrzFVmMssJOnpKLwx6VJoCDBWMaFsQYjEN/tdyeqTnNnbsCgYEA4+NS6PgqzHRoE1KAU6kO TE9rM7WiV0aQ8VkVBQtaKFnR1NtPlwGl0S3chkC3UwkfZ5JjQ61Nx8DBeTEHpxc4K0OI4xbOnYzn J/sSU9s9K/9TwymlKsiV4T3u24y3LiYEZzq+Bjne6uAsyWdkCIe4q/JOen3K83cT8oqcjSbHWlsC gYAC0S0s5Bl80iB49xVm3QtgJGKqlfrfDZF4/kOfOfsiS/nPnK2k1RF7ZjPK69/Qz5hZ+OotP9Ss xrW9T93fIPRo1l8yk67Te366kuJjmaifr1Qq13NMQySgmMg4BflQARdTMPoZjWj4bOeJrIu7oKN8 Yn8Evr9qor4k2CWgAdU1VwKBgC4i06I+u8twtbFTvo8xZqekXHu3hgpNSwLRmiPPTI1mwchqLg7Q UpWqxz6W04aIDkeVp2sIJvsN1x2GA5qcZM69eXUgJOxYnmPFvMwlUpkZtAeK4tlqio1zUGw6bMt2 /uU3S0lPZgX/ UpWqxz6W04aIDkeVp2sIJvsN1x2GA5qcZM69eXUgJOxYnmPFvMwlUpkZtAeK4tlqio1zUGw6bMt2  Mb2/EXlHHhsl7uZKdXQIdRPeQIxT/8XAAjDszCpy2UbG7t8CYfck0rH3r6VeefLocP2jF7550aB7 1UJX47Wud7wKNi0lVwDSahkA2/Va7aaaIH72ZaWszGwFuk1GiDX01UiNh/VjtVKhiTPU -----END RSA PRIVATE KEY-----     CreateCloudFrontDistribution             Name  CreateCloudFrontDistribution    Description  Specifies whether to create new Cloudfront Distribution or to use existing Cloudfront Distribution. User needs to fill the SSM parameters as per below information in case of using existing Cloudfront Distribution. Here is the  template  to create one.    Required  Yes    Default Value  true    Allowed Values  true, false     CreateDemoObjects             Name  CreateDemoObjects    Description  Specifies whether to create demo data in the data lake.    Required  Yes    Default Value  true    Allowed Values  true, false     EnableSSLAndAuth             Name  EnableSSLAndAuth    Description  Specifies whether to enable Authentication for Herd/BDSQL/Shepherd. If Authentication is enabled, MDL uses OpenLDAP to perform authentication/authorization    Required  Yes    Default Value  false    Allowed Values  true, false     RefreshDatabase             Name  RefreshDatabase    Description  Specifies whether to refresh RDS for both Herd and Metastor. This is disabled during stack updates.    Required  Yes    Default Value  true    Allowed Values  true, false",
            "title": "Conditional Parameters"
        },
        {
            "location": "/advanced-install/#rds-parameters",
            "text": "These parameters are related to RDS  HerdDBClass             Name  HerdDBClass    Description  Specifies the required Database Class for Herd RDS    Required  Only If (CreateRDSInstances == true)    Default Value  db.m4.large    Allowed Values  Refer to  AWS RDS  documentation for valid values     HerdDBSize           Name  HerdDBSize    Description  Specifies the required Database Size for Herd RDS (in GB)    Required  Only If (CreateRDSInstances == true)    Default Value  10    Allowed Values  Refer  AWS RDS  documentation for more details     MetastorDBClass             Name  MetastorDBClass    Description  Specifies the required Database Class for Metastor RDS    Required  Only If (CreateRDSInstances == true)    Default Value  db.m4.large    Allowed Values  Refer to  AWS RDS  documentation for valid values     MetastorDBSize             Name  MetastorDBSize    Description  Specifies the required Database Size for Metastor RDS (in GB)    Required  Only If (CreateRDSInstances == true)    Default Value  10    Allowed Values  Refer  AWS RDS  documentation for more details",
            "title": "RDS Parameters"
        },
        {
            "location": "/advanced-install/#web-domain-and-certificate-parameters",
            "text": "These parameters are related to Certificates and Domains. These are required only if EnableSSLAndAuth = true  CertificateArn             Name  CertificateArn    Description  Specifies the Arn information from ACM for the Certificate to be used in MDL. Refer  AWS documentation  to create Certificates in ACM.    Required  Only If (EnableSSLAndAuth == true)    Default Value     Allowed Values  Refer  AWS documentation  for getting the ARN of the Certificate. Note that the certificate is used for three end points: Herd, Shepherd, and Bdsql. So, Certificate should have  Wildcard Domain Name . The Certificate should match any first level subdomain. Format -  .domainName * (Example:  .example.com ). MD prefixes corresponding first level subdomain (Example:  mdlHerd.example.com ,  mdlShepherd.example.com , and  mdlBdsql.example.com *).     DomainNameSuffix             Name  DomainNameSuffix    Description  Specifies the Domain Name Suffix as per the Certificate specified in \"CertificateArn\"    Required  Only If (EnableSSLAndAuth == true)    Default Value     Allowed Values  Refer  AWS documentation  for setting up a new Domain. When \"EnableSSLAndAuth\" option is enabled, MDL uses this DomainNameSuffix for the Route53 configurations. So, user needs to own this specified domain. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.     HostedZoneName             Name  HostedZoneName    Description  Specifies the HostedZoneName for Route53 configuration    Required  Only If (EnableSSLAndAuth == true)    Default Value     Allowed Values  Refer  AWS Documentation  for more details about creating Hosted Zone. When \"EnableSSLAndAuth\" option is enabled, MDL uses this HostedZoneName for the Route53 configurations. So, user needs to own this specified domain related to the HostedZone. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.     CertificateInfo             Name  CertificateInfo    Description  Specifies the Certificate Information for creating self-signed certificates    Required  Only If (EnableSSLAndAuth == true)    Default Value     Allowed Values  Format of: CN=<>,OU=<>,O=<>,L=<>,ST=<>,C=<>     LdapDN             Name  LdapDN    Description  Specifies the LDAP Domain name used in OpenLDAP configuration    Required  Only If (EnableSSLAndAuth == true)    Default Value     Allowed Values  ^(dc=[^=]+,)*(dc=[^=]+)$",
            "title": "Web Domain and Certificate Parameters"
        },
        {
            "location": "/advanced-install/#ec2-instance-parameters",
            "text": "These parameters describe the instance types for various EC2 that are use to run components of the Herd-MDL product  EsInstanceType             Name  EsInstanceType    Description  Specifies the instance type for Elastic Search EC2    Required  Yes    Default Value  t2.medium    Allowed Values  Refer  AWS Documentation  for more details     HerdInstanceType             Name  HerdInstanceType    Description  Specifies the instance type for Herd EC2    Required  Yes    Default Value  m4.2xlarge    Allowed Values  Refer  AWS Documentation  for more details     LdapInstanceType             Name  LdapInstanceType    Description  Specifies the instance type for OpenLDAP EC2    Required  Yes    Default Value  t2.small    Allowed Values  Refer  AWS Documentation  for more details     MetastorInstanceType             Name  MetastorInstanceType    Description  Specifies the instance type for Metastor EC2    Required  Yes    Default Value  m4.2xlarge    Allowed Values  Refer  AWS Documentation  for more details     BdsqlMasterInstanceType             Name  BdsqlMasterInstanceType    Description  Specifies the instance type for BDSQL Presto EMR Cluster Master Instance    Required  Yes    Default Value  m4.4xlarge    Allowed Values  Refer  AWS Documentation  for more details     BdsqlCoreInstanceType             Name  BdsqlMasterInstanceType    Description  Specifies the instance type for BDSQL Presto EMR Cluster Core Instance    Required  Yes    Default Value  m4.4xlarge    Allowed Values  Refer  AWS Documentation  for more details     NumberOfBdsqlCoreInstances             Name  NumberOfBdsqlCoreInstances    Description  Specifies the number of Core Instances for BDSQL Presto EMR Cluster    Required  Yes    Default Value  1    Allowed Values  Integer",
            "title": "EC2 Instance Parameters"
        },
        {
            "location": "/advanced-install/#tag-parameters",
            "text": "These parameters describe the tag information for the AWS resources created by MDL.  CustomTagName             Name  CustomTagName    Description  Specifies the Tag Name to be applied to all the AWS resources created by MDL    Required  No    Default Value     Allowed Values  Refer  AWS Documentation     CustomTagValue             Name  CustomTagValue    Description  Specifies the Tag Value to be applied to all the AWS resources created by MDL    Required  No    Default Value     Allowed Values  Refer  AWS Documentation",
            "title": "Tag Parameters"
        },
        {
            "location": "/mdlt/",
            "text": "Herd-MDL Functionality Test : MDLT\n\u00b6\n\n\nOverview\n\u00b6\n\n\nMDLT refers to an automated test-framework for Herd-MDL, it includes bringing up herd-mdl stack, running tests against herd-mdl stack, shutting down herd-mdl stack. \n\n\nPrerequisites\n\u00b6\n\n\nThese are prerequisites that are necessary for installing MDL components for Basic Installation Type\n\n\n\n\nSee \nHerd-MDL Prerequisites\n for Herd-MDL prerequisites. \n\n\nExisting EC2 Key Value Pair\n\n\n\n\nSimple MDLT Execution(noAuth)\n\u00b6\n\n\n\n\nDownload the attached \nmdlt.yml\n file to local file system\n\n\nLogin to AWS console and navigate to \nCloudformation\n\n\nCreate the stack using option \"Upload a template to Amazon S3\" - Refer \nAWS documentation\n for selecting a local template\n\n\nChoose the mdlt.yml file from local file system\n\n\nIn the next Parameters Edit page, \n\n\nEnter the values for \nStack Name\n  \n\n\nA stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.\n\n\n\n\n\n\nSelect any existing ec2 key pair from dropdown for parameter: \nKeyPairName\n\n\nLeave all other parameters to their default values, only Herd-MDL stack without auth will be created by default values. \n\n\nPlease refer to MDLT Stack Parameters Specifications for creating Herd-MDL stack with authentication/authorization.\n\n\n\n\n\n\nIn the next page, specify the stack options as per \nAWS documentation\n\n\nReview the parameters, and create the stack as per \nAWS documentation\n\n\nWait for \"CREATE_COMPLETE\" on the stack and all nested stacks.(approximate wait time here is 2 hours)\n\n\nCheckout below cloudwatch documentation to find test execution results\n\n\nWait for the mdlt DeployHost stack to be deleted.(approximate wait time here is 1.5 hour)\n\n\nmdlt DeployHost stack name format\n: ${MDLInstanceName}-DeployHostHttpWithoutAuth-${awsUniqueNumber}(eg. mdlt-DeployHostHttpWithoutAuth-A9915FUEU3JI)\n\n\n\n\n\n\nif CreateVPC==true while creating mdlt, you need to delete vpc manually, steps see \nMDLT Known Issues\n \n\n\nDelete mdlt wrapper stack from aws CloudFormation console, step below \nMDLT Known Issues\n.(All nested stacks are deleted automatically by mdlt)\n\n\n\n\nMDLT with Auth stack\n\u00b6\n\n\n\n\nSame steps as above Simple Installation, but in stack parameters edit page, filling valid values for following parameters.\n\n\nMdlAuthStackName\n:  empty parameter value for MdlNoAuthStackName, and enter auth stack name in parameter MdlAuthStackName\n\n\nCertificateArn\n:  valid aws certificate ARN, refer to Herd-MDL Advanced install[advanced-install.md] for more information\n\n\nDomainNameSuffix\n:  domain name suffix, refer to Herd-MDL Advanced install[advanced-install.md] for more information\n\n\nHostedZoneName\n:  hosted zone name, refer to Herd-MDL Advanced install[advanced-install.md] for more information\n\n\n\n\n\n\n\n\nMDLT against Existing stack\n\u00b6\n\n\n\n\nSame steps as above Simple Installation, but in stack parameters edit page, filling different values for following parameters\n\n\nIf existing stack is noAuth stack, enter existing stack name in parameter \nMdlNoAuthStackName\n ; if existing stack is auth stack, empty parameter value for MdlNoAuthStackName, and enter existing stack name in parameter \nMdlAuthStackName\n\n\nset parameter CreateVPC value to false\n\n\nset parameter ExistingStack value to true\n\n\nEnter correct value for \nMdlPrivateSubnets\n, which is the existing stack PrivateSubnets value(can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)\n\n\nEnter correct value for \nMdlPublicSubnets\n, which is the existing stack PublicSubnets value (can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)\n\n\nEnter correct value for \nMdlVpcId\n, which is the existing stack vpc id value (can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)\n\n\n\n\n\n\n\n\nMDLT CFT Specifications\n\u00b6\n\n\nDeployment Parameters\n\u00b6\n\n\nThese parameters are related to which version and components to deploy.\n\n\nReleaseVersion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nReleaseVersion\n\n\n\n\n\n\nDescription\n\n\nRelease version of MDL application to install\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\n1.4.0\n\n\n\n\n\n\nAllowed Value\n\n\n1.4.0\n\n\n\n\n\n\n\n\nDeployComponents\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDeployComponents\n\n\n\n\n\n\nDescription\n\n\nMDL Component to deploy\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nAll\n\n\n\n\n\n\nAllowed Values\n\n\nParameter Value\nDescription\nAll\nInstall all the available Components\nPrereqs Only\nInstall only the pre-requirements without any EC2\nHerd\nInstall Prereqs then Herd and its dependencies\nMetastor\nInstall Prereqs, Herd, Metastor and all their depencencies\n\n\n\n\n\n\n\n\nGeneric Parameters\n\u00b6\n\n\nThese parameters define the basic parameters used across various components\n\n\nMDLInstanceName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMDLInstanceName\n\n\n\n\n\n\nDescription\n\n\nName of the Application being installed\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nmdlt\n\n\n\n\n\n\nAllowed Pattern\n\n\n[a-z0-9_]*\n\n\n\n\n\n\nMax Length\n\n\n15\n\n\n\n\n\n\n\n\nEnvironment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nEnvironment\n\n\n\n\n\n\nDescription\n\n\nEnvironment name for MDL\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nprod\n\n\n\n\n\n\nAllowed Pattern\n\n\n[a-z0-9_]*\n\n\n\n\n\n\nMax Length\n\n\n4\n\n\n\n\n\n\n\n\nMdltResultS3BucketName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdltResultS3BucketName\n\n\n\n\n\n\nDescription\n\n\nexisting s3 bucket name to save mdlt test execution results, if this parameter leaves empty, test execution results will be saved to mdlt staging bucket: ${AWS::AccountId}-${MDLInstanceName}-mdlt-${Environment}\n\n\n\n\n\n\nRequired\n\n\nNO\n\n\n\n\n\n\n\n\nMDL Stack Name Parameters\n\u00b6\n\n\nThese parameters define the herd-mdl stack names, either existing stack or stack to be created\n\n\nMdlNoAuthStackName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdlNoAuthStackName\n\n\n\n\n\n\nDescription\n\n\nstack name of existing noAuth herd-mdl stack, or stack name to be used for new herd-mdl noAuth stack creation; when this value leaves empty, mdlt will not create MDL noAuth stack\n\n\n\n\n\n\nRequired\n\n\nNO\n\n\n\n\n\n\nDefault Value\n\n\nmdltNoAuth\n\n\n\n\n\n\nConstraint\n\n\nmust be a non-existing stack name if wants mdlt to create new herd-mdl stack\n\n\n\n\n\n\n\n\nMdlAuthStackName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdlAuthStackName\n\n\n\n\n\n\nDescription\n\n\nstack name of existing auth herd-mdl stack, or stack name to be used for new herd-mdl auth stack creation; when this value leaves empty, mdlt will not create MDL auth stack\n\n\n\n\n\n\nRequired\n\n\nNO\n\n\n\n\n\n\nConstraint\n\n\nmust be a non-existing stack name if wants mdlt to create new herd-mdl stack\n\n\n\n\n\n\n\n\nConditional Parameters\n\u00b6\n\n\nThese are conditional parameters to decide whether MDL creates certain resources or MDL uses existing resources. In each case where a parameter is false, SSM parameters must be present that allow MDL to reference the resources that have been created prior to running the Herd-MDL automated install. \n\n\nCreateVPC\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCreateVPC\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to create new VPC/Subnets or to use existing VPC/Subnets. User needs to fill the SSM parameters as per below information in case of using existing VPC/Subnets.\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\nVPC Parameters\n (required if false)\n\n\nEnter all bellow VPC Parameters with correct value while creating the mdlt stack\n\n\n\n\n\n\n\n\nRollbackOnFailure\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nRollbackOnFailure\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether to shutdown herd-mdl stack after mdlt execution, this only has effects on herd-mdl stack created by mdlt; when RollBackOnFailure==true, herd-mdl stack will be deleted automatically after test execution; when set to false, herd-mdl stack created by mdlt will not be deleted; mdlt execution will not delete any existing herd-mdl stack whatever the RollBackOnFailure value is\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\ntrue\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nExistingStack\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nExistingStack\n\n\n\n\n\n\nDescription\n\n\nSpecifies whether mdl is an existing stack, set to true when runing mdlt against existing mdl stack\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nfalse\n\n\n\n\n\n\nAllowed Values\n\n\ntrue, false\n\n\n\n\n\n\n\n\nEC2 Instance Parameters\n\u00b6\n\n\nThese parameters describe the EC2 instance related parameters\n\n\nImageId\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nImageId\n\n\n\n\n\n\nDescription\n\n\nAMI id for the EC2 instances. Note that OSS user may use any other AMI which is similar to amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2. However, there could be some issues in terms of package installation/availability, while using a different AMI. So, it is user's responsibility to make sure provided AMI has all the packages like amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nami-1853ac65\n\n\n\n\n\n\n\n\nInstanceType\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nInstanceType\n\n\n\n\n\n\nDescription\n\n\nSpecifies the instance type for Mdlt Deploy Host EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nDefault Value\n\n\nt2.medium\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nKeyPairName\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nKeyPairName\n\n\n\n\n\n\nDescription\n\n\nSpecifies the existing key pair name to be used for Mdlt Deploy Host EC2\n\n\n\n\n\n\nRequired\n\n\nYes\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nVPC Parameters\n\u00b6\n\n\nThese parameters are related to AWS VPC id, private subnets and public subnet. These are required only if CreateVPC = false\n\n\nMdlVpcId\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdlVpcId\n\n\n\n\n\n\nDescription\n\n\nexisting vpc id to be used for herd-mdl stack creation\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateVPC==false)\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nMdlPrivateSubnets\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdlPrivateSubnets\n\n\n\n\n\n\nDescription\n\n\nexisting private subnets list to be used for herd-mdl stack creation\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateVPC==false)\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nMdlPublicSubnets\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nMdlPublicSubnets\n\n\n\n\n\n\nDescription\n\n\nexisting public subnets to be used for herd-mdl stack creation\n\n\n\n\n\n\nRequired\n\n\nOnly If (CreateVPC==false)\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details\n\n\n\n\n\n\n\n\nWeb Domain and Certificate Parameters\n\u00b6\n\n\nThese parameters are related to Certificates and Domains. These are required only if MdlAuthStackName has value\n\n\nCertificateArn\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nCertificateArn\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Arn information from ACM for the Certificate to be used in MDL. Refer \nAWS documentation\n to create Certificates in ACM.\n\n\n\n\n\n\nRequired\n\n\nOnly If (MdltAuthStack is not empty and ExistingStack is false)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS documentation\n for getting the ARN of the Certificate. Note that the certificate is used for three end points: Herd, Shepherd, and Bdsql. So, Certificate should have \nWildcard Domain Name\n. The Certificate should match any first level subdomain. Format - \n.domainName\n* (Example: \n.example.com\n). MD prefixes corresponding first level subdomain (Example: \nmdlHerd.example.com\n, \nmdlShepherd.example.com\n, and \nmdlBdsql.example.com\n*).\n\n\n\n\n\n\n\n\nDomainNameSuffix\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDomainNameSuffix\n\n\n\n\n\n\nDescription\n\n\nSpecifies the Domain Name Suffix as per the Certificate specified in \"CertificateArn\"\n\n\n\n\n\n\nRequired\n\n\nOnly If (MdltAuthStack is not empty and ExistingStack is false)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS documentation\n for setting up a new Domain. When \"EnableSSLAndAuth\" option is enabled, MDL uses this DomainNameSuffix for the Route53 configurations. So, user needs to own this specified domain. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.\n\n\n\n\n\n\n\n\nHostedZoneName\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nHostedZoneName\n\n\n\n\n\n\nDescription\n\n\nSpecifies the HostedZoneName for Route53 configuration\n\n\n\n\n\n\nRequired\n\n\nOnly If (MdltAuthStack is not empty and ExistingStack is false)\n\n\n\n\n\n\nDefault Value\n\n\n\n\n\n\n\n\nAllowed Values\n\n\nRefer \nAWS Documentation\n for more details about creating Hosted Zone. When \"EnableSSLAndAuth\" option is enabled, MDL uses this HostedZoneName for the Route53 configurations. So, user needs to own this specified domain related to the HostedZone. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.\n\n\n\n\n\n\n\n\nMDLT Execution CloudWatch logs\n\u00b6\n\n\nSteps:\n\n\n\n\nLogin to AWS Console and navigate to CloudWatch\n\n\nClick on 'Logs' in the left panel\n\n\nFilter Log Groups with stack cloudwatch log group name\n\n\nwhere to find mdlt log group name?\n: find the stack with Description 'MDL - Functional Test Deploy Host' from AWS CloudFormation console, the stack name is the mdlt log group name.(Example: mdlt-DeployHostHttpWithoutAuth-FUPHGEXHSQLX)\n\n\n\n\n\n\nClick on above filtered stack log group to open it, inside this stack log group folder, you can find following mdlt logs:\n\n\nmdlt cfn-init log,\n\n\nmdlt setup log\n\n\nmdlt functionality test execution log\n\n\nmdlt junit jupiter log\n\n\nmdlt shutdown log\n\n\n\n\n\n\n\n\nMDLT Known Issues\n\u00b6\n\n\nThe vpc 'vpc-xxxxxx' has dependencies and cannot be deleted\n\u00b6\n\n\n\n\nSteps to delete the vpc manually:\n\n\nfind vpc id from createVpc stack output parameter VPC. \n\n\ngo to aws vpc console and click Your VPCs \n\n\nenter the vpc id found in step one. \n\n\nselect your vpc, click button Actions, Delete Vpc, select the checkbox to delete connect, confirm vpc deletion by clicking the button 'Yes, Delete'\n\n\n\n\n\n\n\n\nAfter MDLT execution, mdlt wrapper stack is not deleted automatically.\n\u00b6\n\n\n\n\nSolution steps to delete mdlt wrapper stack maunally:\n\n\nlogin to aws cloudformation console\n\n\nsearch by mdlt wrapper stack name, choose the mdlt wrapper stack, click Actions, select 'Delete Stack'.( mdlt wrapper stack name is the stackName you used when creating mdlt stack)",
            "title": "MDLTests (MDLT)"
        },
        {
            "location": "/mdlt/#herd-mdl-functionality-test-mdlt",
            "text": "",
            "title": "Herd-MDL Functionality Test : MDLT"
        },
        {
            "location": "/mdlt/#overview",
            "text": "MDLT refers to an automated test-framework for Herd-MDL, it includes bringing up herd-mdl stack, running tests against herd-mdl stack, shutting down herd-mdl stack.",
            "title": "Overview"
        },
        {
            "location": "/mdlt/#prerequisites",
            "text": "These are prerequisites that are necessary for installing MDL components for Basic Installation Type   See  Herd-MDL Prerequisites  for Herd-MDL prerequisites.   Existing EC2 Key Value Pair",
            "title": "Prerequisites"
        },
        {
            "location": "/mdlt/#simple-mdlt-executionnoauth",
            "text": "Download the attached  mdlt.yml  file to local file system  Login to AWS console and navigate to  Cloudformation  Create the stack using option \"Upload a template to Amazon S3\" - Refer  AWS documentation  for selecting a local template  Choose the mdlt.yml file from local file system  In the next Parameters Edit page,   Enter the values for  Stack Name     A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.    Select any existing ec2 key pair from dropdown for parameter:  KeyPairName  Leave all other parameters to their default values, only Herd-MDL stack without auth will be created by default values.   Please refer to MDLT Stack Parameters Specifications for creating Herd-MDL stack with authentication/authorization.    In the next page, specify the stack options as per  AWS documentation  Review the parameters, and create the stack as per  AWS documentation  Wait for \"CREATE_COMPLETE\" on the stack and all nested stacks.(approximate wait time here is 2 hours)  Checkout below cloudwatch documentation to find test execution results  Wait for the mdlt DeployHost stack to be deleted.(approximate wait time here is 1.5 hour)  mdlt DeployHost stack name format : ${MDLInstanceName}-DeployHostHttpWithoutAuth-${awsUniqueNumber}(eg. mdlt-DeployHostHttpWithoutAuth-A9915FUEU3JI)    if CreateVPC==true while creating mdlt, you need to delete vpc manually, steps see  MDLT Known Issues    Delete mdlt wrapper stack from aws CloudFormation console, step below  MDLT Known Issues .(All nested stacks are deleted automatically by mdlt)",
            "title": "Simple MDLT Execution(noAuth)"
        },
        {
            "location": "/mdlt/#mdlt-with-auth-stack",
            "text": "Same steps as above Simple Installation, but in stack parameters edit page, filling valid values for following parameters.  MdlAuthStackName :  empty parameter value for MdlNoAuthStackName, and enter auth stack name in parameter MdlAuthStackName  CertificateArn :  valid aws certificate ARN, refer to Herd-MDL Advanced install[advanced-install.md] for more information  DomainNameSuffix :  domain name suffix, refer to Herd-MDL Advanced install[advanced-install.md] for more information  HostedZoneName :  hosted zone name, refer to Herd-MDL Advanced install[advanced-install.md] for more information",
            "title": "MDLT with Auth stack"
        },
        {
            "location": "/mdlt/#mdlt-against-existing-stack",
            "text": "Same steps as above Simple Installation, but in stack parameters edit page, filling different values for following parameters  If existing stack is noAuth stack, enter existing stack name in parameter  MdlNoAuthStackName  ; if existing stack is auth stack, empty parameter value for MdlNoAuthStackName, and enter existing stack name in parameter  MdlAuthStackName  set parameter CreateVPC value to false  set parameter ExistingStack value to true  Enter correct value for  MdlPrivateSubnets , which is the existing stack PrivateSubnets value(can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)  Enter correct value for  MdlPublicSubnets , which is the existing stack PublicSubnets value (can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)  Enter correct value for  MdlVpcId , which is the existing stack vpc id value (can be found in existing stack VPC SSM parameter, please refer to Herd-MDL docs for more info)",
            "title": "MDLT against Existing stack"
        },
        {
            "location": "/mdlt/#mdlt-cft-specifications",
            "text": "",
            "title": "MDLT CFT Specifications"
        },
        {
            "location": "/mdlt/#deployment-parameters",
            "text": "These parameters are related to which version and components to deploy.  ReleaseVersion           Name  ReleaseVersion    Description  Release version of MDL application to install    Required  Yes    Default Value  1.4.0    Allowed Value  1.4.0     DeployComponents           Name  DeployComponents    Description  MDL Component to deploy    Required  Yes    Default Value  All    Allowed Values  Parameter Value Description All Install all the available Components Prereqs Only Install only the pre-requirements without any EC2 Herd Install Prereqs then Herd and its dependencies Metastor Install Prereqs, Herd, Metastor and all their depencencies",
            "title": "Deployment Parameters"
        },
        {
            "location": "/mdlt/#generic-parameters",
            "text": "These parameters define the basic parameters used across various components  MDLInstanceName           Name  MDLInstanceName    Description  Name of the Application being installed    Required  Yes    Default Value  mdlt    Allowed Pattern  [a-z0-9_]*    Max Length  15     Environment           Name  Environment    Description  Environment name for MDL    Required  Yes    Default Value  prod    Allowed Pattern  [a-z0-9_]*    Max Length  4     MdltResultS3BucketName           Name  MdltResultS3BucketName    Description  existing s3 bucket name to save mdlt test execution results, if this parameter leaves empty, test execution results will be saved to mdlt staging bucket: ${AWS::AccountId}-${MDLInstanceName}-mdlt-${Environment}    Required  NO",
            "title": "Generic Parameters"
        },
        {
            "location": "/mdlt/#mdl-stack-name-parameters",
            "text": "These parameters define the herd-mdl stack names, either existing stack or stack to be created  MdlNoAuthStackName           Name  MdlNoAuthStackName    Description  stack name of existing noAuth herd-mdl stack, or stack name to be used for new herd-mdl noAuth stack creation; when this value leaves empty, mdlt will not create MDL noAuth stack    Required  NO    Default Value  mdltNoAuth    Constraint  must be a non-existing stack name if wants mdlt to create new herd-mdl stack     MdlAuthStackName           Name  MdlAuthStackName    Description  stack name of existing auth herd-mdl stack, or stack name to be used for new herd-mdl auth stack creation; when this value leaves empty, mdlt will not create MDL auth stack    Required  NO    Constraint  must be a non-existing stack name if wants mdlt to create new herd-mdl stack",
            "title": "MDL Stack Name Parameters"
        },
        {
            "location": "/mdlt/#conditional-parameters",
            "text": "These are conditional parameters to decide whether MDL creates certain resources or MDL uses existing resources. In each case where a parameter is false, SSM parameters must be present that allow MDL to reference the resources that have been created prior to running the Herd-MDL automated install.   CreateVPC             Name  CreateVPC    Description  Specifies whether to create new VPC/Subnets or to use existing VPC/Subnets. User needs to fill the SSM parameters as per below information in case of using existing VPC/Subnets.    Required  Yes    Default Value  true    Allowed Values  true, false    VPC Parameters  (required if false)  Enter all bellow VPC Parameters with correct value while creating the mdlt stack     RollbackOnFailure             Name  RollbackOnFailure    Description  Specifies whether to shutdown herd-mdl stack after mdlt execution, this only has effects on herd-mdl stack created by mdlt; when RollBackOnFailure==true, herd-mdl stack will be deleted automatically after test execution; when set to false, herd-mdl stack created by mdlt will not be deleted; mdlt execution will not delete any existing herd-mdl stack whatever the RollBackOnFailure value is    Required  Yes    Default Value  true    Allowed Values  true, false     ExistingStack             Name  ExistingStack    Description  Specifies whether mdl is an existing stack, set to true when runing mdlt against existing mdl stack    Required  Yes    Default Value  false    Allowed Values  true, false",
            "title": "Conditional Parameters"
        },
        {
            "location": "/mdlt/#ec2-instance-parameters",
            "text": "These parameters describe the EC2 instance related parameters  ImageId             Name  ImageId    Description  AMI id for the EC2 instances. Note that OSS user may use any other AMI which is similar to amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2. However, there could be some issues in terms of package installation/availability, while using a different AMI. So, it is user's responsibility to make sure provided AMI has all the packages like amzn-ami-hvm-2017.09.1.20180307-x86_64-gp2    Required  Yes    Default Value  ami-1853ac65     InstanceType             Name  InstanceType    Description  Specifies the instance type for Mdlt Deploy Host EC2    Required  Yes    Default Value  t2.medium    Allowed Values  Refer  AWS Documentation  for more details     KeyPairName             Name  KeyPairName    Description  Specifies the existing key pair name to be used for Mdlt Deploy Host EC2    Required  Yes    Allowed Values  Refer  AWS Documentation  for more details",
            "title": "EC2 Instance Parameters"
        },
        {
            "location": "/mdlt/#vpc-parameters",
            "text": "These parameters are related to AWS VPC id, private subnets and public subnet. These are required only if CreateVPC = false  MdlVpcId             Name  MdlVpcId    Description  existing vpc id to be used for herd-mdl stack creation    Required  Only If (CreateVPC==false)    Allowed Values  Refer  AWS Documentation  for more details     MdlPrivateSubnets             Name  MdlPrivateSubnets    Description  existing private subnets list to be used for herd-mdl stack creation    Required  Only If (CreateVPC==false)    Allowed Values  Refer  AWS Documentation  for more details     MdlPublicSubnets             Name  MdlPublicSubnets    Description  existing public subnets to be used for herd-mdl stack creation    Required  Only If (CreateVPC==false)    Allowed Values  Refer  AWS Documentation  for more details",
            "title": "VPC Parameters"
        },
        {
            "location": "/mdlt/#web-domain-and-certificate-parameters",
            "text": "These parameters are related to Certificates and Domains. These are required only if MdlAuthStackName has value  CertificateArn             Name  CertificateArn    Description  Specifies the Arn information from ACM for the Certificate to be used in MDL. Refer  AWS documentation  to create Certificates in ACM.    Required  Only If (MdltAuthStack is not empty and ExistingStack is false)    Default Value     Allowed Values  Refer  AWS documentation  for getting the ARN of the Certificate. Note that the certificate is used for three end points: Herd, Shepherd, and Bdsql. So, Certificate should have  Wildcard Domain Name . The Certificate should match any first level subdomain. Format -  .domainName * (Example:  .example.com ). MD prefixes corresponding first level subdomain (Example:  mdlHerd.example.com ,  mdlShepherd.example.com , and  mdlBdsql.example.com *).     DomainNameSuffix             Name  DomainNameSuffix    Description  Specifies the Domain Name Suffix as per the Certificate specified in \"CertificateArn\"    Required  Only If (MdltAuthStack is not empty and ExistingStack is false)    Default Value     Allowed Values  Refer  AWS documentation  for setting up a new Domain. When \"EnableSSLAndAuth\" option is enabled, MDL uses this DomainNameSuffix for the Route53 configurations. So, user needs to own this specified domain. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.     HostedZoneName             Name  HostedZoneName    Description  Specifies the HostedZoneName for Route53 configuration    Required  Only If (MdltAuthStack is not empty and ExistingStack is false)    Default Value     Allowed Values  Refer  AWS Documentation  for more details about creating Hosted Zone. When \"EnableSSLAndAuth\" option is enabled, MDL uses this HostedZoneName for the Route53 configurations. So, user needs to own this specified domain related to the HostedZone. And, this Domain name must match the certificate specified in \"CertificateArn\" parameter.",
            "title": "Web Domain and Certificate Parameters"
        },
        {
            "location": "/mdlt/#mdlt-execution-cloudwatch-logs",
            "text": "Steps:   Login to AWS Console and navigate to CloudWatch  Click on 'Logs' in the left panel  Filter Log Groups with stack cloudwatch log group name  where to find mdlt log group name? : find the stack with Description 'MDL - Functional Test Deploy Host' from AWS CloudFormation console, the stack name is the mdlt log group name.(Example: mdlt-DeployHostHttpWithoutAuth-FUPHGEXHSQLX)    Click on above filtered stack log group to open it, inside this stack log group folder, you can find following mdlt logs:  mdlt cfn-init log,  mdlt setup log  mdlt functionality test execution log  mdlt junit jupiter log  mdlt shutdown log",
            "title": "MDLT Execution CloudWatch logs"
        },
        {
            "location": "/mdlt/#mdlt-known-issues",
            "text": "",
            "title": "MDLT Known Issues"
        },
        {
            "location": "/mdlt/#the-vpc-vpc-xxxxxx-has-dependencies-and-cannot-be-deleted",
            "text": "Steps to delete the vpc manually:  find vpc id from createVpc stack output parameter VPC.   go to aws vpc console and click Your VPCs   enter the vpc id found in step one.   select your vpc, click button Actions, Delete Vpc, select the checkbox to delete connect, confirm vpc deletion by clicking the button 'Yes, Delete'",
            "title": "The vpc 'vpc-xxxxxx' has dependencies and cannot be deleted"
        },
        {
            "location": "/mdlt/#after-mdlt-execution-mdlt-wrapper-stack-is-not-deleted-automatically",
            "text": "Solution steps to delete mdlt wrapper stack maunally:  login to aws cloudformation console  search by mdlt wrapper stack name, choose the mdlt wrapper stack, click Actions, select 'Delete Stack'.( mdlt wrapper stack name is the stackName you used when creating mdlt stack)",
            "title": "After MDLT execution, mdlt wrapper stack is not deleted automatically."
        },
        {
            "location": "/tutorials/",
            "text": "MDL Tutorials and walk-throughs\n\u00b6\n\n\nPerforming a zero-downtime upgrade on HERD\n\u00b6\n\n\nMDL supports Performing zero-downtime Deployments of HERD with AWS CodeDeploy in a \nBlue/Green\n fashion.\nWe chose Blue/Green as our deployment model for upgrades because of the various advantages it offers, viz. \n\n\n\n\nZero-downtime for clients using the system\n\n\nThe ability to perform smoke-tests \nbefore\n traffic is rerouted and a newer version goes live\n\n\n\n\nIn the following section we'll show you how to perform a zero-downtime upgrade by using the AWS console.\n\n\n\n\n\n\nLogin to the AWS console and select the \nLambda\n service.\n\n\n\n\nNote: The rolling upgrade Lambda function is created in the same region that your MDL stack was stood up in.\n\n\n\n\n\n\n\n\nFind the upgrade Herd lambda function for your stack, it follows the following naming-convention:\n \n \n${MDLInstanceName}-Herd-${Environment}-UPGRADE-HERD-LAMBDA-FUNCTION\n \n\n\n \n\n\n\n\n\n\nClick on the lambda function and proceed to configure a test-event on the top-right corner. We'll use this test-event to invoke the lambda function. \n\n\n \n\n\n\n\n\n\nClick on \nConfigure test events\n drop-down menu item and create a new test-event for the lambda function.  \n\n\n \n  \n\n\n\n\n\n\nSelect the test-event we created in the previous step and click on the \nTest\n button on the top-right corner. \n\n\n \n\n\n\n\n\n\nAt this point the deployment has been invoked and you could simply stop here and wait for the requested version of HERD to be avaiable (which normally takes about 15 minutes).\n   To verify - access HERD's \nbuildInfo\n page and check if the requested version is available.\n   \n\n   You could also monitor the deployment progress in the AWS CodeDeploy console; to do that, note down the \ndeployment-id\n from the lambda execution logs which appear in the previous step after\n   you clicked on the \nTest\n button and the execution completed. \n\n\n \n \n\n\n\n\n\n\nNext, navigate to the CodeDeploy service in the AWS console and select \nDeployments\n from the side-bar, then select the deployment-id we noted down previously. \n\n\n\n\nNote: The deployment's \nstatus\n might show \nin-progress\n and it should change to \nsuccessful\n afterwards. \n\n\n\n\n\n\n \n \n\n\nWait for the deployment - it is complete when all 4 steps are \nSuccessful\n as shown in the following image \n\n\n \n  \n\n\nAccess HERD's \nbuildInfo\n page and verify that the requested version is now available. \n\n\n\n\nNote: A link to the buildInfo page can be found in the outputs section of the nested Herd Stack when MDL was deployed.",
            "title": "Tutorials"
        },
        {
            "location": "/tutorials/#mdl-tutorials-and-walk-throughs",
            "text": "",
            "title": "MDL Tutorials and walk-throughs"
        },
        {
            "location": "/tutorials/#performing-a-zero-downtime-upgrade-on-herd",
            "text": "MDL supports Performing zero-downtime Deployments of HERD with AWS CodeDeploy in a  Blue/Green  fashion.\nWe chose Blue/Green as our deployment model for upgrades because of the various advantages it offers, viz.    Zero-downtime for clients using the system  The ability to perform smoke-tests  before  traffic is rerouted and a newer version goes live   In the following section we'll show you how to perform a zero-downtime upgrade by using the AWS console.    Login to the AWS console and select the  Lambda  service.   Note: The rolling upgrade Lambda function is created in the same region that your MDL stack was stood up in.     Find the upgrade Herd lambda function for your stack, it follows the following naming-convention:\n    ${MDLInstanceName}-Herd-${Environment}-UPGRADE-HERD-LAMBDA-FUNCTION         Click on the lambda function and proceed to configure a test-event on the top-right corner. We'll use this test-event to invoke the lambda function.        Click on  Configure test events  drop-down menu item and create a new test-event for the lambda function.            Select the test-event we created in the previous step and click on the  Test  button on the top-right corner.        At this point the deployment has been invoked and you could simply stop here and wait for the requested version of HERD to be avaiable (which normally takes about 15 minutes).\n   To verify - access HERD's  buildInfo  page and check if the requested version is available.\n    \n   You could also monitor the deployment progress in the AWS CodeDeploy console; to do that, note down the  deployment-id  from the lambda execution logs which appear in the previous step after\n   you clicked on the  Test  button and the execution completed.          Next, navigate to the CodeDeploy service in the AWS console and select  Deployments  from the side-bar, then select the deployment-id we noted down previously.    Note: The deployment's  status  might show  in-progress  and it should change to  successful  afterwards.          Wait for the deployment - it is complete when all 4 steps are  Successful  as shown in the following image         Access HERD's  buildInfo  page and verify that the requested version is now available.    Note: A link to the buildInfo page can be found in the outputs section of the nested Herd Stack when MDL was deployed.",
            "title": "Performing a zero-downtime upgrade on HERD"
        }
    ]
}